
RTOS_Task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004750  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08004810  08004810  00005810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800493c  0800493c  0000606c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800493c  0800493c  0000606c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800493c  0800493c  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800493c  0800493c  0000593c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004940  08004940  00005940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08004944  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ad4  2000006c  080049b0  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b40  080049b0  00006b40  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000108c4  00000000  00000000  00006094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002831  00000000  00000000  00016958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb8  00000000  00000000  00019190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b71  00000000  00000000  0001a048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000173c7  00000000  00000000  0001abb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012ac7  00000000  00000000  00031f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cecb  00000000  00000000  00044a47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d1912  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c8c  00000000  00000000  000d1958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000d55e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080047f8 	.word	0x080047f8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	080047f8 	.word	0x080047f8

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800040e:	4b08      	ldr	r3, [pc, #32]	@ (8000430 <MX_GPIO_Init+0x28>)
 8000410:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000412:	4b07      	ldr	r3, [pc, #28]	@ (8000430 <MX_GPIO_Init+0x28>)
 8000414:	2101      	movs	r1, #1
 8000416:	430a      	orrs	r2, r1
 8000418:	635a      	str	r2, [r3, #52]	@ 0x34
 800041a:	4b05      	ldr	r3, [pc, #20]	@ (8000430 <MX_GPIO_Init+0x28>)
 800041c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800041e:	2201      	movs	r2, #1
 8000420:	4013      	ands	r3, r2
 8000422:	607b      	str	r3, [r7, #4]
 8000424:	687b      	ldr	r3, [r7, #4]

}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	46bd      	mov	sp, r7
 800042a:	b002      	add	sp, #8
 800042c:	bd80      	pop	{r7, pc}
 800042e:	46c0      	nop			@ (mov r8, r8)
 8000430:	40021000 	.word	0x40021000

08000434 <logger_log>:
#include "logger.h"
#include <stdio.h>


void logger_log(const char *msg) {
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
	printf("LOG: %s\r\n", msg);
 800043c:	687a      	ldr	r2, [r7, #4]
 800043e:	4b04      	ldr	r3, [pc, #16]	@ (8000450 <logger_log+0x1c>)
 8000440:	0011      	movs	r1, r2
 8000442:	0018      	movs	r0, r3
 8000444:	f003 f98c 	bl	8003760 <iprintf>
}
 8000448:	46c0      	nop			@ (mov r8, r8)
 800044a:	46bd      	mov	sp, r7
 800044c:	b002      	add	sp, #8
 800044e:	bd80      	pop	{r7, pc}
 8000450:	08004810 	.word	0x08004810

08000454 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000458:	f000 fc75 	bl	8000d46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800045c:	f000 f830 	bl	80004c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000460:	f7ff ffd2 	bl	8000408 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000464:	f000 fb94 	bl	8000b90 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000468:	f000 fb22 	bl	8000ab0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 800046c:	4b10      	ldr	r3, [pc, #64]	@ (80004b0 <main+0x5c>)
 800046e:	0018      	movs	r0, r3
 8000470:	f001 fc5a 	bl	8001d28 <HAL_TIM_Base_Start>
  scheduler_init();
 8000474:	f000 f878 	bl	8000568 <scheduler_init>

  create_task(task1, NULL, 5); // middle priority
 8000478:	4b0e      	ldr	r3, [pc, #56]	@ (80004b4 <main+0x60>)
 800047a:	2205      	movs	r2, #5
 800047c:	2100      	movs	r1, #0
 800047e:	0018      	movs	r0, r3
 8000480:	f000 f87c 	bl	800057c <create_task>
  create_task(task2, NULL, 1); // highest priority
 8000484:	4b0c      	ldr	r3, [pc, #48]	@ (80004b8 <main+0x64>)
 8000486:	2201      	movs	r2, #1
 8000488:	2100      	movs	r1, #0
 800048a:	0018      	movs	r0, r3
 800048c:	f000 f876 	bl	800057c <create_task>
  create_task(task3, NULL, 7); // lowest priority
 8000490:	4b0a      	ldr	r3, [pc, #40]	@ (80004bc <main+0x68>)
 8000492:	2207      	movs	r2, #7
 8000494:	2100      	movs	r1, #0
 8000496:	0018      	movs	r0, r3
 8000498:	f000 f870 	bl	800057c <create_task>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  scheduler_run();
 800049c:	f000 f8c8 	bl	8000630 <scheduler_run>
	   __WFI(); // Wait for interrupt; sleep (low power mode) when no task is ready until interrupt occurs or task gets ready
 80004a0:	bf30      	wfi

	  if (scheduler_all_tasks_done()) {
 80004a2:	f000 f985 	bl	80007b0 <scheduler_all_tasks_done>
 80004a6:	1e03      	subs	r3, r0, #0
 80004a8:	d0f8      	beq.n	800049c <main+0x48>

		  scheduler_reset_all_tasks();
 80004aa:	f000 f9a9 	bl	8000800 <scheduler_reset_all_tasks>
	  scheduler_run();
 80004ae:	e7f5      	b.n	800049c <main+0x48>
 80004b0:	20000910 	.word	0x20000910
 80004b4:	08000a2d 	.word	0x08000a2d
 80004b8:	08000a59 	.word	0x08000a59
 80004bc:	08000a85 	.word	0x08000a85

080004c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c0:	b590      	push	{r4, r7, lr}
 80004c2:	b08f      	sub	sp, #60	@ 0x3c
 80004c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004c6:	2418      	movs	r4, #24
 80004c8:	193b      	adds	r3, r7, r4
 80004ca:	0018      	movs	r0, r3
 80004cc:	2320      	movs	r3, #32
 80004ce:	001a      	movs	r2, r3
 80004d0:	2100      	movs	r1, #0
 80004d2:	f003 f955 	bl	8003780 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d6:	1d3b      	adds	r3, r7, #4
 80004d8:	0018      	movs	r0, r3
 80004da:	2314      	movs	r3, #20
 80004dc:	001a      	movs	r2, r3
 80004de:	2100      	movs	r1, #0
 80004e0:	f003 f94e 	bl	8003780 <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 80004e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000558 <SystemClock_Config+0x98>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	2207      	movs	r2, #7
 80004ea:	4393      	bics	r3, r2
 80004ec:	001a      	movs	r2, r3
 80004ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000558 <SystemClock_Config+0x98>)
 80004f0:	2101      	movs	r1, #1
 80004f2:	430a      	orrs	r2, r1
 80004f4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004f6:	193b      	adds	r3, r7, r4
 80004f8:	2202      	movs	r2, #2
 80004fa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004fc:	193b      	adds	r3, r7, r4
 80004fe:	2280      	movs	r2, #128	@ 0x80
 8000500:	0052      	lsls	r2, r2, #1
 8000502:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000504:	193b      	adds	r3, r7, r4
 8000506:	2200      	movs	r2, #0
 8000508:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800050a:	193b      	adds	r3, r7, r4
 800050c:	2240      	movs	r2, #64	@ 0x40
 800050e:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000510:	193b      	adds	r3, r7, r4
 8000512:	0018      	movs	r0, r3
 8000514:	f000 ffe4 	bl	80014e0 <HAL_RCC_OscConfig>
 8000518:	1e03      	subs	r3, r0, #0
 800051a:	d001      	beq.n	8000520 <SystemClock_Config+0x60>
  {
    Error_Handler();
 800051c:	f000 f81e 	bl	800055c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	2207      	movs	r2, #7
 8000524:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	2200      	movs	r2, #0
 800052a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	2200      	movs	r2, #0
 8000530:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	2200      	movs	r2, #0
 8000536:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	2200      	movs	r2, #0
 800053c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800053e:	1d3b      	adds	r3, r7, #4
 8000540:	2101      	movs	r1, #1
 8000542:	0018      	movs	r0, r3
 8000544:	f001 f9f2 	bl	800192c <HAL_RCC_ClockConfig>
 8000548:	1e03      	subs	r3, r0, #0
 800054a:	d001      	beq.n	8000550 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800054c:	f000 f806 	bl	800055c <Error_Handler>
  }
}
 8000550:	46c0      	nop			@ (mov r8, r8)
 8000552:	46bd      	mov	sp, r7
 8000554:	b00f      	add	sp, #60	@ 0x3c
 8000556:	bd90      	pop	{r4, r7, pc}
 8000558:	40022000 	.word	0x40022000

0800055c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000560:	b672      	cpsid	i
}
 8000562:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000564:	46c0      	nop			@ (mov r8, r8)
 8000566:	e7fd      	b.n	8000564 <Error_Handler+0x8>

08000568 <scheduler_init>:

static task_t tasks[MAX_TASKS];
static uint8_t num_tasks = 0;
static int8_t current_task = -1;

void scheduler_init(void) {
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
    num_tasks = 0;
 800056c:	4b02      	ldr	r3, [pc, #8]	@ (8000578 <scheduler_init+0x10>)
 800056e:	2200      	movs	r2, #0
 8000570:	701a      	strb	r2, [r3, #0]
}
 8000572:	46c0      	nop			@ (mov r8, r8)
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	200008c8 	.word	0x200008c8

0800057c <create_task>:

void create_task(task_func_t fn, void *arg, uint32_t priority) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	607a      	str	r2, [r7, #4]
    if (num_tasks >= MAX_TASKS) return;
 8000588:	4b26      	ldr	r3, [pc, #152]	@ (8000624 <create_task+0xa8>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2b03      	cmp	r3, #3
 800058e:	d844      	bhi.n	800061a <create_task+0x9e>

    tasks[num_tasks].fn = fn;
 8000590:	4b24      	ldr	r3, [pc, #144]	@ (8000624 <create_task+0xa8>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	0019      	movs	r1, r3
 8000596:	4a24      	ldr	r2, [pc, #144]	@ (8000628 <create_task+0xac>)
 8000598:	000b      	movs	r3, r1
 800059a:	015b      	lsls	r3, r3, #5
 800059c:	185b      	adds	r3, r3, r1
 800059e:	011b      	lsls	r3, r3, #4
 80005a0:	68f9      	ldr	r1, [r7, #12]
 80005a2:	5099      	str	r1, [r3, r2]
    tasks[num_tasks].arg = arg;
 80005a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000624 <create_task+0xa8>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	0019      	movs	r1, r3
 80005aa:	4a1f      	ldr	r2, [pc, #124]	@ (8000628 <create_task+0xac>)
 80005ac:	000b      	movs	r3, r1
 80005ae:	015b      	lsls	r3, r3, #5
 80005b0:	185b      	adds	r3, r3, r1
 80005b2:	011b      	lsls	r3, r3, #4
 80005b4:	18d3      	adds	r3, r2, r3
 80005b6:	3304      	adds	r3, #4
 80005b8:	68ba      	ldr	r2, [r7, #8]
 80005ba:	601a      	str	r2, [r3, #0]
    tasks[num_tasks].stack[0] = STACK_CANARY;
 80005bc:	4b19      	ldr	r3, [pc, #100]	@ (8000624 <create_task+0xa8>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	0019      	movs	r1, r3
 80005c2:	4a19      	ldr	r2, [pc, #100]	@ (8000628 <create_task+0xac>)
 80005c4:	000b      	movs	r3, r1
 80005c6:	015b      	lsls	r3, r3, #5
 80005c8:	185b      	adds	r3, r3, r1
 80005ca:	011b      	lsls	r3, r3, #4
 80005cc:	18d3      	adds	r3, r2, r3
 80005ce:	3308      	adds	r3, #8
 80005d0:	4a16      	ldr	r2, [pc, #88]	@ (800062c <create_task+0xb0>)
 80005d2:	601a      	str	r2, [r3, #0]
    tasks[num_tasks].is_ready = 1;
 80005d4:	4b13      	ldr	r3, [pc, #76]	@ (8000624 <create_task+0xa8>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	0018      	movs	r0, r3
 80005da:	4913      	ldr	r1, [pc, #76]	@ (8000628 <create_task+0xac>)
 80005dc:	2382      	movs	r3, #130	@ 0x82
 80005de:	009a      	lsls	r2, r3, #2
 80005e0:	0003      	movs	r3, r0
 80005e2:	015b      	lsls	r3, r3, #5
 80005e4:	181b      	adds	r3, r3, r0
 80005e6:	011b      	lsls	r3, r3, #4
 80005e8:	18cb      	adds	r3, r1, r3
 80005ea:	189b      	adds	r3, r3, r2
 80005ec:	2201      	movs	r2, #1
 80005ee:	701a      	strb	r2, [r3, #0]
    tasks[num_tasks].priority = priority;
 80005f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000624 <create_task+0xa8>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	0018      	movs	r0, r3
 80005f6:	490c      	ldr	r1, [pc, #48]	@ (8000628 <create_task+0xac>)
 80005f8:	2383      	movs	r3, #131	@ 0x83
 80005fa:	009a      	lsls	r2, r3, #2
 80005fc:	0003      	movs	r3, r0
 80005fe:	015b      	lsls	r3, r3, #5
 8000600:	181b      	adds	r3, r3, r0
 8000602:	011b      	lsls	r3, r3, #4
 8000604:	18cb      	adds	r3, r1, r3
 8000606:	189b      	adds	r3, r3, r2
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	601a      	str	r2, [r3, #0]
    num_tasks++;
 800060c:	4b05      	ldr	r3, [pc, #20]	@ (8000624 <create_task+0xa8>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	3301      	adds	r3, #1
 8000612:	b2da      	uxtb	r2, r3
 8000614:	4b03      	ldr	r3, [pc, #12]	@ (8000624 <create_task+0xa8>)
 8000616:	701a      	strb	r2, [r3, #0]
 8000618:	e000      	b.n	800061c <create_task+0xa0>
    if (num_tasks >= MAX_TASKS) return;
 800061a:	46c0      	nop			@ (mov r8, r8)
}
 800061c:	46bd      	mov	sp, r7
 800061e:	b004      	add	sp, #16
 8000620:	bd80      	pop	{r7, pc}
 8000622:	46c0      	nop			@ (mov r8, r8)
 8000624:	200008c8 	.word	0x200008c8
 8000628:	20000088 	.word	0x20000088
 800062c:	deadbeef 	.word	0xdeadbeef

08000630 <scheduler_run>:

extern TIM_HandleTypeDef htim2;
char msg_buf[64];

void scheduler_run(void) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b08a      	sub	sp, #40	@ 0x28
 8000634:	af02      	add	r7, sp, #8
    int8_t best_index = -1; // Index of task selected to run
 8000636:	231f      	movs	r3, #31
 8000638:	18fb      	adds	r3, r7, r3
 800063a:	22ff      	movs	r2, #255	@ 0xff
 800063c:	701a      	strb	r2, [r3, #0]
    uint32_t best_priority = 0xFFFFFFFF; //Smallest priority value
 800063e:	2301      	movs	r3, #1
 8000640:	425b      	negs	r3, r3
 8000642:	61bb      	str	r3, [r7, #24]

    for (int i = 0; i < num_tasks; ++i) {
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
 8000648:	e02f      	b.n	80006aa <scheduler_run+0x7a>
        task_t *t = &tasks[i];
 800064a:	697a      	ldr	r2, [r7, #20]
 800064c:	0013      	movs	r3, r2
 800064e:	015b      	lsls	r3, r3, #5
 8000650:	189b      	adds	r3, r3, r2
 8000652:	011b      	lsls	r3, r3, #4
 8000654:	4a3a      	ldr	r2, [pc, #232]	@ (8000740 <scheduler_run+0x110>)
 8000656:	189b      	adds	r3, r3, r2
 8000658:	603b      	str	r3, [r7, #0]

        if (t->is_ready) {
 800065a:	683a      	ldr	r2, [r7, #0]
 800065c:	2382      	movs	r3, #130	@ 0x82
 800065e:	009b      	lsls	r3, r3, #2
 8000660:	56d3      	ldrsb	r3, [r2, r3]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d01e      	beq.n	80006a4 <scheduler_run+0x74>
            if (t->stack[0] != STACK_CANARY) {
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	689b      	ldr	r3, [r3, #8]
 800066a:	4a36      	ldr	r2, [pc, #216]	@ (8000744 <scheduler_run+0x114>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d009      	beq.n	8000684 <scheduler_run+0x54>
                logger_log("Stack overflow detected!");
 8000670:	4b35      	ldr	r3, [pc, #212]	@ (8000748 <scheduler_run+0x118>)
 8000672:	0018      	movs	r0, r3
 8000674:	f7ff fede 	bl	8000434 <logger_log>
                t->is_ready = 0;
 8000678:	683a      	ldr	r2, [r7, #0]
 800067a:	2382      	movs	r3, #130	@ 0x82
 800067c:	009b      	lsls	r3, r3, #2
 800067e:	2100      	movs	r1, #0
 8000680:	54d1      	strb	r1, [r2, r3]
                continue;
 8000682:	e00f      	b.n	80006a4 <scheduler_run+0x74>
            }
            // Find task with highest priority (lowest value)
            if (t->priority < best_priority) {
 8000684:	683a      	ldr	r2, [r7, #0]
 8000686:	2383      	movs	r3, #131	@ 0x83
 8000688:	009b      	lsls	r3, r3, #2
 800068a:	58d3      	ldr	r3, [r2, r3]
 800068c:	69ba      	ldr	r2, [r7, #24]
 800068e:	429a      	cmp	r2, r3
 8000690:	d908      	bls.n	80006a4 <scheduler_run+0x74>
                best_priority = t->priority;
 8000692:	683a      	ldr	r2, [r7, #0]
 8000694:	2383      	movs	r3, #131	@ 0x83
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	58d3      	ldr	r3, [r2, r3]
 800069a:	61bb      	str	r3, [r7, #24]
                best_index = i;
 800069c:	231f      	movs	r3, #31
 800069e:	18fb      	adds	r3, r7, r3
 80006a0:	697a      	ldr	r2, [r7, #20]
 80006a2:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < num_tasks; ++i) {
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	3301      	adds	r3, #1
 80006a8:	617b      	str	r3, [r7, #20]
 80006aa:	4b28      	ldr	r3, [pc, #160]	@ (800074c <scheduler_run+0x11c>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	001a      	movs	r2, r3
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	4293      	cmp	r3, r2
 80006b4:	dbc9      	blt.n	800064a <scheduler_run+0x1a>
            }
        }
    }
    if (best_index >= 0) {
 80006b6:	221f      	movs	r2, #31
 80006b8:	18bb      	adds	r3, r7, r2
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80006be:	d83a      	bhi.n	8000736 <scheduler_run+0x106>
    	current_task = best_index;
 80006c0:	4b23      	ldr	r3, [pc, #140]	@ (8000750 <scheduler_run+0x120>)
 80006c2:	0011      	movs	r1, r2
 80006c4:	18ba      	adds	r2, r7, r2
 80006c6:	7812      	ldrb	r2, [r2, #0]
 80006c8:	701a      	strb	r2, [r3, #0]
        task_t *t = &tasks[best_index];
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	2200      	movs	r2, #0
 80006ce:	569a      	ldrsb	r2, [r3, r2]
 80006d0:	0013      	movs	r3, r2
 80006d2:	015b      	lsls	r3, r3, #5
 80006d4:	189b      	adds	r3, r3, r2
 80006d6:	011b      	lsls	r3, r3, #4
 80006d8:	4a19      	ldr	r2, [pc, #100]	@ (8000740 <scheduler_run+0x110>)
 80006da:	189b      	adds	r3, r3, r2
 80006dc:	613b      	str	r3, [r7, #16]

        uint32_t start = __HAL_TIM_GET_COUNTER(&htim2); // start time
 80006de:	4b1d      	ldr	r3, [pc, #116]	@ (8000754 <scheduler_run+0x124>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006e4:	60fb      	str	r3, [r7, #12]
        t->fn(t->arg);  // Run the task
 80006e6:	693b      	ldr	r3, [r7, #16]
 80006e8:	681a      	ldr	r2, [r3, #0]
 80006ea:	693b      	ldr	r3, [r7, #16]
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	0018      	movs	r0, r3
 80006f0:	4790      	blx	r2
        uint32_t end = __HAL_TIM_GET_COUNTER(&htim2); // end time
 80006f2:	4b18      	ldr	r3, [pc, #96]	@ (8000754 <scheduler_run+0x124>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006f8:	60bb      	str	r3, [r7, #8]

        uint32_t elapsed = (end >= start) ? (end - start) : (0xFFFFFFFF - start + end); // to know the total time of the task. correction for overflow also there
 80006fa:	68ba      	ldr	r2, [r7, #8]
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	429a      	cmp	r2, r3
 8000700:	d303      	bcc.n	800070a <scheduler_run+0xda>
 8000702:	68ba      	ldr	r2, [r7, #8]
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	1ad3      	subs	r3, r2, r3
 8000708:	e003      	b.n	8000712 <scheduler_run+0xe2>
 800070a:	68ba      	ldr	r2, [r7, #8]
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	1ad3      	subs	r3, r2, r3
 8000710:	3b01      	subs	r3, #1
 8000712:	607b      	str	r3, [r7, #4]
        snprintf(msg_buf, sizeof(msg_buf), "Task %d ran for %lu us", best_index + 1, elapsed);
 8000714:	231f      	movs	r3, #31
 8000716:	18fb      	adds	r3, r7, r3
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	b25b      	sxtb	r3, r3
 800071c:	1c59      	adds	r1, r3, #1
 800071e:	4a0e      	ldr	r2, [pc, #56]	@ (8000758 <scheduler_run+0x128>)
 8000720:	480e      	ldr	r0, [pc, #56]	@ (800075c <scheduler_run+0x12c>)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	000b      	movs	r3, r1
 8000728:	2140      	movs	r1, #64	@ 0x40
 800072a:	f002 ff1f 	bl	800356c <sniprintf>
        logger_log(msg_buf);
 800072e:	4b0b      	ldr	r3, [pc, #44]	@ (800075c <scheduler_run+0x12c>)
 8000730:	0018      	movs	r0, r3
 8000732:	f7ff fe7f 	bl	8000434 <logger_log>
    }
}
 8000736:	46c0      	nop			@ (mov r8, r8)
 8000738:	46bd      	mov	sp, r7
 800073a:	b008      	add	sp, #32
 800073c:	bd80      	pop	{r7, pc}
 800073e:	46c0      	nop			@ (mov r8, r8)
 8000740:	20000088 	.word	0x20000088
 8000744:	deadbeef 	.word	0xdeadbeef
 8000748:	0800481c 	.word	0x0800481c
 800074c:	200008c8 	.word	0x200008c8
 8000750:	20000000 	.word	0x20000000
 8000754:	20000910 	.word	0x20000910
 8000758:	08004838 	.word	0x08004838
 800075c:	200008cc 	.word	0x200008cc

08000760 <task_yield>:
void task_yield(void) {
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
    if (current_task >= 0 && current_task < num_tasks) {
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <task_yield+0x44>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	b25b      	sxtb	r3, r3
 800076a:	2b00      	cmp	r3, #0
 800076c:	db16      	blt.n	800079c <task_yield+0x3c>
 800076e:	4b0d      	ldr	r3, [pc, #52]	@ (80007a4 <task_yield+0x44>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	b25b      	sxtb	r3, r3
 8000774:	001a      	movs	r2, r3
 8000776:	4b0c      	ldr	r3, [pc, #48]	@ (80007a8 <task_yield+0x48>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	429a      	cmp	r2, r3
 800077c:	da0e      	bge.n	800079c <task_yield+0x3c>
        tasks[current_task].is_ready = 0; // mark the current task as not ready
 800077e:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <task_yield+0x44>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	b25b      	sxtb	r3, r3
 8000784:	0018      	movs	r0, r3
 8000786:	4909      	ldr	r1, [pc, #36]	@ (80007ac <task_yield+0x4c>)
 8000788:	2382      	movs	r3, #130	@ 0x82
 800078a:	009a      	lsls	r2, r3, #2
 800078c:	0003      	movs	r3, r0
 800078e:	015b      	lsls	r3, r3, #5
 8000790:	181b      	adds	r3, r3, r0
 8000792:	011b      	lsls	r3, r3, #4
 8000794:	18cb      	adds	r3, r1, r3
 8000796:	189b      	adds	r3, r3, r2
 8000798:	2200      	movs	r2, #0
 800079a:	701a      	strb	r2, [r3, #0]
    }
}
 800079c:	46c0      	nop			@ (mov r8, r8)
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	46c0      	nop			@ (mov r8, r8)
 80007a4:	20000000 	.word	0x20000000
 80007a8:	200008c8 	.word	0x200008c8
 80007ac:	20000088 	.word	0x20000088

080007b0 <scheduler_all_tasks_done>:
int scheduler_all_tasks_done(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
    for (int i = 0; i < num_tasks; ++i) {
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	e012      	b.n	80007e2 <scheduler_all_tasks_done+0x32>
        if (tasks[i].is_ready) return 0;
 80007bc:	480e      	ldr	r0, [pc, #56]	@ (80007f8 <scheduler_all_tasks_done+0x48>)
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	2382      	movs	r3, #130	@ 0x82
 80007c2:	0099      	lsls	r1, r3, #2
 80007c4:	0013      	movs	r3, r2
 80007c6:	015b      	lsls	r3, r3, #5
 80007c8:	189b      	adds	r3, r3, r2
 80007ca:	011b      	lsls	r3, r3, #4
 80007cc:	18c3      	adds	r3, r0, r3
 80007ce:	185b      	adds	r3, r3, r1
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	b25b      	sxtb	r3, r3
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <scheduler_all_tasks_done+0x2c>
 80007d8:	2300      	movs	r3, #0
 80007da:	e009      	b.n	80007f0 <scheduler_all_tasks_done+0x40>
    for (int i = 0; i < num_tasks; ++i) {
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3301      	adds	r3, #1
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <scheduler_all_tasks_done+0x4c>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	001a      	movs	r2, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	4293      	cmp	r3, r2
 80007ec:	dbe6      	blt.n	80007bc <scheduler_all_tasks_done+0xc>
    }
    return 1;
 80007ee:	2301      	movs	r3, #1
}
 80007f0:	0018      	movs	r0, r3
 80007f2:	46bd      	mov	sp, r7
 80007f4:	b002      	add	sp, #8
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000088 	.word	0x20000088
 80007fc:	200008c8 	.word	0x200008c8

08000800 <scheduler_reset_all_tasks>:

void scheduler_reset_all_tasks(void) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
    for (int i = 0; i < num_tasks; ++i) {
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	e00e      	b.n	800082a <scheduler_reset_all_tasks+0x2a>
        tasks[i].is_ready = 1;
 800080c:	480c      	ldr	r0, [pc, #48]	@ (8000840 <scheduler_reset_all_tasks+0x40>)
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	2382      	movs	r3, #130	@ 0x82
 8000812:	0099      	lsls	r1, r3, #2
 8000814:	0013      	movs	r3, r2
 8000816:	015b      	lsls	r3, r3, #5
 8000818:	189b      	adds	r3, r3, r2
 800081a:	011b      	lsls	r3, r3, #4
 800081c:	18c3      	adds	r3, r0, r3
 800081e:	185b      	adds	r3, r3, r1
 8000820:	2201      	movs	r2, #1
 8000822:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < num_tasks; ++i) {
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	3301      	adds	r3, #1
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <scheduler_reset_all_tasks+0x44>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	001a      	movs	r2, r3
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4293      	cmp	r3, r2
 8000834:	dbea      	blt.n	800080c <scheduler_reset_all_tasks+0xc>
    }
}
 8000836:	46c0      	nop			@ (mov r8, r8)
 8000838:	46c0      	nop			@ (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	b002      	add	sp, #8
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20000088 	.word	0x20000088
 8000844:	200008c8 	.word	0x200008c8

08000848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084e:	4b0f      	ldr	r3, [pc, #60]	@ (800088c <HAL_MspInit+0x44>)
 8000850:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000852:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <HAL_MspInit+0x44>)
 8000854:	2101      	movs	r1, #1
 8000856:	430a      	orrs	r2, r1
 8000858:	641a      	str	r2, [r3, #64]	@ 0x40
 800085a:	4b0c      	ldr	r3, [pc, #48]	@ (800088c <HAL_MspInit+0x44>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085e:	2201      	movs	r2, #1
 8000860:	4013      	ands	r3, r2
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000866:	4b09      	ldr	r3, [pc, #36]	@ (800088c <HAL_MspInit+0x44>)
 8000868:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800086a:	4b08      	ldr	r3, [pc, #32]	@ (800088c <HAL_MspInit+0x44>)
 800086c:	2180      	movs	r1, #128	@ 0x80
 800086e:	0549      	lsls	r1, r1, #21
 8000870:	430a      	orrs	r2, r1
 8000872:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000874:	4b05      	ldr	r3, [pc, #20]	@ (800088c <HAL_MspInit+0x44>)
 8000876:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000878:	2380      	movs	r3, #128	@ 0x80
 800087a:	055b      	lsls	r3, r3, #21
 800087c:	4013      	ands	r3, r2
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000882:	46c0      	nop			@ (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	b002      	add	sp, #8
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			@ (mov r8, r8)
 800088c:	40021000 	.word	0x40021000

08000890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000894:	46c0      	nop			@ (mov r8, r8)
 8000896:	e7fd      	b.n	8000894 <NMI_Handler+0x4>

08000898 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089c:	46c0      	nop			@ (mov r8, r8)
 800089e:	e7fd      	b.n	800089c <HardFault_Handler+0x4>

080008a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a4:	46c0      	nop			@ (mov r8, r8)
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ae:	46c0      	nop			@ (mov r8, r8)
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b8:	f000 faa6 	bl	8000e08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008bc:	46c0      	nop			@ (mov r8, r8)
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 interrupt.
  */
void USART2_IRQHandler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008c8:	4b03      	ldr	r3, [pc, #12]	@ (80008d8 <USART2_IRQHandler+0x14>)
 80008ca:	0018      	movs	r0, r3
 80008cc:	f001 fdc8 	bl	8002460 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008d0:	46c0      	nop			@ (mov r8, r8)
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	46c0      	nop			@ (mov r8, r8)
 80008d8:	2000095c 	.word	0x2000095c

080008dc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]
 80008ec:	e00a      	b.n	8000904 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008ee:	e000      	b.n	80008f2 <_read+0x16>
 80008f0:	bf00      	nop
 80008f2:	0001      	movs	r1, r0
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	1c5a      	adds	r2, r3, #1
 80008f8:	60ba      	str	r2, [r7, #8]
 80008fa:	b2ca      	uxtb	r2, r1
 80008fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	3301      	adds	r3, #1
 8000902:	617b      	str	r3, [r7, #20]
 8000904:	697a      	ldr	r2, [r7, #20]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	429a      	cmp	r2, r3
 800090a:	dbf0      	blt.n	80008ee <_read+0x12>
  }

  return len;
 800090c:	687b      	ldr	r3, [r7, #4]
}
 800090e:	0018      	movs	r0, r3
 8000910:	46bd      	mov	sp, r7
 8000912:	b006      	add	sp, #24
 8000914:	bd80      	pop	{r7, pc}

08000916 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b086      	sub	sp, #24
 800091a:	af00      	add	r7, sp, #0
 800091c:	60f8      	str	r0, [r7, #12]
 800091e:	60b9      	str	r1, [r7, #8]
 8000920:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
 8000926:	e009      	b.n	800093c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	1c5a      	adds	r2, r3, #1
 800092c:	60ba      	str	r2, [r7, #8]
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	0018      	movs	r0, r3
 8000932:	f000 f9cd 	bl	8000cd0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	3301      	adds	r3, #1
 800093a:	617b      	str	r3, [r7, #20]
 800093c:	697a      	ldr	r2, [r7, #20]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	429a      	cmp	r2, r3
 8000942:	dbf1      	blt.n	8000928 <_write+0x12>
  }
  return len;
 8000944:	687b      	ldr	r3, [r7, #4]
}
 8000946:	0018      	movs	r0, r3
 8000948:	46bd      	mov	sp, r7
 800094a:	b006      	add	sp, #24
 800094c:	bd80      	pop	{r7, pc}

0800094e <_close>:

int _close(int file)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b082      	sub	sp, #8
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000956:	2301      	movs	r3, #1
 8000958:	425b      	negs	r3, r3
}
 800095a:	0018      	movs	r0, r3
 800095c:	46bd      	mov	sp, r7
 800095e:	b002      	add	sp, #8
 8000960:	bd80      	pop	{r7, pc}

08000962 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b082      	sub	sp, #8
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
 800096a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	2280      	movs	r2, #128	@ 0x80
 8000970:	0192      	lsls	r2, r2, #6
 8000972:	605a      	str	r2, [r3, #4]
  return 0;
 8000974:	2300      	movs	r3, #0
}
 8000976:	0018      	movs	r0, r3
 8000978:	46bd      	mov	sp, r7
 800097a:	b002      	add	sp, #8
 800097c:	bd80      	pop	{r7, pc}

0800097e <_isatty>:

int _isatty(int file)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	b082      	sub	sp, #8
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000986:	2301      	movs	r3, #1
}
 8000988:	0018      	movs	r0, r3
 800098a:	46bd      	mov	sp, r7
 800098c:	b002      	add	sp, #8
 800098e:	bd80      	pop	{r7, pc}

08000990 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800099c:	2300      	movs	r3, #0
}
 800099e:	0018      	movs	r0, r3
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b004      	add	sp, #16
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009b0:	4a14      	ldr	r2, [pc, #80]	@ (8000a04 <_sbrk+0x5c>)
 80009b2:	4b15      	ldr	r3, [pc, #84]	@ (8000a08 <_sbrk+0x60>)
 80009b4:	1ad3      	subs	r3, r2, r3
 80009b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009bc:	4b13      	ldr	r3, [pc, #76]	@ (8000a0c <_sbrk+0x64>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d102      	bne.n	80009ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009c4:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <_sbrk+0x64>)
 80009c6:	4a12      	ldr	r2, [pc, #72]	@ (8000a10 <_sbrk+0x68>)
 80009c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ca:	4b10      	ldr	r3, [pc, #64]	@ (8000a0c <_sbrk+0x64>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	18d3      	adds	r3, r2, r3
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d207      	bcs.n	80009e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009d8:	f002 feda 	bl	8003790 <__errno>
 80009dc:	0003      	movs	r3, r0
 80009de:	220c      	movs	r2, #12
 80009e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009e2:	2301      	movs	r3, #1
 80009e4:	425b      	negs	r3, r3
 80009e6:	e009      	b.n	80009fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009e8:	4b08      	ldr	r3, [pc, #32]	@ (8000a0c <_sbrk+0x64>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ee:	4b07      	ldr	r3, [pc, #28]	@ (8000a0c <_sbrk+0x64>)
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	18d2      	adds	r2, r2, r3
 80009f6:	4b05      	ldr	r3, [pc, #20]	@ (8000a0c <_sbrk+0x64>)
 80009f8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80009fa:	68fb      	ldr	r3, [r7, #12]
}
 80009fc:	0018      	movs	r0, r3
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b006      	add	sp, #24
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20006000 	.word	0x20006000
 8000a08:	00000400 	.word	0x00000400
 8000a0c:	2000090c 	.word	0x2000090c
 8000a10:	20000b40 	.word	0x20000b40

08000a14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a18:	4b03      	ldr	r3, [pc, #12]	@ (8000a28 <SystemInit+0x14>)
 8000a1a:	2280      	movs	r2, #128	@ 0x80
 8000a1c:	0512      	lsls	r2, r2, #20
 8000a1e:	609a      	str	r2, [r3, #8]
#endif
}
 8000a20:	46c0      	nop			@ (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	46c0      	nop			@ (mov r8, r8)
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <task1>:
#include "tasks.h"
#include "scheduler.h"
#include "logger.h"

void task1(void *param) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
    logger_log("Task 1 running");
 8000a34:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <task1+0x24>)
 8000a36:	0018      	movs	r0, r3
 8000a38:	f7ff fcfc 	bl	8000434 <logger_log>
    HAL_Delay(1500);
 8000a3c:	4b05      	ldr	r3, [pc, #20]	@ (8000a54 <task1+0x28>)
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f000 f9fe 	bl	8000e40 <HAL_Delay>
    task_yield();
 8000a44:	f7ff fe8c 	bl	8000760 <task_yield>
}
 8000a48:	46c0      	nop			@ (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	b002      	add	sp, #8
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	08004850 	.word	0x08004850
 8000a54:	000005dc 	.word	0x000005dc

08000a58 <task2>:

void task2(void *param) {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
    logger_log("Task 2 running");
 8000a60:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <task2+0x24>)
 8000a62:	0018      	movs	r0, r3
 8000a64:	f7ff fce6 	bl	8000434 <logger_log>
    HAL_Delay(1500);
 8000a68:	4b05      	ldr	r3, [pc, #20]	@ (8000a80 <task2+0x28>)
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f000 f9e8 	bl	8000e40 <HAL_Delay>
    task_yield();
 8000a70:	f7ff fe76 	bl	8000760 <task_yield>
}
 8000a74:	46c0      	nop			@ (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b002      	add	sp, #8
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	08004860 	.word	0x08004860
 8000a80:	000005dc 	.word	0x000005dc

08000a84 <task3>:

void task3(void *param) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
    logger_log("Task 3 running");
 8000a8c:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <task3+0x24>)
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f7ff fcd0 	bl	8000434 <logger_log>
    HAL_Delay(1500);
 8000a94:	4b05      	ldr	r3, [pc, #20]	@ (8000aac <task3+0x28>)
 8000a96:	0018      	movs	r0, r3
 8000a98:	f000 f9d2 	bl	8000e40 <HAL_Delay>
    task_yield();
 8000a9c:	f7ff fe60 	bl	8000760 <task_yield>
}
 8000aa0:	46c0      	nop			@ (mov r8, r8)
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b002      	add	sp, #8
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	08004870 	.word	0x08004870
 8000aac:	000005dc 	.word	0x000005dc

08000ab0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b088      	sub	sp, #32
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ab6:	2310      	movs	r3, #16
 8000ab8:	18fb      	adds	r3, r7, r3
 8000aba:	0018      	movs	r0, r3
 8000abc:	2310      	movs	r3, #16
 8000abe:	001a      	movs	r2, r3
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	f002 fe5d 	bl	8003780 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	0018      	movs	r0, r3
 8000aca:	230c      	movs	r3, #12
 8000acc:	001a      	movs	r2, r3
 8000ace:	2100      	movs	r1, #0
 8000ad0:	f002 fe56 	bl	8003780 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ad4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b54 <MX_TIM2_Init+0xa4>)
 8000ad6:	2280      	movs	r2, #128	@ 0x80
 8000ad8:	05d2      	lsls	r2, r2, #23
 8000ada:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 8000adc:	4b1d      	ldr	r3, [pc, #116]	@ (8000b54 <MX_TIM2_Init+0xa4>)
 8000ade:	222f      	movs	r2, #47	@ 0x2f
 8000ae0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b54 <MX_TIM2_Init+0xa4>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b54 <MX_TIM2_Init+0xa4>)
 8000aea:	2201      	movs	r2, #1
 8000aec:	4252      	negs	r2, r2
 8000aee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af0:	4b18      	ldr	r3, [pc, #96]	@ (8000b54 <MX_TIM2_Init+0xa4>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af6:	4b17      	ldr	r3, [pc, #92]	@ (8000b54 <MX_TIM2_Init+0xa4>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000afc:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <MX_TIM2_Init+0xa4>)
 8000afe:	0018      	movs	r0, r3
 8000b00:	f001 f8ba 	bl	8001c78 <HAL_TIM_Base_Init>
 8000b04:	1e03      	subs	r3, r0, #0
 8000b06:	d001      	beq.n	8000b0c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000b08:	f7ff fd28 	bl	800055c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b0c:	2110      	movs	r1, #16
 8000b0e:	187b      	adds	r3, r7, r1
 8000b10:	2280      	movs	r2, #128	@ 0x80
 8000b12:	0152      	lsls	r2, r2, #5
 8000b14:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b16:	187a      	adds	r2, r7, r1
 8000b18:	4b0e      	ldr	r3, [pc, #56]	@ (8000b54 <MX_TIM2_Init+0xa4>)
 8000b1a:	0011      	movs	r1, r2
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f001 f94f 	bl	8001dc0 <HAL_TIM_ConfigClockSource>
 8000b22:	1e03      	subs	r3, r0, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000b26:	f7ff fd19 	bl	800055c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b36:	1d3a      	adds	r2, r7, #4
 8000b38:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <MX_TIM2_Init+0xa4>)
 8000b3a:	0011      	movs	r1, r2
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f001 fb2d 	bl	800219c <HAL_TIMEx_MasterConfigSynchronization>
 8000b42:	1e03      	subs	r3, r0, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000b46:	f7ff fd09 	bl	800055c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b4a:	46c0      	nop			@ (mov r8, r8)
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	b008      	add	sp, #32
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	46c0      	nop			@ (mov r8, r8)
 8000b54:	20000910 	.word	0x20000910

08000b58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	2380      	movs	r3, #128	@ 0x80
 8000b66:	05db      	lsls	r3, r3, #23
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d10b      	bne.n	8000b84 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b6c:	4b07      	ldr	r3, [pc, #28]	@ (8000b8c <HAL_TIM_Base_MspInit+0x34>)
 8000b6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b70:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <HAL_TIM_Base_MspInit+0x34>)
 8000b72:	2101      	movs	r1, #1
 8000b74:	430a      	orrs	r2, r1
 8000b76:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b78:	4b04      	ldr	r3, [pc, #16]	@ (8000b8c <HAL_TIM_Base_MspInit+0x34>)
 8000b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	4013      	ands	r3, r2
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000b84:	46c0      	nop			@ (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	b004      	add	sp, #16
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40021000 	.word	0x40021000

08000b90 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b94:	4b23      	ldr	r3, [pc, #140]	@ (8000c24 <MX_USART2_UART_Init+0x94>)
 8000b96:	4a24      	ldr	r2, [pc, #144]	@ (8000c28 <MX_USART2_UART_Init+0x98>)
 8000b98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b9a:	4b22      	ldr	r3, [pc, #136]	@ (8000c24 <MX_USART2_UART_Init+0x94>)
 8000b9c:	22e1      	movs	r2, #225	@ 0xe1
 8000b9e:	0252      	lsls	r2, r2, #9
 8000ba0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba2:	4b20      	ldr	r3, [pc, #128]	@ (8000c24 <MX_USART2_UART_Init+0x94>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ba8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c24 <MX_USART2_UART_Init+0x94>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bae:	4b1d      	ldr	r3, [pc, #116]	@ (8000c24 <MX_USART2_UART_Init+0x94>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bb4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c24 <MX_USART2_UART_Init+0x94>)
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bba:	4b1a      	ldr	r3, [pc, #104]	@ (8000c24 <MX_USART2_UART_Init+0x94>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc0:	4b18      	ldr	r3, [pc, #96]	@ (8000c24 <MX_USART2_UART_Init+0x94>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bc6:	4b17      	ldr	r3, [pc, #92]	@ (8000c24 <MX_USART2_UART_Init+0x94>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bcc:	4b15      	ldr	r3, [pc, #84]	@ (8000c24 <MX_USART2_UART_Init+0x94>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bd2:	4b14      	ldr	r3, [pc, #80]	@ (8000c24 <MX_USART2_UART_Init+0x94>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bd8:	4b12      	ldr	r3, [pc, #72]	@ (8000c24 <MX_USART2_UART_Init+0x94>)
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f001 fb46 	bl	800226c <HAL_UART_Init>
 8000be0:	1e03      	subs	r3, r0, #0
 8000be2:	d001      	beq.n	8000be8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000be4:	f7ff fcba 	bl	800055c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000be8:	4b0e      	ldr	r3, [pc, #56]	@ (8000c24 <MX_USART2_UART_Init+0x94>)
 8000bea:	2100      	movs	r1, #0
 8000bec:	0018      	movs	r0, r3
 8000bee:	f002 fbdd 	bl	80033ac <HAL_UARTEx_SetTxFifoThreshold>
 8000bf2:	1e03      	subs	r3, r0, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000bf6:	f7ff fcb1 	bl	800055c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000c24 <MX_USART2_UART_Init+0x94>)
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f002 fc14 	bl	800342c <HAL_UARTEx_SetRxFifoThreshold>
 8000c04:	1e03      	subs	r3, r0, #0
 8000c06:	d001      	beq.n	8000c0c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c08:	f7ff fca8 	bl	800055c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c0c:	4b05      	ldr	r3, [pc, #20]	@ (8000c24 <MX_USART2_UART_Init+0x94>)
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f002 fb92 	bl	8003338 <HAL_UARTEx_DisableFifoMode>
 8000c14:	1e03      	subs	r3, r0, #0
 8000c16:	d001      	beq.n	8000c1c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c18:	f7ff fca0 	bl	800055c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c1c:	46c0      	nop			@ (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	46c0      	nop			@ (mov r8, r8)
 8000c24:	2000095c 	.word	0x2000095c
 8000c28:	40004400 	.word	0x40004400

08000c2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c2c:	b590      	push	{r4, r7, lr}
 8000c2e:	b08b      	sub	sp, #44	@ 0x2c
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	2414      	movs	r4, #20
 8000c36:	193b      	adds	r3, r7, r4
 8000c38:	0018      	movs	r0, r3
 8000c3a:	2314      	movs	r3, #20
 8000c3c:	001a      	movs	r2, r3
 8000c3e:	2100      	movs	r1, #0
 8000c40:	f002 fd9e 	bl	8003780 <memset>
  if(uartHandle->Instance==USART2)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a1f      	ldr	r2, [pc, #124]	@ (8000cc8 <HAL_UART_MspInit+0x9c>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d138      	bne.n	8000cc0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c4e:	4b1f      	ldr	r3, [pc, #124]	@ (8000ccc <HAL_UART_MspInit+0xa0>)
 8000c50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c52:	4b1e      	ldr	r3, [pc, #120]	@ (8000ccc <HAL_UART_MspInit+0xa0>)
 8000c54:	2180      	movs	r1, #128	@ 0x80
 8000c56:	0289      	lsls	r1, r1, #10
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ccc <HAL_UART_MspInit+0xa0>)
 8000c5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c60:	2380      	movs	r3, #128	@ 0x80
 8000c62:	029b      	lsls	r3, r3, #10
 8000c64:	4013      	ands	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	4b18      	ldr	r3, [pc, #96]	@ (8000ccc <HAL_UART_MspInit+0xa0>)
 8000c6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c6e:	4b17      	ldr	r3, [pc, #92]	@ (8000ccc <HAL_UART_MspInit+0xa0>)
 8000c70:	2101      	movs	r1, #1
 8000c72:	430a      	orrs	r2, r1
 8000c74:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c76:	4b15      	ldr	r3, [pc, #84]	@ (8000ccc <HAL_UART_MspInit+0xa0>)
 8000c78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c82:	0021      	movs	r1, r4
 8000c84:	187b      	adds	r3, r7, r1
 8000c86:	220c      	movs	r2, #12
 8000c88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	187b      	adds	r3, r7, r1
 8000c8c:	2202      	movs	r2, #2
 8000c8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	187b      	adds	r3, r7, r1
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	187b      	adds	r3, r7, r1
 8000c98:	2200      	movs	r2, #0
 8000c9a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000c9c:	187b      	adds	r3, r7, r1
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca2:	187a      	adds	r2, r7, r1
 8000ca4:	23a0      	movs	r3, #160	@ 0xa0
 8000ca6:	05db      	lsls	r3, r3, #23
 8000ca8:	0011      	movs	r1, r2
 8000caa:	0018      	movs	r0, r3
 8000cac:	f000 faa6 	bl	80011fc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	201c      	movs	r0, #28
 8000cb6:	f000 f993 	bl	8000fe0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cba:	201c      	movs	r0, #28
 8000cbc:	f000 f9a5 	bl	800100a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000cc0:	46c0      	nop			@ (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	b00b      	add	sp, #44	@ 0x2c
 8000cc6:	bd90      	pop	{r4, r7, pc}
 8000cc8:	40004400 	.word	0x40004400
 8000ccc:	40021000 	.word	0x40021000

08000cd0 <__io_putchar>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000cd8:	2301      	movs	r3, #1
 8000cda:	425b      	negs	r3, r3
 8000cdc:	1d39      	adds	r1, r7, #4
 8000cde:	4804      	ldr	r0, [pc, #16]	@ (8000cf0 <__io_putchar+0x20>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	f001 fb19 	bl	8002318 <HAL_UART_Transmit>
    return ch;
 8000ce6:	687b      	ldr	r3, [r7, #4]
}
 8000ce8:	0018      	movs	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	b002      	add	sp, #8
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	2000095c 	.word	0x2000095c

08000cf4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cf4:	480d      	ldr	r0, [pc, #52]	@ (8000d2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cf6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cf8:	f7ff fe8c 	bl	8000a14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000cfc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000cfe:	e003      	b.n	8000d08 <LoopCopyDataInit>

08000d00 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000d00:	4b0b      	ldr	r3, [pc, #44]	@ (8000d30 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000d02:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000d04:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000d06:	3104      	adds	r1, #4

08000d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000d08:	480a      	ldr	r0, [pc, #40]	@ (8000d34 <LoopForever+0xa>)
  ldr r3, =_edata
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d38 <LoopForever+0xe>)
  adds r2, r0, r1
 8000d0c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000d0e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000d10:	d3f6      	bcc.n	8000d00 <CopyDataInit>
  ldr r2, =_sbss
 8000d12:	4a0a      	ldr	r2, [pc, #40]	@ (8000d3c <LoopForever+0x12>)
  b LoopFillZerobss
 8000d14:	e002      	b.n	8000d1c <LoopFillZerobss>

08000d16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000d16:	2300      	movs	r3, #0
  str  r3, [r2]
 8000d18:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d1a:	3204      	adds	r2, #4

08000d1c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000d1c:	4b08      	ldr	r3, [pc, #32]	@ (8000d40 <LoopForever+0x16>)
  cmp r2, r3
 8000d1e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000d20:	d3f9      	bcc.n	8000d16 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000d22:	f002 fd3b 	bl	800379c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d26:	f7ff fb95 	bl	8000454 <main>

08000d2a <LoopForever>:

LoopForever:
    b LoopForever
 8000d2a:	e7fe      	b.n	8000d2a <LoopForever>
  ldr   r0, =_estack
 8000d2c:	20006000 	.word	0x20006000
  ldr r3, =_sidata
 8000d30:	08004944 	.word	0x08004944
  ldr r0, =_sdata
 8000d34:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000d38:	2000006c 	.word	0x2000006c
  ldr r2, =_sbss
 8000d3c:	2000006c 	.word	0x2000006c
  ldr r3, = _ebss
 8000d40:	20000b40 	.word	0x20000b40

08000d44 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d44:	e7fe      	b.n	8000d44 <ADC1_IRQHandler>

08000d46 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d4c:	1dfb      	adds	r3, r7, #7
 8000d4e:	2200      	movs	r2, #0
 8000d50:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d52:	2003      	movs	r0, #3
 8000d54:	f000 f80e 	bl	8000d74 <HAL_InitTick>
 8000d58:	1e03      	subs	r3, r0, #0
 8000d5a:	d003      	beq.n	8000d64 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000d5c:	1dfb      	adds	r3, r7, #7
 8000d5e:	2201      	movs	r2, #1
 8000d60:	701a      	strb	r2, [r3, #0]
 8000d62:	e001      	b.n	8000d68 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d64:	f7ff fd70 	bl	8000848 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d68:	1dfb      	adds	r3, r7, #7
 8000d6a:	781b      	ldrb	r3, [r3, #0]
}
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	b002      	add	sp, #8
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d74:	b590      	push	{r4, r7, lr}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d7c:	230f      	movs	r3, #15
 8000d7e:	18fb      	adds	r3, r7, r3
 8000d80:	2200      	movs	r2, #0
 8000d82:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000d84:	4b1d      	ldr	r3, [pc, #116]	@ (8000dfc <HAL_InitTick+0x88>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d02b      	beq.n	8000de4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000d8c:	4b1c      	ldr	r3, [pc, #112]	@ (8000e00 <HAL_InitTick+0x8c>)
 8000d8e:	681c      	ldr	r4, [r3, #0]
 8000d90:	4b1a      	ldr	r3, [pc, #104]	@ (8000dfc <HAL_InitTick+0x88>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	0019      	movs	r1, r3
 8000d96:	23fa      	movs	r3, #250	@ 0xfa
 8000d98:	0098      	lsls	r0, r3, #2
 8000d9a:	f7ff f9bf 	bl	800011c <__udivsi3>
 8000d9e:	0003      	movs	r3, r0
 8000da0:	0019      	movs	r1, r3
 8000da2:	0020      	movs	r0, r4
 8000da4:	f7ff f9ba 	bl	800011c <__udivsi3>
 8000da8:	0003      	movs	r3, r0
 8000daa:	0018      	movs	r0, r3
 8000dac:	f000 f93d 	bl	800102a <HAL_SYSTICK_Config>
 8000db0:	1e03      	subs	r3, r0, #0
 8000db2:	d112      	bne.n	8000dda <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2b03      	cmp	r3, #3
 8000db8:	d80a      	bhi.n	8000dd0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dba:	6879      	ldr	r1, [r7, #4]
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	425b      	negs	r3, r3
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f000 f90c 	bl	8000fe0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8000e04 <HAL_InitTick+0x90>)
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	e00d      	b.n	8000dec <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000dd0:	230f      	movs	r3, #15
 8000dd2:	18fb      	adds	r3, r7, r3
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	701a      	strb	r2, [r3, #0]
 8000dd8:	e008      	b.n	8000dec <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dda:	230f      	movs	r3, #15
 8000ddc:	18fb      	adds	r3, r7, r3
 8000dde:	2201      	movs	r2, #1
 8000de0:	701a      	strb	r2, [r3, #0]
 8000de2:	e003      	b.n	8000dec <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000de4:	230f      	movs	r3, #15
 8000de6:	18fb      	adds	r3, r7, r3
 8000de8:	2201      	movs	r2, #1
 8000dea:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000dec:	230f      	movs	r3, #15
 8000dee:	18fb      	adds	r3, r7, r3
 8000df0:	781b      	ldrb	r3, [r3, #0]
}
 8000df2:	0018      	movs	r0, r3
 8000df4:	46bd      	mov	sp, r7
 8000df6:	b005      	add	sp, #20
 8000df8:	bd90      	pop	{r4, r7, pc}
 8000dfa:	46c0      	nop			@ (mov r8, r8)
 8000dfc:	2000000c 	.word	0x2000000c
 8000e00:	20000004 	.word	0x20000004
 8000e04:	20000008 	.word	0x20000008

08000e08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e0c:	4b05      	ldr	r3, [pc, #20]	@ (8000e24 <HAL_IncTick+0x1c>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	001a      	movs	r2, r3
 8000e12:	4b05      	ldr	r3, [pc, #20]	@ (8000e28 <HAL_IncTick+0x20>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	18d2      	adds	r2, r2, r3
 8000e18:	4b03      	ldr	r3, [pc, #12]	@ (8000e28 <HAL_IncTick+0x20>)
 8000e1a:	601a      	str	r2, [r3, #0]
}
 8000e1c:	46c0      	nop			@ (mov r8, r8)
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	46c0      	nop			@ (mov r8, r8)
 8000e24:	2000000c 	.word	0x2000000c
 8000e28:	200009f0 	.word	0x200009f0

08000e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e30:	4b02      	ldr	r3, [pc, #8]	@ (8000e3c <HAL_GetTick+0x10>)
 8000e32:	681b      	ldr	r3, [r3, #0]
}
 8000e34:	0018      	movs	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	46c0      	nop			@ (mov r8, r8)
 8000e3c:	200009f0 	.word	0x200009f0

08000e40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e48:	f7ff fff0 	bl	8000e2c <HAL_GetTick>
 8000e4c:	0003      	movs	r3, r0
 8000e4e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	3301      	adds	r3, #1
 8000e58:	d005      	beq.n	8000e66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e84 <HAL_Delay+0x44>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	001a      	movs	r2, r3
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	189b      	adds	r3, r3, r2
 8000e64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e66:	46c0      	nop			@ (mov r8, r8)
 8000e68:	f7ff ffe0 	bl	8000e2c <HAL_GetTick>
 8000e6c:	0002      	movs	r2, r0
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d8f7      	bhi.n	8000e68 <HAL_Delay+0x28>
  {
  }
}
 8000e78:	46c0      	nop			@ (mov r8, r8)
 8000e7a:	46c0      	nop			@ (mov r8, r8)
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	b004      	add	sp, #16
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	46c0      	nop			@ (mov r8, r8)
 8000e84:	2000000c 	.word	0x2000000c

08000e88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	0002      	movs	r2, r0
 8000e90:	1dfb      	adds	r3, r7, #7
 8000e92:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e94:	1dfb      	adds	r3, r7, #7
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e9a:	d809      	bhi.n	8000eb0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e9c:	1dfb      	adds	r3, r7, #7
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	001a      	movs	r2, r3
 8000ea2:	231f      	movs	r3, #31
 8000ea4:	401a      	ands	r2, r3
 8000ea6:	4b04      	ldr	r3, [pc, #16]	@ (8000eb8 <__NVIC_EnableIRQ+0x30>)
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	4091      	lsls	r1, r2
 8000eac:	000a      	movs	r2, r1
 8000eae:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000eb0:	46c0      	nop			@ (mov r8, r8)
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	b002      	add	sp, #8
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	e000e100 	.word	0xe000e100

08000ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ebc:	b590      	push	{r4, r7, lr}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	0002      	movs	r2, r0
 8000ec4:	6039      	str	r1, [r7, #0]
 8000ec6:	1dfb      	adds	r3, r7, #7
 8000ec8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000eca:	1dfb      	adds	r3, r7, #7
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ed0:	d828      	bhi.n	8000f24 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ed2:	4a2f      	ldr	r2, [pc, #188]	@ (8000f90 <__NVIC_SetPriority+0xd4>)
 8000ed4:	1dfb      	adds	r3, r7, #7
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	b25b      	sxtb	r3, r3
 8000eda:	089b      	lsrs	r3, r3, #2
 8000edc:	33c0      	adds	r3, #192	@ 0xc0
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	589b      	ldr	r3, [r3, r2]
 8000ee2:	1dfa      	adds	r2, r7, #7
 8000ee4:	7812      	ldrb	r2, [r2, #0]
 8000ee6:	0011      	movs	r1, r2
 8000ee8:	2203      	movs	r2, #3
 8000eea:	400a      	ands	r2, r1
 8000eec:	00d2      	lsls	r2, r2, #3
 8000eee:	21ff      	movs	r1, #255	@ 0xff
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	000a      	movs	r2, r1
 8000ef4:	43d2      	mvns	r2, r2
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	019b      	lsls	r3, r3, #6
 8000efe:	22ff      	movs	r2, #255	@ 0xff
 8000f00:	401a      	ands	r2, r3
 8000f02:	1dfb      	adds	r3, r7, #7
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	0018      	movs	r0, r3
 8000f08:	2303      	movs	r3, #3
 8000f0a:	4003      	ands	r3, r0
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f10:	481f      	ldr	r0, [pc, #124]	@ (8000f90 <__NVIC_SetPriority+0xd4>)
 8000f12:	1dfb      	adds	r3, r7, #7
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	b25b      	sxtb	r3, r3
 8000f18:	089b      	lsrs	r3, r3, #2
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	33c0      	adds	r3, #192	@ 0xc0
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f22:	e031      	b.n	8000f88 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f24:	4a1b      	ldr	r2, [pc, #108]	@ (8000f94 <__NVIC_SetPriority+0xd8>)
 8000f26:	1dfb      	adds	r3, r7, #7
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	0019      	movs	r1, r3
 8000f2c:	230f      	movs	r3, #15
 8000f2e:	400b      	ands	r3, r1
 8000f30:	3b08      	subs	r3, #8
 8000f32:	089b      	lsrs	r3, r3, #2
 8000f34:	3306      	adds	r3, #6
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	18d3      	adds	r3, r2, r3
 8000f3a:	3304      	adds	r3, #4
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	1dfa      	adds	r2, r7, #7
 8000f40:	7812      	ldrb	r2, [r2, #0]
 8000f42:	0011      	movs	r1, r2
 8000f44:	2203      	movs	r2, #3
 8000f46:	400a      	ands	r2, r1
 8000f48:	00d2      	lsls	r2, r2, #3
 8000f4a:	21ff      	movs	r1, #255	@ 0xff
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	000a      	movs	r2, r1
 8000f50:	43d2      	mvns	r2, r2
 8000f52:	401a      	ands	r2, r3
 8000f54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	019b      	lsls	r3, r3, #6
 8000f5a:	22ff      	movs	r2, #255	@ 0xff
 8000f5c:	401a      	ands	r2, r3
 8000f5e:	1dfb      	adds	r3, r7, #7
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	0018      	movs	r0, r3
 8000f64:	2303      	movs	r3, #3
 8000f66:	4003      	ands	r3, r0
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f6c:	4809      	ldr	r0, [pc, #36]	@ (8000f94 <__NVIC_SetPriority+0xd8>)
 8000f6e:	1dfb      	adds	r3, r7, #7
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	001c      	movs	r4, r3
 8000f74:	230f      	movs	r3, #15
 8000f76:	4023      	ands	r3, r4
 8000f78:	3b08      	subs	r3, #8
 8000f7a:	089b      	lsrs	r3, r3, #2
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	3306      	adds	r3, #6
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	18c3      	adds	r3, r0, r3
 8000f84:	3304      	adds	r3, #4
 8000f86:	601a      	str	r2, [r3, #0]
}
 8000f88:	46c0      	nop			@ (mov r8, r8)
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	b003      	add	sp, #12
 8000f8e:	bd90      	pop	{r4, r7, pc}
 8000f90:	e000e100 	.word	0xe000e100
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	1e5a      	subs	r2, r3, #1
 8000fa4:	2380      	movs	r3, #128	@ 0x80
 8000fa6:	045b      	lsls	r3, r3, #17
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d301      	bcc.n	8000fb0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fac:	2301      	movs	r3, #1
 8000fae:	e010      	b.n	8000fd2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000fdc <SysTick_Config+0x44>)
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	3a01      	subs	r2, #1
 8000fb6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb8:	2301      	movs	r3, #1
 8000fba:	425b      	negs	r3, r3
 8000fbc:	2103      	movs	r1, #3
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	f7ff ff7c 	bl	8000ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc4:	4b05      	ldr	r3, [pc, #20]	@ (8000fdc <SysTick_Config+0x44>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fca:	4b04      	ldr	r3, [pc, #16]	@ (8000fdc <SysTick_Config+0x44>)
 8000fcc:	2207      	movs	r2, #7
 8000fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	b002      	add	sp, #8
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	46c0      	nop			@ (mov r8, r8)
 8000fdc:	e000e010 	.word	0xe000e010

08000fe0 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	210f      	movs	r1, #15
 8000fec:	187b      	adds	r3, r7, r1
 8000fee:	1c02      	adds	r2, r0, #0
 8000ff0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	187b      	adds	r3, r7, r1
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	b25b      	sxtb	r3, r3
 8000ffa:	0011      	movs	r1, r2
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f7ff ff5d 	bl	8000ebc <__NVIC_SetPriority>
}
 8001002:	46c0      	nop			@ (mov r8, r8)
 8001004:	46bd      	mov	sp, r7
 8001006:	b004      	add	sp, #16
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
 8001010:	0002      	movs	r2, r0
 8001012:	1dfb      	adds	r3, r7, #7
 8001014:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001016:	1dfb      	adds	r3, r7, #7
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	b25b      	sxtb	r3, r3
 800101c:	0018      	movs	r0, r3
 800101e:	f7ff ff33 	bl	8000e88 <__NVIC_EnableIRQ>
}
 8001022:	46c0      	nop			@ (mov r8, r8)
 8001024:	46bd      	mov	sp, r7
 8001026:	b002      	add	sp, #8
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	0018      	movs	r0, r3
 8001036:	f7ff ffaf 	bl	8000f98 <SysTick_Config>
 800103a:	0003      	movs	r3, r0
}
 800103c:	0018      	movs	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	b002      	add	sp, #8
 8001042:	bd80      	pop	{r7, pc}

08001044 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d101      	bne.n	8001056 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e050      	b.n	80010f8 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2225      	movs	r2, #37	@ 0x25
 800105a:	5c9b      	ldrb	r3, [r3, r2]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b02      	cmp	r3, #2
 8001060:	d008      	beq.n	8001074 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2204      	movs	r2, #4
 8001066:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2224      	movs	r2, #36	@ 0x24
 800106c:	2100      	movs	r1, #0
 800106e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e041      	b.n	80010f8 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	210e      	movs	r1, #14
 8001080:	438a      	bics	r2, r1
 8001082:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800108e:	491c      	ldr	r1, [pc, #112]	@ (8001100 <HAL_DMA_Abort+0xbc>)
 8001090:	400a      	ands	r2, r1
 8001092:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2101      	movs	r1, #1
 80010a0:	438a      	bics	r2, r1
 80010a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 80010a4:	4b17      	ldr	r3, [pc, #92]	@ (8001104 <HAL_DMA_Abort+0xc0>)
 80010a6:	6859      	ldr	r1, [r3, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ac:	221c      	movs	r2, #28
 80010ae:	4013      	ands	r3, r2
 80010b0:	2201      	movs	r2, #1
 80010b2:	409a      	lsls	r2, r3
 80010b4:	4b13      	ldr	r3, [pc, #76]	@ (8001104 <HAL_DMA_Abort+0xc0>)
 80010b6:	430a      	orrs	r2, r1
 80010b8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80010c2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d00c      	beq.n	80010e6 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80010d6:	490a      	ldr	r1, [pc, #40]	@ (8001100 <HAL_DMA_Abort+0xbc>)
 80010d8:	400a      	ands	r2, r1
 80010da:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80010e4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2225      	movs	r2, #37	@ 0x25
 80010ea:	2101      	movs	r1, #1
 80010ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2224      	movs	r2, #36	@ 0x24
 80010f2:	2100      	movs	r1, #0
 80010f4:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	0018      	movs	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	b002      	add	sp, #8
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	fffffeff 	.word	0xfffffeff
 8001104:	40020000 	.word	0x40020000

08001108 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001110:	230f      	movs	r3, #15
 8001112:	18fb      	adds	r3, r7, r3
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2224      	movs	r2, #36	@ 0x24
 800111c:	2100      	movs	r1, #0
 800111e:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2224      	movs	r2, #36	@ 0x24
 8001124:	5c9b      	ldrb	r3, [r3, r2]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d101      	bne.n	800112e <HAL_DMA_Abort_IT+0x26>
 800112a:	2302      	movs	r3, #2
 800112c:	e05e      	b.n	80011ec <HAL_DMA_Abort_IT+0xe4>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2224      	movs	r2, #36	@ 0x24
 8001132:	2101      	movs	r1, #1
 8001134:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2225      	movs	r2, #37	@ 0x25
 800113a:	5c9b      	ldrb	r3, [r3, r2]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b02      	cmp	r3, #2
 8001140:	d007      	beq.n	8001152 <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2204      	movs	r2, #4
 8001146:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001148:	230f      	movs	r3, #15
 800114a:	18fb      	adds	r3, r7, r3
 800114c:	2201      	movs	r2, #1
 800114e:	701a      	strb	r2, [r3, #0]
 8001150:	e049      	b.n	80011e6 <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	210e      	movs	r1, #14
 800115e:	438a      	bics	r2, r1
 8001160:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2101      	movs	r1, #1
 800116e:	438a      	bics	r2, r1
 8001170:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800117c:	491d      	ldr	r1, [pc, #116]	@ (80011f4 <HAL_DMA_Abort_IT+0xec>)
 800117e:	400a      	ands	r2, r1
 8001180:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8001182:	4b1d      	ldr	r3, [pc, #116]	@ (80011f8 <HAL_DMA_Abort_IT+0xf0>)
 8001184:	6859      	ldr	r1, [r3, #4]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118a:	221c      	movs	r2, #28
 800118c:	4013      	ands	r3, r2
 800118e:	2201      	movs	r2, #1
 8001190:	409a      	lsls	r2, r3
 8001192:	4b19      	ldr	r3, [pc, #100]	@ (80011f8 <HAL_DMA_Abort_IT+0xf0>)
 8001194:	430a      	orrs	r2, r1
 8001196:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80011a0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d00c      	beq.n	80011c4 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80011b4:	490f      	ldr	r1, [pc, #60]	@ (80011f4 <HAL_DMA_Abort_IT+0xec>)
 80011b6:	400a      	ands	r2, r1
 80011b8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80011c2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2225      	movs	r2, #37	@ 0x25
 80011c8:	2101      	movs	r1, #1
 80011ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2224      	movs	r2, #36	@ 0x24
 80011d0:	2100      	movs	r1, #0
 80011d2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d004      	beq.n	80011e6 <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	0010      	movs	r0, r2
 80011e4:	4798      	blx	r3
    }
  }
  return status;
 80011e6:	230f      	movs	r3, #15
 80011e8:	18fb      	adds	r3, r7, r3
 80011ea:	781b      	ldrb	r3, [r3, #0]
}
 80011ec:	0018      	movs	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	b004      	add	sp, #16
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	fffffeff 	.word	0xfffffeff
 80011f8:	40020000 	.word	0x40020000

080011fc <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800120a:	e153      	b.n	80014b4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2101      	movs	r1, #1
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4091      	lsls	r1, r2
 8001216:	000a      	movs	r2, r1
 8001218:	4013      	ands	r3, r2
 800121a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d100      	bne.n	8001224 <HAL_GPIO_Init+0x28>
 8001222:	e144      	b.n	80014ae <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	2b02      	cmp	r3, #2
 800122a:	d003      	beq.n	8001234 <HAL_GPIO_Init+0x38>
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	2b12      	cmp	r3, #18
 8001232:	d125      	bne.n	8001280 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	08da      	lsrs	r2, r3, #3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3208      	adds	r2, #8
 800123c:	0092      	lsls	r2, r2, #2
 800123e:	58d3      	ldr	r3, [r2, r3]
 8001240:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	2207      	movs	r2, #7
 8001246:	4013      	ands	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	220f      	movs	r2, #15
 800124c:	409a      	lsls	r2, r3
 800124e:	0013      	movs	r3, r2
 8001250:	43da      	mvns	r2, r3
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	4013      	ands	r3, r2
 8001256:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	691b      	ldr	r3, [r3, #16]
 800125c:	220f      	movs	r2, #15
 800125e:	401a      	ands	r2, r3
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	2107      	movs	r1, #7
 8001264:	400b      	ands	r3, r1
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	409a      	lsls	r2, r3
 800126a:	0013      	movs	r3, r2
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	4313      	orrs	r3, r2
 8001270:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	08da      	lsrs	r2, r3, #3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3208      	adds	r2, #8
 800127a:	0092      	lsls	r2, r2, #2
 800127c:	6979      	ldr	r1, [r7, #20]
 800127e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	2203      	movs	r2, #3
 800128c:	409a      	lsls	r2, r3
 800128e:	0013      	movs	r3, r2
 8001290:	43da      	mvns	r2, r3
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	4013      	ands	r3, r2
 8001296:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	2203      	movs	r2, #3
 800129e:	401a      	ands	r2, r3
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	409a      	lsls	r2, r3
 80012a6:	0013      	movs	r3, r2
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	697a      	ldr	r2, [r7, #20]
 80012b2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d00b      	beq.n	80012d4 <HAL_GPIO_Init+0xd8>
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d007      	beq.n	80012d4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012c8:	2b11      	cmp	r3, #17
 80012ca:	d003      	beq.n	80012d4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	2b12      	cmp	r3, #18
 80012d2:	d130      	bne.n	8001336 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	2203      	movs	r2, #3
 80012e0:	409a      	lsls	r2, r3
 80012e2:	0013      	movs	r3, r2
 80012e4:	43da      	mvns	r2, r3
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	4013      	ands	r3, r2
 80012ea:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	68da      	ldr	r2, [r3, #12]
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	409a      	lsls	r2, r3
 80012f6:	0013      	movs	r3, r2
 80012f8:	697a      	ldr	r2, [r7, #20]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	697a      	ldr	r2, [r7, #20]
 8001302:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800130a:	2201      	movs	r2, #1
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	409a      	lsls	r2, r3
 8001310:	0013      	movs	r3, r2
 8001312:	43da      	mvns	r2, r3
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	4013      	ands	r3, r2
 8001318:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	091b      	lsrs	r3, r3, #4
 8001320:	2201      	movs	r2, #1
 8001322:	401a      	ands	r2, r3
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	409a      	lsls	r2, r3
 8001328:	0013      	movs	r3, r2
 800132a:	697a      	ldr	r2, [r7, #20]
 800132c:	4313      	orrs	r3, r2
 800132e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b03      	cmp	r3, #3
 800133c:	d017      	beq.n	800136e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	2203      	movs	r2, #3
 800134a:	409a      	lsls	r2, r3
 800134c:	0013      	movs	r3, r2
 800134e:	43da      	mvns	r2, r3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	4013      	ands	r3, r2
 8001354:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	689a      	ldr	r2, [r3, #8]
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	409a      	lsls	r2, r3
 8001360:	0013      	movs	r3, r2
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	4313      	orrs	r3, r2
 8001366:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	697a      	ldr	r2, [r7, #20]
 800136c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	2380      	movs	r3, #128	@ 0x80
 8001374:	055b      	lsls	r3, r3, #21
 8001376:	4013      	ands	r3, r2
 8001378:	d100      	bne.n	800137c <HAL_GPIO_Init+0x180>
 800137a:	e098      	b.n	80014ae <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800137c:	4a53      	ldr	r2, [pc, #332]	@ (80014cc <HAL_GPIO_Init+0x2d0>)
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	089b      	lsrs	r3, r3, #2
 8001382:	3318      	adds	r3, #24
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	589b      	ldr	r3, [r3, r2]
 8001388:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	2203      	movs	r2, #3
 800138e:	4013      	ands	r3, r2
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	220f      	movs	r2, #15
 8001394:	409a      	lsls	r2, r3
 8001396:	0013      	movs	r3, r2
 8001398:	43da      	mvns	r2, r3
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	4013      	ands	r3, r2
 800139e:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	23a0      	movs	r3, #160	@ 0xa0
 80013a4:	05db      	lsls	r3, r3, #23
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d019      	beq.n	80013de <HAL_GPIO_Init+0x1e2>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a48      	ldr	r2, [pc, #288]	@ (80014d0 <HAL_GPIO_Init+0x2d4>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d013      	beq.n	80013da <HAL_GPIO_Init+0x1de>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a47      	ldr	r2, [pc, #284]	@ (80014d4 <HAL_GPIO_Init+0x2d8>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d00d      	beq.n	80013d6 <HAL_GPIO_Init+0x1da>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a46      	ldr	r2, [pc, #280]	@ (80014d8 <HAL_GPIO_Init+0x2dc>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d007      	beq.n	80013d2 <HAL_GPIO_Init+0x1d6>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a45      	ldr	r2, [pc, #276]	@ (80014dc <HAL_GPIO_Init+0x2e0>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d101      	bne.n	80013ce <HAL_GPIO_Init+0x1d2>
 80013ca:	2305      	movs	r3, #5
 80013cc:	e008      	b.n	80013e0 <HAL_GPIO_Init+0x1e4>
 80013ce:	2306      	movs	r3, #6
 80013d0:	e006      	b.n	80013e0 <HAL_GPIO_Init+0x1e4>
 80013d2:	2303      	movs	r3, #3
 80013d4:	e004      	b.n	80013e0 <HAL_GPIO_Init+0x1e4>
 80013d6:	2302      	movs	r3, #2
 80013d8:	e002      	b.n	80013e0 <HAL_GPIO_Init+0x1e4>
 80013da:	2301      	movs	r3, #1
 80013dc:	e000      	b.n	80013e0 <HAL_GPIO_Init+0x1e4>
 80013de:	2300      	movs	r3, #0
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	2103      	movs	r1, #3
 80013e4:	400a      	ands	r2, r1
 80013e6:	00d2      	lsls	r2, r2, #3
 80013e8:	4093      	lsls	r3, r2
 80013ea:	697a      	ldr	r2, [r7, #20]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80013f0:	4936      	ldr	r1, [pc, #216]	@ (80014cc <HAL_GPIO_Init+0x2d0>)
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	089b      	lsrs	r3, r3, #2
 80013f6:	3318      	adds	r3, #24
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	697a      	ldr	r2, [r7, #20]
 80013fc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80013fe:	4a33      	ldr	r2, [pc, #204]	@ (80014cc <HAL_GPIO_Init+0x2d0>)
 8001400:	2380      	movs	r3, #128	@ 0x80
 8001402:	58d3      	ldr	r3, [r2, r3]
 8001404:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	43da      	mvns	r2, r3
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	4013      	ands	r3, r2
 800140e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685a      	ldr	r2, [r3, #4]
 8001414:	2380      	movs	r3, #128	@ 0x80
 8001416:	025b      	lsls	r3, r3, #9
 8001418:	4013      	ands	r3, r2
 800141a:	d003      	beq.n	8001424 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 800141c:	697a      	ldr	r2, [r7, #20]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	4313      	orrs	r3, r2
 8001422:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001424:	4929      	ldr	r1, [pc, #164]	@ (80014cc <HAL_GPIO_Init+0x2d0>)
 8001426:	2280      	movs	r2, #128	@ 0x80
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 800142c:	4a27      	ldr	r2, [pc, #156]	@ (80014cc <HAL_GPIO_Init+0x2d0>)
 800142e:	2384      	movs	r3, #132	@ 0x84
 8001430:	58d3      	ldr	r3, [r2, r3]
 8001432:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	43da      	mvns	r2, r3
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	4013      	ands	r3, r2
 800143c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	2380      	movs	r3, #128	@ 0x80
 8001444:	029b      	lsls	r3, r3, #10
 8001446:	4013      	ands	r3, r2
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 800144a:	697a      	ldr	r2, [r7, #20]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4313      	orrs	r3, r2
 8001450:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001452:	491e      	ldr	r1, [pc, #120]	@ (80014cc <HAL_GPIO_Init+0x2d0>)
 8001454:	2284      	movs	r2, #132	@ 0x84
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800145a:	4b1c      	ldr	r3, [pc, #112]	@ (80014cc <HAL_GPIO_Init+0x2d0>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	43da      	mvns	r2, r3
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	4013      	ands	r3, r2
 8001468:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	2380      	movs	r3, #128	@ 0x80
 8001470:	035b      	lsls	r3, r3, #13
 8001472:	4013      	ands	r3, r2
 8001474:	d003      	beq.n	800147e <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4313      	orrs	r3, r2
 800147c:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800147e:	4b13      	ldr	r3, [pc, #76]	@ (80014cc <HAL_GPIO_Init+0x2d0>)
 8001480:	697a      	ldr	r2, [r7, #20]
 8001482:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001484:	4b11      	ldr	r3, [pc, #68]	@ (80014cc <HAL_GPIO_Init+0x2d0>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	43da      	mvns	r2, r3
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	4013      	ands	r3, r2
 8001492:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685a      	ldr	r2, [r3, #4]
 8001498:	2380      	movs	r3, #128	@ 0x80
 800149a:	039b      	lsls	r3, r3, #14
 800149c:	4013      	ands	r3, r2
 800149e:	d003      	beq.n	80014a8 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 80014a0:	697a      	ldr	r2, [r7, #20]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80014a8:	4b08      	ldr	r3, [pc, #32]	@ (80014cc <HAL_GPIO_Init+0x2d0>)
 80014aa:	697a      	ldr	r2, [r7, #20]
 80014ac:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	3301      	adds	r3, #1
 80014b2:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	40da      	lsrs	r2, r3
 80014bc:	1e13      	subs	r3, r2, #0
 80014be:	d000      	beq.n	80014c2 <HAL_GPIO_Init+0x2c6>
 80014c0:	e6a4      	b.n	800120c <HAL_GPIO_Init+0x10>
  }
}
 80014c2:	46c0      	nop			@ (mov r8, r8)
 80014c4:	46c0      	nop			@ (mov r8, r8)
 80014c6:	46bd      	mov	sp, r7
 80014c8:	b006      	add	sp, #24
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40021800 	.word	0x40021800
 80014d0:	50000400 	.word	0x50000400
 80014d4:	50000800 	.word	0x50000800
 80014d8:	50000c00 	.word	0x50000c00
 80014dc:	50001400 	.word	0x50001400

080014e0 <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e20f      	b.n	8001912 <HAL_RCC_OscConfig+0x432>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2201      	movs	r2, #1
 80014f8:	4013      	ands	r3, r2
 80014fa:	d100      	bne.n	80014fe <HAL_RCC_OscConfig+0x1e>
 80014fc:	e069      	b.n	80015d2 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014fe:	4bc8      	ldr	r3, [pc, #800]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	2238      	movs	r2, #56	@ 0x38
 8001504:	4013      	ands	r3, r2
 8001506:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	2b08      	cmp	r3, #8
 800150c:	d105      	bne.n	800151a <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d15d      	bne.n	80015d2 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e1fb      	b.n	8001912 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	025b      	lsls	r3, r3, #9
 8001522:	429a      	cmp	r2, r3
 8001524:	d107      	bne.n	8001536 <HAL_RCC_OscConfig+0x56>
 8001526:	4bbe      	ldr	r3, [pc, #760]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	4bbd      	ldr	r3, [pc, #756]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 800152c:	2180      	movs	r1, #128	@ 0x80
 800152e:	0249      	lsls	r1, r1, #9
 8001530:	430a      	orrs	r2, r1
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	e020      	b.n	8001578 <HAL_RCC_OscConfig+0x98>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685a      	ldr	r2, [r3, #4]
 800153a:	23a0      	movs	r3, #160	@ 0xa0
 800153c:	02db      	lsls	r3, r3, #11
 800153e:	429a      	cmp	r2, r3
 8001540:	d10e      	bne.n	8001560 <HAL_RCC_OscConfig+0x80>
 8001542:	4bb7      	ldr	r3, [pc, #732]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	4bb6      	ldr	r3, [pc, #728]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 8001548:	2180      	movs	r1, #128	@ 0x80
 800154a:	02c9      	lsls	r1, r1, #11
 800154c:	430a      	orrs	r2, r1
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	4bb3      	ldr	r3, [pc, #716]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4bb2      	ldr	r3, [pc, #712]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 8001556:	2180      	movs	r1, #128	@ 0x80
 8001558:	0249      	lsls	r1, r1, #9
 800155a:	430a      	orrs	r2, r1
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	e00b      	b.n	8001578 <HAL_RCC_OscConfig+0x98>
 8001560:	4baf      	ldr	r3, [pc, #700]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4bae      	ldr	r3, [pc, #696]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 8001566:	49af      	ldr	r1, [pc, #700]	@ (8001824 <HAL_RCC_OscConfig+0x344>)
 8001568:	400a      	ands	r2, r1
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	4bac      	ldr	r3, [pc, #688]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4bab      	ldr	r3, [pc, #684]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 8001572:	49ad      	ldr	r1, [pc, #692]	@ (8001828 <HAL_RCC_OscConfig+0x348>)
 8001574:	400a      	ands	r2, r1
 8001576:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d014      	beq.n	80015aa <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001580:	f7ff fc54 	bl	8000e2c <HAL_GetTick>
 8001584:	0003      	movs	r3, r0
 8001586:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800158a:	f7ff fc4f 	bl	8000e2c <HAL_GetTick>
 800158e:	0002      	movs	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b64      	cmp	r3, #100	@ 0x64
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e1ba      	b.n	8001912 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800159c:	4ba0      	ldr	r3, [pc, #640]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	2380      	movs	r3, #128	@ 0x80
 80015a2:	029b      	lsls	r3, r3, #10
 80015a4:	4013      	ands	r3, r2
 80015a6:	d0f0      	beq.n	800158a <HAL_RCC_OscConfig+0xaa>
 80015a8:	e013      	b.n	80015d2 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015aa:	f7ff fc3f 	bl	8000e2c <HAL_GetTick>
 80015ae:	0003      	movs	r3, r0
 80015b0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80015b4:	f7ff fc3a 	bl	8000e2c <HAL_GetTick>
 80015b8:	0002      	movs	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b64      	cmp	r3, #100	@ 0x64
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e1a5      	b.n	8001912 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015c6:	4b96      	ldr	r3, [pc, #600]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	2380      	movs	r3, #128	@ 0x80
 80015cc:	029b      	lsls	r3, r3, #10
 80015ce:	4013      	ands	r3, r2
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2202      	movs	r2, #2
 80015d8:	4013      	ands	r3, r2
 80015da:	d100      	bne.n	80015de <HAL_RCC_OscConfig+0xfe>
 80015dc:	e086      	b.n	80016ec <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015de:	4b90      	ldr	r3, [pc, #576]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	2238      	movs	r2, #56	@ 0x38
 80015e4:	4013      	ands	r3, r2
 80015e6:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d12f      	bne.n	800164e <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e18b      	b.n	8001912 <HAL_RCC_OscConfig+0x432>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015fa:	4b89      	ldr	r3, [pc, #548]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	4a8b      	ldr	r2, [pc, #556]	@ (800182c <HAL_RCC_OscConfig+0x34c>)
 8001600:	4013      	ands	r3, r2
 8001602:	0019      	movs	r1, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	695b      	ldr	r3, [r3, #20]
 8001608:	021a      	lsls	r2, r3, #8
 800160a:	4b85      	ldr	r3, [pc, #532]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 800160c:	430a      	orrs	r2, r1
 800160e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d112      	bne.n	800163c <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001616:	4b82      	ldr	r3, [pc, #520]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a85      	ldr	r2, [pc, #532]	@ (8001830 <HAL_RCC_OscConfig+0x350>)
 800161c:	4013      	ands	r3, r2
 800161e:	0019      	movs	r1, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	691a      	ldr	r2, [r3, #16]
 8001624:	4b7e      	ldr	r3, [pc, #504]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 8001626:	430a      	orrs	r2, r1
 8001628:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800162a:	4b7d      	ldr	r3, [pc, #500]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	0adb      	lsrs	r3, r3, #11
 8001630:	2207      	movs	r2, #7
 8001632:	4013      	ands	r3, r2
 8001634:	4a7f      	ldr	r2, [pc, #508]	@ (8001834 <HAL_RCC_OscConfig+0x354>)
 8001636:	40da      	lsrs	r2, r3
 8001638:	4b7f      	ldr	r3, [pc, #508]	@ (8001838 <HAL_RCC_OscConfig+0x358>)
 800163a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800163c:	4b7f      	ldr	r3, [pc, #508]	@ (800183c <HAL_RCC_OscConfig+0x35c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	0018      	movs	r0, r3
 8001642:	f7ff fb97 	bl	8000d74 <HAL_InitTick>
 8001646:	1e03      	subs	r3, r0, #0
 8001648:	d050      	beq.n	80016ec <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e161      	b.n	8001912 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d030      	beq.n	80016b8 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001656:	4b72      	ldr	r3, [pc, #456]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a75      	ldr	r2, [pc, #468]	@ (8001830 <HAL_RCC_OscConfig+0x350>)
 800165c:	4013      	ands	r3, r2
 800165e:	0019      	movs	r1, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	691a      	ldr	r2, [r3, #16]
 8001664:	4b6e      	ldr	r3, [pc, #440]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 8001666:	430a      	orrs	r2, r1
 8001668:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800166a:	4b6d      	ldr	r3, [pc, #436]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	4b6c      	ldr	r3, [pc, #432]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 8001670:	2180      	movs	r1, #128	@ 0x80
 8001672:	0049      	lsls	r1, r1, #1
 8001674:	430a      	orrs	r2, r1
 8001676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001678:	f7ff fbd8 	bl	8000e2c <HAL_GetTick>
 800167c:	0003      	movs	r3, r0
 800167e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001680:	e008      	b.n	8001694 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001682:	f7ff fbd3 	bl	8000e2c <HAL_GetTick>
 8001686:	0002      	movs	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e13e      	b.n	8001912 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001694:	4b62      	ldr	r3, [pc, #392]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	2380      	movs	r3, #128	@ 0x80
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	4013      	ands	r3, r2
 800169e:	d0f0      	beq.n	8001682 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a0:	4b5f      	ldr	r3, [pc, #380]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	4a61      	ldr	r2, [pc, #388]	@ (800182c <HAL_RCC_OscConfig+0x34c>)
 80016a6:	4013      	ands	r3, r2
 80016a8:	0019      	movs	r1, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	021a      	lsls	r2, r3, #8
 80016b0:	4b5b      	ldr	r3, [pc, #364]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 80016b2:	430a      	orrs	r2, r1
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	e019      	b.n	80016ec <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80016b8:	4b59      	ldr	r3, [pc, #356]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b58      	ldr	r3, [pc, #352]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 80016be:	4960      	ldr	r1, [pc, #384]	@ (8001840 <HAL_RCC_OscConfig+0x360>)
 80016c0:	400a      	ands	r2, r1
 80016c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c4:	f7ff fbb2 	bl	8000e2c <HAL_GetTick>
 80016c8:	0003      	movs	r3, r0
 80016ca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80016ce:	f7ff fbad 	bl	8000e2c <HAL_GetTick>
 80016d2:	0002      	movs	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e118      	b.n	8001912 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016e0:	4b4f      	ldr	r3, [pc, #316]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	2380      	movs	r3, #128	@ 0x80
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	4013      	ands	r3, r2
 80016ea:	d1f0      	bne.n	80016ce <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2208      	movs	r2, #8
 80016f2:	4013      	ands	r3, r2
 80016f4:	d042      	beq.n	800177c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80016f6:	4b4a      	ldr	r3, [pc, #296]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	2238      	movs	r2, #56	@ 0x38
 80016fc:	4013      	ands	r3, r2
 80016fe:	2b18      	cmp	r3, #24
 8001700:	d105      	bne.n	800170e <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d138      	bne.n	800177c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e101      	b.n	8001912 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d019      	beq.n	800174a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001716:	4b42      	ldr	r3, [pc, #264]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 8001718:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800171a:	4b41      	ldr	r3, [pc, #260]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 800171c:	2101      	movs	r1, #1
 800171e:	430a      	orrs	r2, r1
 8001720:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001722:	f7ff fb83 	bl	8000e2c <HAL_GetTick>
 8001726:	0003      	movs	r3, r0
 8001728:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800172c:	f7ff fb7e 	bl	8000e2c <HAL_GetTick>
 8001730:	0002      	movs	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e0e9      	b.n	8001912 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800173e:	4b38      	ldr	r3, [pc, #224]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 8001740:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001742:	2202      	movs	r2, #2
 8001744:	4013      	ands	r3, r2
 8001746:	d0f1      	beq.n	800172c <HAL_RCC_OscConfig+0x24c>
 8001748:	e018      	b.n	800177c <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800174a:	4b35      	ldr	r3, [pc, #212]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 800174c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800174e:	4b34      	ldr	r3, [pc, #208]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 8001750:	2101      	movs	r1, #1
 8001752:	438a      	bics	r2, r1
 8001754:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001756:	f7ff fb69 	bl	8000e2c <HAL_GetTick>
 800175a:	0003      	movs	r3, r0
 800175c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001760:	f7ff fb64 	bl	8000e2c <HAL_GetTick>
 8001764:	0002      	movs	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e0cf      	b.n	8001912 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001772:	4b2b      	ldr	r3, [pc, #172]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 8001774:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001776:	2202      	movs	r2, #2
 8001778:	4013      	ands	r3, r2
 800177a:	d1f1      	bne.n	8001760 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2204      	movs	r2, #4
 8001782:	4013      	ands	r3, r2
 8001784:	d100      	bne.n	8001788 <HAL_RCC_OscConfig+0x2a8>
 8001786:	e084      	b.n	8001892 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001788:	230f      	movs	r3, #15
 800178a:	18fb      	adds	r3, r7, r3
 800178c:	2200      	movs	r2, #0
 800178e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001790:	4b23      	ldr	r3, [pc, #140]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	2238      	movs	r2, #56	@ 0x38
 8001796:	4013      	ands	r3, r2
 8001798:	2b20      	cmp	r3, #32
 800179a:	d106      	bne.n	80017aa <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d000      	beq.n	80017a6 <HAL_RCC_OscConfig+0x2c6>
 80017a4:	e075      	b.n	8001892 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e0b3      	b.n	8001912 <HAL_RCC_OscConfig+0x432>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d106      	bne.n	80017c0 <HAL_RCC_OscConfig+0x2e0>
 80017b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 80017b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80017b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 80017b8:	2101      	movs	r1, #1
 80017ba:	430a      	orrs	r2, r1
 80017bc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80017be:	e01c      	b.n	80017fa <HAL_RCC_OscConfig+0x31a>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	2b05      	cmp	r3, #5
 80017c6:	d10c      	bne.n	80017e2 <HAL_RCC_OscConfig+0x302>
 80017c8:	4b15      	ldr	r3, [pc, #84]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 80017ca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80017cc:	4b14      	ldr	r3, [pc, #80]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 80017ce:	2104      	movs	r1, #4
 80017d0:	430a      	orrs	r2, r1
 80017d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80017d4:	4b12      	ldr	r3, [pc, #72]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 80017d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80017d8:	4b11      	ldr	r3, [pc, #68]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 80017da:	2101      	movs	r1, #1
 80017dc:	430a      	orrs	r2, r1
 80017de:	65da      	str	r2, [r3, #92]	@ 0x5c
 80017e0:	e00b      	b.n	80017fa <HAL_RCC_OscConfig+0x31a>
 80017e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 80017e4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80017e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 80017e8:	2101      	movs	r1, #1
 80017ea:	438a      	bics	r2, r1
 80017ec:	65da      	str	r2, [r3, #92]	@ 0x5c
 80017ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 80017f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80017f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001820 <HAL_RCC_OscConfig+0x340>)
 80017f4:	2104      	movs	r1, #4
 80017f6:	438a      	bics	r2, r1
 80017f8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d028      	beq.n	8001854 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001802:	f7ff fb13 	bl	8000e2c <HAL_GetTick>
 8001806:	0003      	movs	r3, r0
 8001808:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800180a:	e01d      	b.n	8001848 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800180c:	f7ff fb0e 	bl	8000e2c <HAL_GetTick>
 8001810:	0002      	movs	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	4a0b      	ldr	r2, [pc, #44]	@ (8001844 <HAL_RCC_OscConfig+0x364>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d915      	bls.n	8001848 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e078      	b.n	8001912 <HAL_RCC_OscConfig+0x432>
 8001820:	40021000 	.word	0x40021000
 8001824:	fffeffff 	.word	0xfffeffff
 8001828:	fffbffff 	.word	0xfffbffff
 800182c:	ffff80ff 	.word	0xffff80ff
 8001830:	ffffc7ff 	.word	0xffffc7ff
 8001834:	02dc6c00 	.word	0x02dc6c00
 8001838:	20000004 	.word	0x20000004
 800183c:	20000008 	.word	0x20000008
 8001840:	fffffeff 	.word	0xfffffeff
 8001844:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001848:	4b34      	ldr	r3, [pc, #208]	@ (800191c <HAL_RCC_OscConfig+0x43c>)
 800184a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800184c:	2202      	movs	r2, #2
 800184e:	4013      	ands	r3, r2
 8001850:	d0dc      	beq.n	800180c <HAL_RCC_OscConfig+0x32c>
 8001852:	e013      	b.n	800187c <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001854:	f7ff faea 	bl	8000e2c <HAL_GetTick>
 8001858:	0003      	movs	r3, r0
 800185a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800185c:	e009      	b.n	8001872 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800185e:	f7ff fae5 	bl	8000e2c <HAL_GetTick>
 8001862:	0002      	movs	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	4a2d      	ldr	r2, [pc, #180]	@ (8001920 <HAL_RCC_OscConfig+0x440>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e04f      	b.n	8001912 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001872:	4b2a      	ldr	r3, [pc, #168]	@ (800191c <HAL_RCC_OscConfig+0x43c>)
 8001874:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001876:	2202      	movs	r2, #2
 8001878:	4013      	ands	r3, r2
 800187a:	d1f0      	bne.n	800185e <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800187c:	230f      	movs	r3, #15
 800187e:	18fb      	adds	r3, r7, r3
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d105      	bne.n	8001892 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001886:	4b25      	ldr	r3, [pc, #148]	@ (800191c <HAL_RCC_OscConfig+0x43c>)
 8001888:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800188a:	4b24      	ldr	r3, [pc, #144]	@ (800191c <HAL_RCC_OscConfig+0x43c>)
 800188c:	4925      	ldr	r1, [pc, #148]	@ (8001924 <HAL_RCC_OscConfig+0x444>)
 800188e:	400a      	ands	r2, r1
 8001890:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_CR_HSIUSB48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2210      	movs	r2, #16
 8001898:	4013      	ands	r3, r2
 800189a:	d039      	beq.n	8001910 <HAL_RCC_OscConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69db      	ldr	r3, [r3, #28]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d01b      	beq.n	80018dc <HAL_RCC_OscConfig+0x3fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018a4:	4b1d      	ldr	r3, [pc, #116]	@ (800191c <HAL_RCC_OscConfig+0x43c>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b1c      	ldr	r3, [pc, #112]	@ (800191c <HAL_RCC_OscConfig+0x43c>)
 80018aa:	2180      	movs	r1, #128	@ 0x80
 80018ac:	03c9      	lsls	r1, r1, #15
 80018ae:	430a      	orrs	r2, r1
 80018b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b2:	f7ff fabb 	bl	8000e2c <HAL_GetTick>
 80018b6:	0003      	movs	r3, r0
 80018b8:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018bc:	f7ff fab6 	bl	8000e2c <HAL_GetTick>
 80018c0:	0002      	movs	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e021      	b.n	8001912 <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 80018ce:	4b13      	ldr	r3, [pc, #76]	@ (800191c <HAL_RCC_OscConfig+0x43c>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	2380      	movs	r3, #128	@ 0x80
 80018d4:	041b      	lsls	r3, r3, #16
 80018d6:	4013      	ands	r3, r2
 80018d8:	d0f0      	beq.n	80018bc <HAL_RCC_OscConfig+0x3dc>
 80018da:	e019      	b.n	8001910 <HAL_RCC_OscConfig+0x430>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018dc:	4b0f      	ldr	r3, [pc, #60]	@ (800191c <HAL_RCC_OscConfig+0x43c>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4b0e      	ldr	r3, [pc, #56]	@ (800191c <HAL_RCC_OscConfig+0x43c>)
 80018e2:	4911      	ldr	r1, [pc, #68]	@ (8001928 <HAL_RCC_OscConfig+0x448>)
 80018e4:	400a      	ands	r2, r1
 80018e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e8:	f7ff faa0 	bl	8000e2c <HAL_GetTick>
 80018ec:	0003      	movs	r3, r0
 80018ee:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x424>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018f2:	f7ff fa9b 	bl	8000e2c <HAL_GetTick>
 80018f6:	0002      	movs	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e006      	b.n	8001912 <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8001904:	4b05      	ldr	r3, [pc, #20]	@ (800191c <HAL_RCC_OscConfig+0x43c>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	2380      	movs	r3, #128	@ 0x80
 800190a:	041b      	lsls	r3, r3, #16
 800190c:	4013      	ands	r3, r2
 800190e:	d1f0      	bne.n	80018f2 <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	0018      	movs	r0, r3
 8001914:	46bd      	mov	sp, r7
 8001916:	b006      	add	sp, #24
 8001918:	bd80      	pop	{r7, pc}
 800191a:	46c0      	nop			@ (mov r8, r8)
 800191c:	40021000 	.word	0x40021000
 8001920:	00001388 	.word	0x00001388
 8001924:	efffffff 	.word	0xefffffff
 8001928:	ffbfffff 	.word	0xffbfffff

0800192c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e0f6      	b.n	8001b2e <HAL_RCC_ClockConfig+0x202>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001940:	4b7d      	ldr	r3, [pc, #500]	@ (8001b38 <HAL_RCC_ClockConfig+0x20c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2207      	movs	r2, #7
 8001946:	4013      	ands	r3, r2
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	429a      	cmp	r2, r3
 800194c:	d91e      	bls.n	800198c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194e:	4b7a      	ldr	r3, [pc, #488]	@ (8001b38 <HAL_RCC_ClockConfig+0x20c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2207      	movs	r2, #7
 8001954:	4393      	bics	r3, r2
 8001956:	0019      	movs	r1, r3
 8001958:	4b77      	ldr	r3, [pc, #476]	@ (8001b38 <HAL_RCC_ClockConfig+0x20c>)
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	430a      	orrs	r2, r1
 800195e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001960:	f7ff fa64 	bl	8000e2c <HAL_GetTick>
 8001964:	0003      	movs	r3, r0
 8001966:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001968:	e009      	b.n	800197e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800196a:	f7ff fa5f 	bl	8000e2c <HAL_GetTick>
 800196e:	0002      	movs	r2, r0
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	4a71      	ldr	r2, [pc, #452]	@ (8001b3c <HAL_RCC_ClockConfig+0x210>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d901      	bls.n	800197e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e0d7      	b.n	8001b2e <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800197e:	4b6e      	ldr	r3, [pc, #440]	@ (8001b38 <HAL_RCC_ClockConfig+0x20c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2207      	movs	r2, #7
 8001984:	4013      	ands	r3, r2
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	429a      	cmp	r2, r3
 800198a:	d1ee      	bne.n	800196a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2202      	movs	r2, #2
 8001992:	4013      	ands	r3, r2
 8001994:	d017      	beq.n	80019c6 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2204      	movs	r2, #4
 800199c:	4013      	ands	r3, r2
 800199e:	d008      	beq.n	80019b2 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80019a0:	4b67      	ldr	r3, [pc, #412]	@ (8001b40 <HAL_RCC_ClockConfig+0x214>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	4a67      	ldr	r2, [pc, #412]	@ (8001b44 <HAL_RCC_ClockConfig+0x218>)
 80019a6:	401a      	ands	r2, r3
 80019a8:	4b65      	ldr	r3, [pc, #404]	@ (8001b40 <HAL_RCC_ClockConfig+0x214>)
 80019aa:	21b0      	movs	r1, #176	@ 0xb0
 80019ac:	0109      	lsls	r1, r1, #4
 80019ae:	430a      	orrs	r2, r1
 80019b0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019b2:	4b63      	ldr	r3, [pc, #396]	@ (8001b40 <HAL_RCC_ClockConfig+0x214>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	4a64      	ldr	r2, [pc, #400]	@ (8001b48 <HAL_RCC_ClockConfig+0x21c>)
 80019b8:	4013      	ands	r3, r2
 80019ba:	0019      	movs	r1, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	68da      	ldr	r2, [r3, #12]
 80019c0:	4b5f      	ldr	r3, [pc, #380]	@ (8001b40 <HAL_RCC_ClockConfig+0x214>)
 80019c2:	430a      	orrs	r2, r1
 80019c4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2201      	movs	r2, #1
 80019cc:	4013      	ands	r3, r2
 80019ce:	d100      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xa6>
 80019d0:	e061      	b.n	8001a96 <HAL_RCC_ClockConfig+0x16a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80019d2:	4b5b      	ldr	r3, [pc, #364]	@ (8001b40 <HAL_RCC_ClockConfig+0x214>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	221c      	movs	r2, #28
 80019d8:	4393      	bics	r3, r2
 80019da:	0019      	movs	r1, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	4b57      	ldr	r3, [pc, #348]	@ (8001b40 <HAL_RCC_ClockConfig+0x214>)
 80019e2:	430a      	orrs	r2, r1
 80019e4:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d107      	bne.n	80019fe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ee:	4b54      	ldr	r3, [pc, #336]	@ (8001b40 <HAL_RCC_ClockConfig+0x214>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	2380      	movs	r3, #128	@ 0x80
 80019f4:	029b      	lsls	r3, r3, #10
 80019f6:	4013      	ands	r3, r2
 80019f8:	d12b      	bne.n	8001a52 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e097      	b.n	8001b2e <HAL_RCC_ClockConfig+0x202>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d107      	bne.n	8001a16 <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a06:	4b4e      	ldr	r3, [pc, #312]	@ (8001b40 <HAL_RCC_ClockConfig+0x214>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	2380      	movs	r3, #128	@ 0x80
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	4013      	ands	r3, r2
 8001a10:	d11f      	bne.n	8001a52 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e08b      	b.n	8001b2e <HAL_RCC_ClockConfig+0x202>
      }
    }
#if defined(RCC_HSI48_SUPPORT)
    /* HSIUSB48 is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSIUSB48)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d107      	bne.n	8001a2e <HAL_RCC_ClockConfig+0x102>
    {
      /* Check the HSIUSB48 ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8001a1e:	4b48      	ldr	r3, [pc, #288]	@ (8001b40 <HAL_RCC_ClockConfig+0x214>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	2380      	movs	r3, #128	@ 0x80
 8001a24:	041b      	lsls	r3, r3, #16
 8001a26:	4013      	ands	r3, r2
 8001a28:	d113      	bne.n	8001a52 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e07f      	b.n	8001b2e <HAL_RCC_ClockConfig+0x202>
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	d106      	bne.n	8001a44 <HAL_RCC_ClockConfig+0x118>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001a36:	4b42      	ldr	r3, [pc, #264]	@ (8001b40 <HAL_RCC_ClockConfig+0x214>)
 8001a38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	d108      	bne.n	8001a52 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e074      	b.n	8001b2e <HAL_RCC_ClockConfig+0x202>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001a44:	4b3e      	ldr	r3, [pc, #248]	@ (8001b40 <HAL_RCC_ClockConfig+0x214>)
 8001a46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a48:	2202      	movs	r2, #2
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d101      	bne.n	8001a52 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e06d      	b.n	8001b2e <HAL_RCC_ClockConfig+0x202>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a52:	4b3b      	ldr	r3, [pc, #236]	@ (8001b40 <HAL_RCC_ClockConfig+0x214>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	2207      	movs	r2, #7
 8001a58:	4393      	bics	r3, r2
 8001a5a:	0019      	movs	r1, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685a      	ldr	r2, [r3, #4]
 8001a60:	4b37      	ldr	r3, [pc, #220]	@ (8001b40 <HAL_RCC_ClockConfig+0x214>)
 8001a62:	430a      	orrs	r2, r1
 8001a64:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a66:	f7ff f9e1 	bl	8000e2c <HAL_GetTick>
 8001a6a:	0003      	movs	r3, r0
 8001a6c:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a6e:	e009      	b.n	8001a84 <HAL_RCC_ClockConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001a70:	f7ff f9dc 	bl	8000e2c <HAL_GetTick>
 8001a74:	0002      	movs	r2, r0
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	4a30      	ldr	r2, [pc, #192]	@ (8001b3c <HAL_RCC_ClockConfig+0x210>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_ClockConfig+0x158>
      {
        return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e054      	b.n	8001b2e <HAL_RCC_ClockConfig+0x202>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a84:	4b2e      	ldr	r3, [pc, #184]	@ (8001b40 <HAL_RCC_ClockConfig+0x214>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	2238      	movs	r2, #56	@ 0x38
 8001a8a:	401a      	ands	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d1ec      	bne.n	8001a70 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a96:	4b28      	ldr	r3, [pc, #160]	@ (8001b38 <HAL_RCC_ClockConfig+0x20c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2207      	movs	r2, #7
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d21e      	bcs.n	8001ae2 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa4:	4b24      	ldr	r3, [pc, #144]	@ (8001b38 <HAL_RCC_ClockConfig+0x20c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2207      	movs	r2, #7
 8001aaa:	4393      	bics	r3, r2
 8001aac:	0019      	movs	r1, r3
 8001aae:	4b22      	ldr	r3, [pc, #136]	@ (8001b38 <HAL_RCC_ClockConfig+0x20c>)
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ab6:	f7ff f9b9 	bl	8000e2c <HAL_GetTick>
 8001aba:	0003      	movs	r3, r0
 8001abc:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001abe:	e009      	b.n	8001ad4 <HAL_RCC_ClockConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac0:	f7ff f9b4 	bl	8000e2c <HAL_GetTick>
 8001ac4:	0002      	movs	r2, r0
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	4a1c      	ldr	r2, [pc, #112]	@ (8001b3c <HAL_RCC_ClockConfig+0x210>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e02c      	b.n	8001b2e <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ad4:	4b18      	ldr	r3, [pc, #96]	@ (8001b38 <HAL_RCC_ClockConfig+0x20c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2207      	movs	r2, #7
 8001ada:	4013      	ands	r3, r2
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d1ee      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0x194>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2204      	movs	r2, #4
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d009      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001aec:	4b14      	ldr	r3, [pc, #80]	@ (8001b40 <HAL_RCC_ClockConfig+0x214>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	4a16      	ldr	r2, [pc, #88]	@ (8001b4c <HAL_RCC_ClockConfig+0x220>)
 8001af2:	4013      	ands	r3, r2
 8001af4:	0019      	movs	r1, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	691a      	ldr	r2, [r3, #16]
 8001afa:	4b11      	ldr	r3, [pc, #68]	@ (8001b40 <HAL_RCC_ClockConfig+0x214>)
 8001afc:	430a      	orrs	r2, r1
 8001afe:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001b00:	f000 f82c 	bl	8001b5c <HAL_RCC_GetSysClockFreq>
 8001b04:	0001      	movs	r1, r0
 8001b06:	4b0e      	ldr	r3, [pc, #56]	@ (8001b40 <HAL_RCC_ClockConfig+0x214>)
 8001b08:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001b0a:	0a1b      	lsrs	r3, r3, #8
 8001b0c:	220f      	movs	r2, #15
 8001b0e:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001b10:	4b0f      	ldr	r3, [pc, #60]	@ (8001b50 <HAL_RCC_ClockConfig+0x224>)
 8001b12:	0092      	lsls	r2, r2, #2
 8001b14:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001b16:	221f      	movs	r2, #31
 8001b18:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001b1a:	000a      	movs	r2, r1
 8001b1c:	40da      	lsrs	r2, r3
 8001b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b54 <HAL_RCC_ClockConfig+0x228>)
 8001b20:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b22:	4b0d      	ldr	r3, [pc, #52]	@ (8001b58 <HAL_RCC_ClockConfig+0x22c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	0018      	movs	r0, r3
 8001b28:	f7ff f924 	bl	8000d74 <HAL_InitTick>
 8001b2c:	0003      	movs	r3, r0
}
 8001b2e:	0018      	movs	r0, r3
 8001b30:	46bd      	mov	sp, r7
 8001b32:	b004      	add	sp, #16
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	46c0      	nop			@ (mov r8, r8)
 8001b38:	40022000 	.word	0x40022000
 8001b3c:	00001388 	.word	0x00001388
 8001b40:	40021000 	.word	0x40021000
 8001b44:	ffff84ff 	.word	0xffff84ff
 8001b48:	fffff0ff 	.word	0xfffff0ff
 8001b4c:	ffff8fff 	.word	0xffff8fff
 8001b50:	08004880 	.word	0x08004880
 8001b54:	20000004 	.word	0x20000004
 8001b58:	20000008 	.word	0x20000008

08001b5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8001b62:	4b27      	ldr	r3, [pc, #156]	@ (8001c00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	089b      	lsrs	r3, r3, #2
 8001b68:	2207      	movs	r2, #7
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001b70:	4b23      	ldr	r3, [pc, #140]	@ (8001c00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	2238      	movs	r2, #56	@ 0x38
 8001b76:	4013      	ands	r3, r2
 8001b78:	d10f      	bne.n	8001b9a <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001b7a:	4b21      	ldr	r3, [pc, #132]	@ (8001c00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	0adb      	lsrs	r3, r3, #11
 8001b80:	2207      	movs	r2, #7
 8001b82:	4013      	ands	r3, r2
 8001b84:	2201      	movs	r2, #1
 8001b86:	409a      	lsls	r2, r3
 8001b88:	0013      	movs	r3, r2
 8001b8a:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001b8c:	6879      	ldr	r1, [r7, #4]
 8001b8e:	481d      	ldr	r0, [pc, #116]	@ (8001c04 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001b90:	f7fe fac4 	bl	800011c <__udivsi3>
 8001b94:	0003      	movs	r3, r0
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	e027      	b.n	8001bea <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001b9a:	4b19      	ldr	r3, [pc, #100]	@ (8001c00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	2238      	movs	r2, #56	@ 0x38
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	2b08      	cmp	r3, #8
 8001ba4:	d102      	bne.n	8001bac <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ba6:	4b18      	ldr	r3, [pc, #96]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0xac>)
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	e01e      	b.n	8001bea <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001bac:	4b14      	ldr	r3, [pc, #80]	@ (8001c00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	2238      	movs	r2, #56	@ 0x38
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	2b20      	cmp	r3, #32
 8001bb6:	d103      	bne.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001bb8:	2380      	movs	r3, #128	@ 0x80
 8001bba:	021b      	lsls	r3, r3, #8
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	e014      	b.n	8001bea <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8001c00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	2238      	movs	r2, #56	@ 0x38
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	2b18      	cmp	r3, #24
 8001bca:	d103      	bne.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001bcc:	23fa      	movs	r3, #250	@ 0xfa
 8001bce:	01db      	lsls	r3, r3, #7
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	e00a      	b.n	8001bea <HAL_RCC_GetSysClockFreq+0x8e>
  }
#if defined(RCC_HSI48_SUPPORT)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI48)
 8001bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8001c00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	2238      	movs	r2, #56	@ 0x38
 8001bda:	4013      	ands	r3, r2
 8001bdc:	2b10      	cmp	r3, #16
 8001bde:	d102      	bne.n	8001be6 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    /* HSI48 used as system clock source */
    sysclockfreq = HSI48_VALUE;
 8001be0:	4b08      	ldr	r3, [pc, #32]	@ (8001c04 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	e001      	b.n	8001bea <HAL_RCC_GetSysClockFreq+0x8e>
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8001bea:	68b9      	ldr	r1, [r7, #8]
 8001bec:	68f8      	ldr	r0, [r7, #12]
 8001bee:	f7fe fa95 	bl	800011c <__udivsi3>
 8001bf2:	0003      	movs	r3, r0
 8001bf4:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
}
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	b004      	add	sp, #16
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40021000 	.word	0x40021000
 8001c04:	02dc6c00 	.word	0x02dc6c00
 8001c08:	007a1200 	.word	0x007a1200

08001c0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001c10:	f7ff ffa4 	bl	8001b5c <HAL_RCC_GetSysClockFreq>
 8001c14:	0001      	movs	r1, r0
 8001c16:	4b09      	ldr	r3, [pc, #36]	@ (8001c3c <HAL_RCC_GetHCLKFreq+0x30>)
 8001c18:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001c1a:	0a1b      	lsrs	r3, r3, #8
 8001c1c:	220f      	movs	r2, #15
 8001c1e:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001c20:	4b07      	ldr	r3, [pc, #28]	@ (8001c40 <HAL_RCC_GetHCLKFreq+0x34>)
 8001c22:	0092      	lsls	r2, r2, #2
 8001c24:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001c26:	221f      	movs	r2, #31
 8001c28:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001c2a:	000a      	movs	r2, r1
 8001c2c:	40da      	lsrs	r2, r3
 8001c2e:	4b05      	ldr	r3, [pc, #20]	@ (8001c44 <HAL_RCC_GetHCLKFreq+0x38>)
 8001c30:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8001c32:	4b04      	ldr	r3, [pc, #16]	@ (8001c44 <HAL_RCC_GetHCLKFreq+0x38>)
 8001c34:	681b      	ldr	r3, [r3, #0]
}
 8001c36:	0018      	movs	r0, r3
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	08004880 	.word	0x08004880
 8001c44:	20000004 	.word	0x20000004

08001c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8001c4c:	f7ff ffde 	bl	8001c0c <HAL_RCC_GetHCLKFreq>
 8001c50:	0001      	movs	r1, r0
 8001c52:	4b07      	ldr	r3, [pc, #28]	@ (8001c70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	0b1b      	lsrs	r3, r3, #12
 8001c58:	2207      	movs	r2, #7
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	4b05      	ldr	r3, [pc, #20]	@ (8001c74 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001c5e:	0092      	lsls	r2, r2, #2
 8001c60:	58d3      	ldr	r3, [r2, r3]
 8001c62:	221f      	movs	r2, #31
 8001c64:	4013      	ands	r3, r2
 8001c66:	40d9      	lsrs	r1, r3
 8001c68:	000b      	movs	r3, r1
}
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40021000 	.word	0x40021000
 8001c74:	080048c0 	.word	0x080048c0

08001c78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e04a      	b.n	8001d20 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	223d      	movs	r2, #61	@ 0x3d
 8001c8e:	5c9b      	ldrb	r3, [r3, r2]
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d107      	bne.n	8001ca6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	223c      	movs	r2, #60	@ 0x3c
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	f7fe ff59 	bl	8000b58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	223d      	movs	r2, #61	@ 0x3d
 8001caa:	2102      	movs	r1, #2
 8001cac:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	0019      	movs	r1, r3
 8001cb8:	0010      	movs	r0, r2
 8001cba:	f000 f957 	bl	8001f6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2248      	movs	r2, #72	@ 0x48
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	223e      	movs	r2, #62	@ 0x3e
 8001cca:	2101      	movs	r1, #1
 8001ccc:	5499      	strb	r1, [r3, r2]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	223f      	movs	r2, #63	@ 0x3f
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	5499      	strb	r1, [r3, r2]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2240      	movs	r2, #64	@ 0x40
 8001cda:	2101      	movs	r1, #1
 8001cdc:	5499      	strb	r1, [r3, r2]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2241      	movs	r2, #65	@ 0x41
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	5499      	strb	r1, [r3, r2]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2242      	movs	r2, #66	@ 0x42
 8001cea:	2101      	movs	r1, #1
 8001cec:	5499      	strb	r1, [r3, r2]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2243      	movs	r2, #67	@ 0x43
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2244      	movs	r2, #68	@ 0x44
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	5499      	strb	r1, [r3, r2]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2245      	movs	r2, #69	@ 0x45
 8001d02:	2101      	movs	r1, #1
 8001d04:	5499      	strb	r1, [r3, r2]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2246      	movs	r2, #70	@ 0x46
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	5499      	strb	r1, [r3, r2]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2247      	movs	r2, #71	@ 0x47
 8001d12:	2101      	movs	r1, #1
 8001d14:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	223d      	movs	r2, #61	@ 0x3d
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	0018      	movs	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	b002      	add	sp, #8
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	223d      	movs	r2, #61	@ 0x3d
 8001d34:	5c9b      	ldrb	r3, [r3, r2]
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d001      	beq.n	8001d40 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e035      	b.n	8001dac <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	223d      	movs	r2, #61	@ 0x3d
 8001d44:	2102      	movs	r1, #2
 8001d46:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a19      	ldr	r2, [pc, #100]	@ (8001db4 <HAL_TIM_Base_Start+0x8c>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d00a      	beq.n	8001d68 <HAL_TIM_Base_Start+0x40>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	2380      	movs	r3, #128	@ 0x80
 8001d58:	05db      	lsls	r3, r3, #23
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d004      	beq.n	8001d68 <HAL_TIM_Base_Start+0x40>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a15      	ldr	r2, [pc, #84]	@ (8001db8 <HAL_TIM_Base_Start+0x90>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d116      	bne.n	8001d96 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	4a13      	ldr	r2, [pc, #76]	@ (8001dbc <HAL_TIM_Base_Start+0x94>)
 8001d70:	4013      	ands	r3, r2
 8001d72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2b06      	cmp	r3, #6
 8001d78:	d016      	beq.n	8001da8 <HAL_TIM_Base_Start+0x80>
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	2380      	movs	r3, #128	@ 0x80
 8001d7e:	025b      	lsls	r3, r3, #9
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d011      	beq.n	8001da8 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2101      	movs	r1, #1
 8001d90:	430a      	orrs	r2, r1
 8001d92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d94:	e008      	b.n	8001da8 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2101      	movs	r1, #1
 8001da2:	430a      	orrs	r2, r1
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	e000      	b.n	8001daa <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001da8:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	0018      	movs	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	b004      	add	sp, #16
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40012c00 	.word	0x40012c00
 8001db8:	40000400 	.word	0x40000400
 8001dbc:	00010007 	.word	0x00010007

08001dc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dca:	230f      	movs	r3, #15
 8001dcc:	18fb      	adds	r3, r7, r3
 8001dce:	2200      	movs	r2, #0
 8001dd0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	223c      	movs	r2, #60	@ 0x3c
 8001dd6:	5c9b      	ldrb	r3, [r3, r2]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d101      	bne.n	8001de0 <HAL_TIM_ConfigClockSource+0x20>
 8001ddc:	2302      	movs	r3, #2
 8001dde:	e0bc      	b.n	8001f5a <HAL_TIM_ConfigClockSource+0x19a>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	223c      	movs	r2, #60	@ 0x3c
 8001de4:	2101      	movs	r1, #1
 8001de6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	223d      	movs	r2, #61	@ 0x3d
 8001dec:	2102      	movs	r1, #2
 8001dee:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	4a5a      	ldr	r2, [pc, #360]	@ (8001f64 <HAL_TIM_ConfigClockSource+0x1a4>)
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	4a59      	ldr	r2, [pc, #356]	@ (8001f68 <HAL_TIM_ConfigClockSource+0x1a8>)
 8001e04:	4013      	ands	r3, r2
 8001e06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68ba      	ldr	r2, [r7, #8]
 8001e0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2280      	movs	r2, #128	@ 0x80
 8001e16:	0192      	lsls	r2, r2, #6
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d040      	beq.n	8001e9e <HAL_TIM_ConfigClockSource+0xde>
 8001e1c:	2280      	movs	r2, #128	@ 0x80
 8001e1e:	0192      	lsls	r2, r2, #6
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d900      	bls.n	8001e26 <HAL_TIM_ConfigClockSource+0x66>
 8001e24:	e088      	b.n	8001f38 <HAL_TIM_ConfigClockSource+0x178>
 8001e26:	2280      	movs	r2, #128	@ 0x80
 8001e28:	0152      	lsls	r2, r2, #5
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d100      	bne.n	8001e30 <HAL_TIM_ConfigClockSource+0x70>
 8001e2e:	e088      	b.n	8001f42 <HAL_TIM_ConfigClockSource+0x182>
 8001e30:	2280      	movs	r2, #128	@ 0x80
 8001e32:	0152      	lsls	r2, r2, #5
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d900      	bls.n	8001e3a <HAL_TIM_ConfigClockSource+0x7a>
 8001e38:	e07e      	b.n	8001f38 <HAL_TIM_ConfigClockSource+0x178>
 8001e3a:	2b70      	cmp	r3, #112	@ 0x70
 8001e3c:	d018      	beq.n	8001e70 <HAL_TIM_ConfigClockSource+0xb0>
 8001e3e:	d900      	bls.n	8001e42 <HAL_TIM_ConfigClockSource+0x82>
 8001e40:	e07a      	b.n	8001f38 <HAL_TIM_ConfigClockSource+0x178>
 8001e42:	2b60      	cmp	r3, #96	@ 0x60
 8001e44:	d04f      	beq.n	8001ee6 <HAL_TIM_ConfigClockSource+0x126>
 8001e46:	d900      	bls.n	8001e4a <HAL_TIM_ConfigClockSource+0x8a>
 8001e48:	e076      	b.n	8001f38 <HAL_TIM_ConfigClockSource+0x178>
 8001e4a:	2b50      	cmp	r3, #80	@ 0x50
 8001e4c:	d03b      	beq.n	8001ec6 <HAL_TIM_ConfigClockSource+0x106>
 8001e4e:	d900      	bls.n	8001e52 <HAL_TIM_ConfigClockSource+0x92>
 8001e50:	e072      	b.n	8001f38 <HAL_TIM_ConfigClockSource+0x178>
 8001e52:	2b40      	cmp	r3, #64	@ 0x40
 8001e54:	d057      	beq.n	8001f06 <HAL_TIM_ConfigClockSource+0x146>
 8001e56:	d900      	bls.n	8001e5a <HAL_TIM_ConfigClockSource+0x9a>
 8001e58:	e06e      	b.n	8001f38 <HAL_TIM_ConfigClockSource+0x178>
 8001e5a:	2b30      	cmp	r3, #48	@ 0x30
 8001e5c:	d063      	beq.n	8001f26 <HAL_TIM_ConfigClockSource+0x166>
 8001e5e:	d86b      	bhi.n	8001f38 <HAL_TIM_ConfigClockSource+0x178>
 8001e60:	2b20      	cmp	r3, #32
 8001e62:	d060      	beq.n	8001f26 <HAL_TIM_ConfigClockSource+0x166>
 8001e64:	d868      	bhi.n	8001f38 <HAL_TIM_ConfigClockSource+0x178>
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d05d      	beq.n	8001f26 <HAL_TIM_ConfigClockSource+0x166>
 8001e6a:	2b10      	cmp	r3, #16
 8001e6c:	d05b      	beq.n	8001f26 <HAL_TIM_ConfigClockSource+0x166>
 8001e6e:	e063      	b.n	8001f38 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001e80:	f000 f96c 	bl	800215c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	2277      	movs	r2, #119	@ 0x77
 8001e90:	4313      	orrs	r3, r2
 8001e92:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68ba      	ldr	r2, [r7, #8]
 8001e9a:	609a      	str	r2, [r3, #8]
      break;
 8001e9c:	e052      	b.n	8001f44 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001eae:	f000 f955 	bl	800215c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2180      	movs	r1, #128	@ 0x80
 8001ebe:	01c9      	lsls	r1, r1, #7
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	609a      	str	r2, [r3, #8]
      break;
 8001ec4:	e03e      	b.n	8001f44 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ed2:	001a      	movs	r2, r3
 8001ed4:	f000 f8c6 	bl	8002064 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2150      	movs	r1, #80	@ 0x50
 8001ede:	0018      	movs	r0, r3
 8001ee0:	f000 f920 	bl	8002124 <TIM_ITRx_SetConfig>
      break;
 8001ee4:	e02e      	b.n	8001f44 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ef2:	001a      	movs	r2, r3
 8001ef4:	f000 f8e4 	bl	80020c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2160      	movs	r1, #96	@ 0x60
 8001efe:	0018      	movs	r0, r3
 8001f00:	f000 f910 	bl	8002124 <TIM_ITRx_SetConfig>
      break;
 8001f04:	e01e      	b.n	8001f44 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f12:	001a      	movs	r2, r3
 8001f14:	f000 f8a6 	bl	8002064 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2140      	movs	r1, #64	@ 0x40
 8001f1e:	0018      	movs	r0, r3
 8001f20:	f000 f900 	bl	8002124 <TIM_ITRx_SetConfig>
      break;
 8001f24:	e00e      	b.n	8001f44 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	0019      	movs	r1, r3
 8001f30:	0010      	movs	r0, r2
 8001f32:	f000 f8f7 	bl	8002124 <TIM_ITRx_SetConfig>
      break;
 8001f36:	e005      	b.n	8001f44 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001f38:	230f      	movs	r3, #15
 8001f3a:	18fb      	adds	r3, r7, r3
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	701a      	strb	r2, [r3, #0]
      break;
 8001f40:	e000      	b.n	8001f44 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001f42:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	223d      	movs	r2, #61	@ 0x3d
 8001f48:	2101      	movs	r1, #1
 8001f4a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	223c      	movs	r2, #60	@ 0x3c
 8001f50:	2100      	movs	r1, #0
 8001f52:	5499      	strb	r1, [r3, r2]

  return status;
 8001f54:	230f      	movs	r3, #15
 8001f56:	18fb      	adds	r3, r7, r3
 8001f58:	781b      	ldrb	r3, [r3, #0]
}
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	b004      	add	sp, #16
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	46c0      	nop			@ (mov r8, r8)
 8001f64:	ffceff88 	.word	0xffceff88
 8001f68:	ffff00ff 	.word	0xffff00ff

08001f6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a33      	ldr	r2, [pc, #204]	@ (800204c <TIM_Base_SetConfig+0xe0>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d008      	beq.n	8001f96 <TIM_Base_SetConfig+0x2a>
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	2380      	movs	r3, #128	@ 0x80
 8001f88:	05db      	lsls	r3, r3, #23
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d003      	beq.n	8001f96 <TIM_Base_SetConfig+0x2a>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a2f      	ldr	r2, [pc, #188]	@ (8002050 <TIM_Base_SetConfig+0xe4>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d108      	bne.n	8001fa8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2270      	movs	r2, #112	@ 0x70
 8001f9a:	4393      	bics	r3, r2
 8001f9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a28      	ldr	r2, [pc, #160]	@ (800204c <TIM_Base_SetConfig+0xe0>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d014      	beq.n	8001fda <TIM_Base_SetConfig+0x6e>
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	2380      	movs	r3, #128	@ 0x80
 8001fb4:	05db      	lsls	r3, r3, #23
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d00f      	beq.n	8001fda <TIM_Base_SetConfig+0x6e>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a24      	ldr	r2, [pc, #144]	@ (8002050 <TIM_Base_SetConfig+0xe4>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d00b      	beq.n	8001fda <TIM_Base_SetConfig+0x6e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a23      	ldr	r2, [pc, #140]	@ (8002054 <TIM_Base_SetConfig+0xe8>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d007      	beq.n	8001fda <TIM_Base_SetConfig+0x6e>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a22      	ldr	r2, [pc, #136]	@ (8002058 <TIM_Base_SetConfig+0xec>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d003      	beq.n	8001fda <TIM_Base_SetConfig+0x6e>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a21      	ldr	r2, [pc, #132]	@ (800205c <TIM_Base_SetConfig+0xf0>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d108      	bne.n	8001fec <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	4a20      	ldr	r2, [pc, #128]	@ (8002060 <TIM_Base_SetConfig+0xf4>)
 8001fde:	4013      	ands	r3, r2
 8001fe0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2280      	movs	r2, #128	@ 0x80
 8001ff0:	4393      	bics	r3, r2
 8001ff2:	001a      	movs	r2, r3
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	695b      	ldr	r3, [r3, #20]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a0f      	ldr	r2, [pc, #60]	@ (800204c <TIM_Base_SetConfig+0xe0>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d007      	beq.n	8002024 <TIM_Base_SetConfig+0xb8>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a10      	ldr	r2, [pc, #64]	@ (8002058 <TIM_Base_SetConfig+0xec>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d003      	beq.n	8002024 <TIM_Base_SetConfig+0xb8>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a0f      	ldr	r2, [pc, #60]	@ (800205c <TIM_Base_SetConfig+0xf0>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d103      	bne.n	800202c <TIM_Base_SetConfig+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	691a      	ldr	r2, [r3, #16]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2204      	movs	r2, #4
 8002032:	431a      	orrs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	601a      	str	r2, [r3, #0]
}
 8002044:	46c0      	nop			@ (mov r8, r8)
 8002046:	46bd      	mov	sp, r7
 8002048:	b004      	add	sp, #16
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40012c00 	.word	0x40012c00
 8002050:	40000400 	.word	0x40000400
 8002054:	40002000 	.word	0x40002000
 8002058:	40014400 	.word	0x40014400
 800205c:	40014800 	.word	0x40014800
 8002060:	fffffcff 	.word	0xfffffcff

08002064 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	2201      	movs	r2, #1
 800207c:	4393      	bics	r3, r2
 800207e:	001a      	movs	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	22f0      	movs	r2, #240	@ 0xf0
 800208e:	4393      	bics	r3, r2
 8002090:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	011b      	lsls	r3, r3, #4
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	4313      	orrs	r3, r2
 800209a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	220a      	movs	r2, #10
 80020a0:	4393      	bics	r3, r2
 80020a2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	621a      	str	r2, [r3, #32]
}
 80020b8:	46c0      	nop			@ (mov r8, r8)
 80020ba:	46bd      	mov	sp, r7
 80020bc:	b006      	add	sp, #24
 80020be:	bd80      	pop	{r7, pc}

080020c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	2210      	movs	r2, #16
 80020d8:	4393      	bics	r3, r2
 80020da:	001a      	movs	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002120 <TIM_TI2_ConfigInputStage+0x60>)
 80020ea:	4013      	ands	r3, r2
 80020ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	031b      	lsls	r3, r3, #12
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	22a0      	movs	r2, #160	@ 0xa0
 80020fc:	4393      	bics	r3, r2
 80020fe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	011b      	lsls	r3, r3, #4
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	4313      	orrs	r3, r2
 8002108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	621a      	str	r2, [r3, #32]
}
 8002116:	46c0      	nop			@ (mov r8, r8)
 8002118:	46bd      	mov	sp, r7
 800211a:	b006      	add	sp, #24
 800211c:	bd80      	pop	{r7, pc}
 800211e:	46c0      	nop			@ (mov r8, r8)
 8002120:	ffff0fff 	.word	0xffff0fff

08002124 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	4a08      	ldr	r2, [pc, #32]	@ (8002158 <TIM_ITRx_SetConfig+0x34>)
 8002138:	4013      	ands	r3, r2
 800213a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	4313      	orrs	r3, r2
 8002142:	2207      	movs	r2, #7
 8002144:	4313      	orrs	r3, r2
 8002146:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	609a      	str	r2, [r3, #8]
}
 800214e:	46c0      	nop			@ (mov r8, r8)
 8002150:	46bd      	mov	sp, r7
 8002152:	b004      	add	sp, #16
 8002154:	bd80      	pop	{r7, pc}
 8002156:	46c0      	nop			@ (mov r8, r8)
 8002158:	ffcfff8f 	.word	0xffcfff8f

0800215c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
 8002168:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	4a09      	ldr	r2, [pc, #36]	@ (8002198 <TIM_ETR_SetConfig+0x3c>)
 8002174:	4013      	ands	r3, r2
 8002176:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	021a      	lsls	r2, r3, #8
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	431a      	orrs	r2, r3
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	4313      	orrs	r3, r2
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	4313      	orrs	r3, r2
 8002188:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	609a      	str	r2, [r3, #8]
}
 8002190:	46c0      	nop			@ (mov r8, r8)
 8002192:	46bd      	mov	sp, r7
 8002194:	b006      	add	sp, #24
 8002196:	bd80      	pop	{r7, pc}
 8002198:	ffff00ff 	.word	0xffff00ff

0800219c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	223c      	movs	r2, #60	@ 0x3c
 80021aa:	5c9b      	ldrb	r3, [r3, r2]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d101      	bne.n	80021b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80021b0:	2302      	movs	r3, #2
 80021b2:	e050      	b.n	8002256 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	223c      	movs	r2, #60	@ 0x3c
 80021b8:	2101      	movs	r1, #1
 80021ba:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	223d      	movs	r2, #61	@ 0x3d
 80021c0:	2102      	movs	r1, #2
 80021c2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a21      	ldr	r2, [pc, #132]	@ (8002260 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d108      	bne.n	80021f0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	4a20      	ldr	r2, [pc, #128]	@ (8002264 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80021e2:	4013      	ands	r3, r2
 80021e4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2270      	movs	r2, #112	@ 0x70
 80021f4:	4393      	bics	r3, r2
 80021f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	4313      	orrs	r3, r2
 8002200:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a14      	ldr	r2, [pc, #80]	@ (8002260 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d00a      	beq.n	800222a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	2380      	movs	r3, #128	@ 0x80
 800221a:	05db      	lsls	r3, r3, #23
 800221c:	429a      	cmp	r2, r3
 800221e:	d004      	beq.n	800222a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a10      	ldr	r2, [pc, #64]	@ (8002268 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d10c      	bne.n	8002244 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	2280      	movs	r2, #128	@ 0x80
 800222e:	4393      	bics	r3, r2
 8002230:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	4313      	orrs	r3, r2
 800223a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68ba      	ldr	r2, [r7, #8]
 8002242:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	223d      	movs	r2, #61	@ 0x3d
 8002248:	2101      	movs	r1, #1
 800224a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	223c      	movs	r2, #60	@ 0x3c
 8002250:	2100      	movs	r1, #0
 8002252:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	0018      	movs	r0, r3
 8002258:	46bd      	mov	sp, r7
 800225a:	b004      	add	sp, #16
 800225c:	bd80      	pop	{r7, pc}
 800225e:	46c0      	nop			@ (mov r8, r8)
 8002260:	40012c00 	.word	0x40012c00
 8002264:	ff0fffff 	.word	0xff0fffff
 8002268:	40000400 	.word	0x40000400

0800226c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e046      	b.n	800230c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2288      	movs	r2, #136	@ 0x88
 8002282:	589b      	ldr	r3, [r3, r2]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d107      	bne.n	8002298 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2284      	movs	r2, #132	@ 0x84
 800228c:	2100      	movs	r1, #0
 800228e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	0018      	movs	r0, r3
 8002294:	f7fe fcca 	bl	8000c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2288      	movs	r2, #136	@ 0x88
 800229c:	2124      	movs	r1, #36	@ 0x24
 800229e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2101      	movs	r1, #1
 80022ac:	438a      	bics	r2, r1
 80022ae:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	0018      	movs	r0, r3
 80022bc:	f000 fdb0 	bl	8002e20 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	0018      	movs	r0, r3
 80022c4:	f000 fc2e 	bl	8002b24 <UART_SetConfig>
 80022c8:	0003      	movs	r3, r0
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d101      	bne.n	80022d2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e01c      	b.n	800230c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	490d      	ldr	r1, [pc, #52]	@ (8002314 <HAL_UART_Init+0xa8>)
 80022de:	400a      	ands	r2, r1
 80022e0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	212a      	movs	r1, #42	@ 0x2a
 80022ee:	438a      	bics	r2, r1
 80022f0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2101      	movs	r1, #1
 80022fe:	430a      	orrs	r2, r1
 8002300:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	0018      	movs	r0, r3
 8002306:	f000 fe3f 	bl	8002f88 <UART_CheckIdleState>
 800230a:	0003      	movs	r3, r0
}
 800230c:	0018      	movs	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	b002      	add	sp, #8
 8002312:	bd80      	pop	{r7, pc}
 8002314:	ffffb7ff 	.word	0xffffb7ff

08002318 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08a      	sub	sp, #40	@ 0x28
 800231c:	af02      	add	r7, sp, #8
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	603b      	str	r3, [r7, #0]
 8002324:	1dbb      	adds	r3, r7, #6
 8002326:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2288      	movs	r2, #136	@ 0x88
 800232c:	589b      	ldr	r3, [r3, r2]
 800232e:	2b20      	cmp	r3, #32
 8002330:	d000      	beq.n	8002334 <HAL_UART_Transmit+0x1c>
 8002332:	e090      	b.n	8002456 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_UART_Transmit+0x2a>
 800233a:	1dbb      	adds	r3, r7, #6
 800233c:	881b      	ldrh	r3, [r3, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e088      	b.n	8002458 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	689a      	ldr	r2, [r3, #8]
 800234a:	2380      	movs	r3, #128	@ 0x80
 800234c:	015b      	lsls	r3, r3, #5
 800234e:	429a      	cmp	r2, r3
 8002350:	d109      	bne.n	8002366 <HAL_UART_Transmit+0x4e>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d105      	bne.n	8002366 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	2201      	movs	r2, #1
 800235e:	4013      	ands	r3, r2
 8002360:	d001      	beq.n	8002366 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e078      	b.n	8002458 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2290      	movs	r2, #144	@ 0x90
 800236a:	2100      	movs	r1, #0
 800236c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2288      	movs	r2, #136	@ 0x88
 8002372:	2121      	movs	r1, #33	@ 0x21
 8002374:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002376:	f7fe fd59 	bl	8000e2c <HAL_GetTick>
 800237a:	0003      	movs	r3, r0
 800237c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	1dba      	adds	r2, r7, #6
 8002382:	2154      	movs	r1, #84	@ 0x54
 8002384:	8812      	ldrh	r2, [r2, #0]
 8002386:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	1dba      	adds	r2, r7, #6
 800238c:	2156      	movs	r1, #86	@ 0x56
 800238e:	8812      	ldrh	r2, [r2, #0]
 8002390:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	689a      	ldr	r2, [r3, #8]
 8002396:	2380      	movs	r3, #128	@ 0x80
 8002398:	015b      	lsls	r3, r3, #5
 800239a:	429a      	cmp	r2, r3
 800239c:	d108      	bne.n	80023b0 <HAL_UART_Transmit+0x98>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d104      	bne.n	80023b0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	61bb      	str	r3, [r7, #24]
 80023ae:	e003      	b.n	80023b8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80023b8:	e030      	b.n	800241c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	0013      	movs	r3, r2
 80023c4:	2200      	movs	r2, #0
 80023c6:	2180      	movs	r1, #128	@ 0x80
 80023c8:	f000 fe88 	bl	80030dc <UART_WaitOnFlagUntilTimeout>
 80023cc:	1e03      	subs	r3, r0, #0
 80023ce:	d005      	beq.n	80023dc <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2288      	movs	r2, #136	@ 0x88
 80023d4:	2120      	movs	r1, #32
 80023d6:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e03d      	b.n	8002458 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10b      	bne.n	80023fa <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	881b      	ldrh	r3, [r3, #0]
 80023e6:	001a      	movs	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	05d2      	lsls	r2, r2, #23
 80023ee:	0dd2      	lsrs	r2, r2, #23
 80023f0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	3302      	adds	r3, #2
 80023f6:	61bb      	str	r3, [r7, #24]
 80023f8:	e007      	b.n	800240a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	781a      	ldrb	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	3301      	adds	r3, #1
 8002408:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2256      	movs	r2, #86	@ 0x56
 800240e:	5a9b      	ldrh	r3, [r3, r2]
 8002410:	b29b      	uxth	r3, r3
 8002412:	3b01      	subs	r3, #1
 8002414:	b299      	uxth	r1, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2256      	movs	r2, #86	@ 0x56
 800241a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2256      	movs	r2, #86	@ 0x56
 8002420:	5a9b      	ldrh	r3, [r3, r2]
 8002422:	b29b      	uxth	r3, r3
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1c8      	bne.n	80023ba <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	9300      	str	r3, [sp, #0]
 8002430:	0013      	movs	r3, r2
 8002432:	2200      	movs	r2, #0
 8002434:	2140      	movs	r1, #64	@ 0x40
 8002436:	f000 fe51 	bl	80030dc <UART_WaitOnFlagUntilTimeout>
 800243a:	1e03      	subs	r3, r0, #0
 800243c:	d005      	beq.n	800244a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2288      	movs	r2, #136	@ 0x88
 8002442:	2120      	movs	r1, #32
 8002444:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e006      	b.n	8002458 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2288      	movs	r2, #136	@ 0x88
 800244e:	2120      	movs	r1, #32
 8002450:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002452:	2300      	movs	r3, #0
 8002454:	e000      	b.n	8002458 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8002456:	2302      	movs	r3, #2
  }
}
 8002458:	0018      	movs	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	b008      	add	sp, #32
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002460:	b5b0      	push	{r4, r5, r7, lr}
 8002462:	b0aa      	sub	sp, #168	@ 0xa8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	22a4      	movs	r2, #164	@ 0xa4
 8002470:	18b9      	adds	r1, r7, r2
 8002472:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	20a0      	movs	r0, #160	@ 0xa0
 800247c:	1839      	adds	r1, r7, r0
 800247e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	249c      	movs	r4, #156	@ 0x9c
 8002488:	1939      	adds	r1, r7, r4
 800248a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800248c:	0011      	movs	r1, r2
 800248e:	18bb      	adds	r3, r7, r2
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4aa2      	ldr	r2, [pc, #648]	@ (800271c <HAL_UART_IRQHandler+0x2bc>)
 8002494:	4013      	ands	r3, r2
 8002496:	2298      	movs	r2, #152	@ 0x98
 8002498:	18bd      	adds	r5, r7, r2
 800249a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800249c:	18bb      	adds	r3, r7, r2
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d11a      	bne.n	80024da <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80024a4:	187b      	adds	r3, r7, r1
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2220      	movs	r2, #32
 80024aa:	4013      	ands	r3, r2
 80024ac:	d015      	beq.n	80024da <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80024ae:	183b      	adds	r3, r7, r0
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2220      	movs	r2, #32
 80024b4:	4013      	ands	r3, r2
 80024b6:	d105      	bne.n	80024c4 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80024b8:	193b      	adds	r3, r7, r4
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	2380      	movs	r3, #128	@ 0x80
 80024be:	055b      	lsls	r3, r3, #21
 80024c0:	4013      	ands	r3, r2
 80024c2:	d00a      	beq.n	80024da <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d100      	bne.n	80024ce <HAL_UART_IRQHandler+0x6e>
 80024cc:	e2fb      	b.n	8002ac6 <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	0010      	movs	r0, r2
 80024d6:	4798      	blx	r3
      }
      return;
 80024d8:	e2f5      	b.n	8002ac6 <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80024da:	2398      	movs	r3, #152	@ 0x98
 80024dc:	18fb      	adds	r3, r7, r3
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d100      	bne.n	80024e6 <HAL_UART_IRQHandler+0x86>
 80024e4:	e122      	b.n	800272c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80024e6:	239c      	movs	r3, #156	@ 0x9c
 80024e8:	18fb      	adds	r3, r7, r3
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a8c      	ldr	r2, [pc, #560]	@ (8002720 <HAL_UART_IRQHandler+0x2c0>)
 80024ee:	4013      	ands	r3, r2
 80024f0:	d106      	bne.n	8002500 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80024f2:	23a0      	movs	r3, #160	@ 0xa0
 80024f4:	18fb      	adds	r3, r7, r3
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a8a      	ldr	r2, [pc, #552]	@ (8002724 <HAL_UART_IRQHandler+0x2c4>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	d100      	bne.n	8002500 <HAL_UART_IRQHandler+0xa0>
 80024fe:	e115      	b.n	800272c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002500:	23a4      	movs	r3, #164	@ 0xa4
 8002502:	18fb      	adds	r3, r7, r3
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2201      	movs	r2, #1
 8002508:	4013      	ands	r3, r2
 800250a:	d012      	beq.n	8002532 <HAL_UART_IRQHandler+0xd2>
 800250c:	23a0      	movs	r3, #160	@ 0xa0
 800250e:	18fb      	adds	r3, r7, r3
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	2380      	movs	r3, #128	@ 0x80
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	4013      	ands	r3, r2
 8002518:	d00b      	beq.n	8002532 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2201      	movs	r2, #1
 8002520:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2290      	movs	r2, #144	@ 0x90
 8002526:	589b      	ldr	r3, [r3, r2]
 8002528:	2201      	movs	r2, #1
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2190      	movs	r1, #144	@ 0x90
 8002530:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002532:	23a4      	movs	r3, #164	@ 0xa4
 8002534:	18fb      	adds	r3, r7, r3
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2202      	movs	r2, #2
 800253a:	4013      	ands	r3, r2
 800253c:	d011      	beq.n	8002562 <HAL_UART_IRQHandler+0x102>
 800253e:	239c      	movs	r3, #156	@ 0x9c
 8002540:	18fb      	adds	r3, r7, r3
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2201      	movs	r2, #1
 8002546:	4013      	ands	r3, r2
 8002548:	d00b      	beq.n	8002562 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2202      	movs	r2, #2
 8002550:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2290      	movs	r2, #144	@ 0x90
 8002556:	589b      	ldr	r3, [r3, r2]
 8002558:	2204      	movs	r2, #4
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2190      	movs	r1, #144	@ 0x90
 8002560:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002562:	23a4      	movs	r3, #164	@ 0xa4
 8002564:	18fb      	adds	r3, r7, r3
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2204      	movs	r2, #4
 800256a:	4013      	ands	r3, r2
 800256c:	d011      	beq.n	8002592 <HAL_UART_IRQHandler+0x132>
 800256e:	239c      	movs	r3, #156	@ 0x9c
 8002570:	18fb      	adds	r3, r7, r3
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2201      	movs	r2, #1
 8002576:	4013      	ands	r3, r2
 8002578:	d00b      	beq.n	8002592 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2204      	movs	r2, #4
 8002580:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2290      	movs	r2, #144	@ 0x90
 8002586:	589b      	ldr	r3, [r3, r2]
 8002588:	2202      	movs	r2, #2
 800258a:	431a      	orrs	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2190      	movs	r1, #144	@ 0x90
 8002590:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002592:	23a4      	movs	r3, #164	@ 0xa4
 8002594:	18fb      	adds	r3, r7, r3
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2208      	movs	r2, #8
 800259a:	4013      	ands	r3, r2
 800259c:	d017      	beq.n	80025ce <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800259e:	23a0      	movs	r3, #160	@ 0xa0
 80025a0:	18fb      	adds	r3, r7, r3
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2220      	movs	r2, #32
 80025a6:	4013      	ands	r3, r2
 80025a8:	d105      	bne.n	80025b6 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80025aa:	239c      	movs	r3, #156	@ 0x9c
 80025ac:	18fb      	adds	r3, r7, r3
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a5b      	ldr	r2, [pc, #364]	@ (8002720 <HAL_UART_IRQHandler+0x2c0>)
 80025b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80025b4:	d00b      	beq.n	80025ce <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2208      	movs	r2, #8
 80025bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2290      	movs	r2, #144	@ 0x90
 80025c2:	589b      	ldr	r3, [r3, r2]
 80025c4:	2208      	movs	r2, #8
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2190      	movs	r1, #144	@ 0x90
 80025cc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80025ce:	23a4      	movs	r3, #164	@ 0xa4
 80025d0:	18fb      	adds	r3, r7, r3
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	2380      	movs	r3, #128	@ 0x80
 80025d6:	011b      	lsls	r3, r3, #4
 80025d8:	4013      	ands	r3, r2
 80025da:	d013      	beq.n	8002604 <HAL_UART_IRQHandler+0x1a4>
 80025dc:	23a0      	movs	r3, #160	@ 0xa0
 80025de:	18fb      	adds	r3, r7, r3
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	2380      	movs	r3, #128	@ 0x80
 80025e4:	04db      	lsls	r3, r3, #19
 80025e6:	4013      	ands	r3, r2
 80025e8:	d00c      	beq.n	8002604 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2280      	movs	r2, #128	@ 0x80
 80025f0:	0112      	lsls	r2, r2, #4
 80025f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2290      	movs	r2, #144	@ 0x90
 80025f8:	589b      	ldr	r3, [r3, r2]
 80025fa:	2220      	movs	r2, #32
 80025fc:	431a      	orrs	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2190      	movs	r1, #144	@ 0x90
 8002602:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2290      	movs	r2, #144	@ 0x90
 8002608:	589b      	ldr	r3, [r3, r2]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d100      	bne.n	8002610 <HAL_UART_IRQHandler+0x1b0>
 800260e:	e25c      	b.n	8002aca <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002610:	23a4      	movs	r3, #164	@ 0xa4
 8002612:	18fb      	adds	r3, r7, r3
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2220      	movs	r2, #32
 8002618:	4013      	ands	r3, r2
 800261a:	d015      	beq.n	8002648 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800261c:	23a0      	movs	r3, #160	@ 0xa0
 800261e:	18fb      	adds	r3, r7, r3
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2220      	movs	r2, #32
 8002624:	4013      	ands	r3, r2
 8002626:	d106      	bne.n	8002636 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002628:	239c      	movs	r3, #156	@ 0x9c
 800262a:	18fb      	adds	r3, r7, r3
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	2380      	movs	r3, #128	@ 0x80
 8002630:	055b      	lsls	r3, r3, #21
 8002632:	4013      	ands	r3, r2
 8002634:	d008      	beq.n	8002648 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800263a:	2b00      	cmp	r3, #0
 800263c:	d004      	beq.n	8002648 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	0010      	movs	r0, r2
 8002646:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2290      	movs	r2, #144	@ 0x90
 800264c:	589b      	ldr	r3, [r3, r2]
 800264e:	2194      	movs	r1, #148	@ 0x94
 8002650:	187a      	adds	r2, r7, r1
 8002652:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	2240      	movs	r2, #64	@ 0x40
 800265c:	4013      	ands	r3, r2
 800265e:	2b40      	cmp	r3, #64	@ 0x40
 8002660:	d004      	beq.n	800266c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002662:	187b      	adds	r3, r7, r1
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2228      	movs	r2, #40	@ 0x28
 8002668:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800266a:	d04c      	beq.n	8002706 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	0018      	movs	r0, r3
 8002670:	f000 fda4 	bl	80031bc <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	2240      	movs	r2, #64	@ 0x40
 800267c:	4013      	ands	r3, r2
 800267e:	2b40      	cmp	r3, #64	@ 0x40
 8002680:	d13c      	bne.n	80026fc <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002682:	f3ef 8310 	mrs	r3, PRIMASK
 8002686:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8002688:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800268a:	2090      	movs	r0, #144	@ 0x90
 800268c:	183a      	adds	r2, r7, r0
 800268e:	6013      	str	r3, [r2, #0]
 8002690:	2301      	movs	r3, #1
 8002692:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002694:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002696:	f383 8810 	msr	PRIMASK, r3
}
 800269a:	46c0      	nop			@ (mov r8, r8)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689a      	ldr	r2, [r3, #8]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2140      	movs	r1, #64	@ 0x40
 80026a8:	438a      	bics	r2, r1
 80026aa:	609a      	str	r2, [r3, #8]
 80026ac:	183b      	adds	r3, r7, r0
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026b4:	f383 8810 	msr	PRIMASK, r3
}
 80026b8:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2280      	movs	r2, #128	@ 0x80
 80026be:	589b      	ldr	r3, [r3, r2]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d016      	beq.n	80026f2 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2280      	movs	r2, #128	@ 0x80
 80026c8:	589b      	ldr	r3, [r3, r2]
 80026ca:	4a17      	ldr	r2, [pc, #92]	@ (8002728 <HAL_UART_IRQHandler+0x2c8>)
 80026cc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2280      	movs	r2, #128	@ 0x80
 80026d2:	589b      	ldr	r3, [r3, r2]
 80026d4:	0018      	movs	r0, r3
 80026d6:	f7fe fd17 	bl	8001108 <HAL_DMA_Abort_IT>
 80026da:	1e03      	subs	r3, r0, #0
 80026dc:	d01c      	beq.n	8002718 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2280      	movs	r2, #128	@ 0x80
 80026e2:	589b      	ldr	r3, [r3, r2]
 80026e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	2180      	movs	r1, #128	@ 0x80
 80026ea:	5852      	ldr	r2, [r2, r1]
 80026ec:	0010      	movs	r0, r2
 80026ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026f0:	e012      	b.n	8002718 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	0018      	movs	r0, r3
 80026f6:	f000 fa01 	bl	8002afc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026fa:	e00d      	b.n	8002718 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	0018      	movs	r0, r3
 8002700:	f000 f9fc 	bl	8002afc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002704:	e008      	b.n	8002718 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	0018      	movs	r0, r3
 800270a:	f000 f9f7 	bl	8002afc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2290      	movs	r2, #144	@ 0x90
 8002712:	2100      	movs	r1, #0
 8002714:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002716:	e1d8      	b.n	8002aca <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002718:	46c0      	nop			@ (mov r8, r8)
    return;
 800271a:	e1d6      	b.n	8002aca <HAL_UART_IRQHandler+0x66a>
 800271c:	0000080f 	.word	0x0000080f
 8002720:	10000001 	.word	0x10000001
 8002724:	04000120 	.word	0x04000120
 8002728:	08003289 	.word	0x08003289

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002730:	2b01      	cmp	r3, #1
 8002732:	d000      	beq.n	8002736 <HAL_UART_IRQHandler+0x2d6>
 8002734:	e15d      	b.n	80029f2 <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002736:	23a4      	movs	r3, #164	@ 0xa4
 8002738:	18fb      	adds	r3, r7, r3
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2210      	movs	r2, #16
 800273e:	4013      	ands	r3, r2
 8002740:	d100      	bne.n	8002744 <HAL_UART_IRQHandler+0x2e4>
 8002742:	e156      	b.n	80029f2 <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002744:	23a0      	movs	r3, #160	@ 0xa0
 8002746:	18fb      	adds	r3, r7, r3
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2210      	movs	r2, #16
 800274c:	4013      	ands	r3, r2
 800274e:	d100      	bne.n	8002752 <HAL_UART_IRQHandler+0x2f2>
 8002750:	e14f      	b.n	80029f2 <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2210      	movs	r2, #16
 8002758:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	2240      	movs	r2, #64	@ 0x40
 8002762:	4013      	ands	r3, r2
 8002764:	2b40      	cmp	r3, #64	@ 0x40
 8002766:	d000      	beq.n	800276a <HAL_UART_IRQHandler+0x30a>
 8002768:	e0c3      	b.n	80028f2 <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2280      	movs	r2, #128	@ 0x80
 800276e:	589b      	ldr	r3, [r3, r2]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	217e      	movs	r1, #126	@ 0x7e
 8002776:	187b      	adds	r3, r7, r1
 8002778:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800277a:	187b      	adds	r3, r7, r1
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d100      	bne.n	8002784 <HAL_UART_IRQHandler+0x324>
 8002782:	e097      	b.n	80028b4 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	225c      	movs	r2, #92	@ 0x5c
 8002788:	5a9b      	ldrh	r3, [r3, r2]
 800278a:	187a      	adds	r2, r7, r1
 800278c:	8812      	ldrh	r2, [r2, #0]
 800278e:	429a      	cmp	r2, r3
 8002790:	d300      	bcc.n	8002794 <HAL_UART_IRQHandler+0x334>
 8002792:	e08f      	b.n	80028b4 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	187a      	adds	r2, r7, r1
 8002798:	215e      	movs	r1, #94	@ 0x5e
 800279a:	8812      	ldrh	r2, [r2, #0]
 800279c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2280      	movs	r2, #128	@ 0x80
 80027a2:	589b      	ldr	r3, [r3, r2]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2220      	movs	r2, #32
 80027aa:	4013      	ands	r3, r2
 80027ac:	d170      	bne.n	8002890 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80027ae:	f3ef 8310 	mrs	r3, PRIMASK
 80027b2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80027b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80027b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80027b8:	2301      	movs	r3, #1
 80027ba:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027be:	f383 8810 	msr	PRIMASK, r3
}
 80027c2:	46c0      	nop			@ (mov r8, r8)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	49c4      	ldr	r1, [pc, #784]	@ (8002ae0 <HAL_UART_IRQHandler+0x680>)
 80027d0:	400a      	ands	r2, r1
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027da:	f383 8810 	msr	PRIMASK, r3
}
 80027de:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80027e0:	f3ef 8310 	mrs	r3, PRIMASK
 80027e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80027e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027e8:	677b      	str	r3, [r7, #116]	@ 0x74
 80027ea:	2301      	movs	r3, #1
 80027ec:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027f0:	f383 8810 	msr	PRIMASK, r3
}
 80027f4:	46c0      	nop			@ (mov r8, r8)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2101      	movs	r1, #1
 8002802:	438a      	bics	r2, r1
 8002804:	609a      	str	r2, [r3, #8]
 8002806:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002808:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800280a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800280c:	f383 8810 	msr	PRIMASK, r3
}
 8002810:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002812:	f3ef 8310 	mrs	r3, PRIMASK
 8002816:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002818:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800281a:	673b      	str	r3, [r7, #112]	@ 0x70
 800281c:	2301      	movs	r3, #1
 800281e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002820:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002822:	f383 8810 	msr	PRIMASK, r3
}
 8002826:	46c0      	nop			@ (mov r8, r8)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2140      	movs	r1, #64	@ 0x40
 8002834:	438a      	bics	r2, r1
 8002836:	609a      	str	r2, [r3, #8]
 8002838:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800283a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800283c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800283e:	f383 8810 	msr	PRIMASK, r3
}
 8002842:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	228c      	movs	r2, #140	@ 0x8c
 8002848:	2120      	movs	r1, #32
 800284a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002852:	f3ef 8310 	mrs	r3, PRIMASK
 8002856:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8002858:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800285a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800285c:	2301      	movs	r3, #1
 800285e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002860:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002862:	f383 8810 	msr	PRIMASK, r3
}
 8002866:	46c0      	nop			@ (mov r8, r8)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2110      	movs	r1, #16
 8002874:	438a      	bics	r2, r1
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800287a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800287c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800287e:	f383 8810 	msr	PRIMASK, r3
}
 8002882:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2280      	movs	r2, #128	@ 0x80
 8002888:	589b      	ldr	r3, [r3, r2]
 800288a:	0018      	movs	r0, r3
 800288c:	f7fe fbda 	bl	8001044 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2202      	movs	r2, #2
 8002894:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	225c      	movs	r2, #92	@ 0x5c
 800289a:	5a9a      	ldrh	r2, [r3, r2]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	215e      	movs	r1, #94	@ 0x5e
 80028a0:	5a5b      	ldrh	r3, [r3, r1]
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	0011      	movs	r1, r2
 80028ac:	0018      	movs	r0, r3
 80028ae:	f000 f92d 	bl	8002b0c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80028b2:	e10c      	b.n	8002ace <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	225c      	movs	r2, #92	@ 0x5c
 80028b8:	5a9b      	ldrh	r3, [r3, r2]
 80028ba:	227e      	movs	r2, #126	@ 0x7e
 80028bc:	18ba      	adds	r2, r7, r2
 80028be:	8812      	ldrh	r2, [r2, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d000      	beq.n	80028c6 <HAL_UART_IRQHandler+0x466>
 80028c4:	e103      	b.n	8002ace <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2280      	movs	r2, #128	@ 0x80
 80028ca:	589b      	ldr	r3, [r3, r2]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2220      	movs	r2, #32
 80028d2:	4013      	ands	r3, r2
 80028d4:	2b20      	cmp	r3, #32
 80028d6:	d000      	beq.n	80028da <HAL_UART_IRQHandler+0x47a>
 80028d8:	e0f9      	b.n	8002ace <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2202      	movs	r2, #2
 80028de:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	225c      	movs	r2, #92	@ 0x5c
 80028e4:	5a9a      	ldrh	r2, [r3, r2]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	0011      	movs	r1, r2
 80028ea:	0018      	movs	r0, r3
 80028ec:	f000 f90e 	bl	8002b0c <HAL_UARTEx_RxEventCallback>
      return;
 80028f0:	e0ed      	b.n	8002ace <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	225c      	movs	r2, #92	@ 0x5c
 80028f6:	5a99      	ldrh	r1, [r3, r2]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	225e      	movs	r2, #94	@ 0x5e
 80028fc:	5a9b      	ldrh	r3, [r3, r2]
 80028fe:	b29a      	uxth	r2, r3
 8002900:	208e      	movs	r0, #142	@ 0x8e
 8002902:	183b      	adds	r3, r7, r0
 8002904:	1a8a      	subs	r2, r1, r2
 8002906:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	225e      	movs	r2, #94	@ 0x5e
 800290c:	5a9b      	ldrh	r3, [r3, r2]
 800290e:	b29b      	uxth	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	d100      	bne.n	8002916 <HAL_UART_IRQHandler+0x4b6>
 8002914:	e0dd      	b.n	8002ad2 <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 8002916:	183b      	adds	r3, r7, r0
 8002918:	881b      	ldrh	r3, [r3, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d100      	bne.n	8002920 <HAL_UART_IRQHandler+0x4c0>
 800291e:	e0d8      	b.n	8002ad2 <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002920:	f3ef 8310 	mrs	r3, PRIMASK
 8002924:	60fb      	str	r3, [r7, #12]
  return(result);
 8002926:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002928:	2488      	movs	r4, #136	@ 0x88
 800292a:	193a      	adds	r2, r7, r4
 800292c:	6013      	str	r3, [r2, #0]
 800292e:	2301      	movs	r3, #1
 8002930:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	f383 8810 	msr	PRIMASK, r3
}
 8002938:	46c0      	nop			@ (mov r8, r8)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4967      	ldr	r1, [pc, #412]	@ (8002ae4 <HAL_UART_IRQHandler+0x684>)
 8002946:	400a      	ands	r2, r1
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	193b      	adds	r3, r7, r4
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	f383 8810 	msr	PRIMASK, r3
}
 8002956:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002958:	f3ef 8310 	mrs	r3, PRIMASK
 800295c:	61bb      	str	r3, [r7, #24]
  return(result);
 800295e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002960:	2484      	movs	r4, #132	@ 0x84
 8002962:	193a      	adds	r2, r7, r4
 8002964:	6013      	str	r3, [r2, #0]
 8002966:	2301      	movs	r3, #1
 8002968:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	f383 8810 	msr	PRIMASK, r3
}
 8002970:	46c0      	nop			@ (mov r8, r8)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	495a      	ldr	r1, [pc, #360]	@ (8002ae8 <HAL_UART_IRQHandler+0x688>)
 800297e:	400a      	ands	r2, r1
 8002980:	609a      	str	r2, [r3, #8]
 8002982:	193b      	adds	r3, r7, r4
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002988:	6a3b      	ldr	r3, [r7, #32]
 800298a:	f383 8810 	msr	PRIMASK, r3
}
 800298e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	228c      	movs	r2, #140	@ 0x8c
 8002994:	2120      	movs	r1, #32
 8002996:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80029a4:	f3ef 8310 	mrs	r3, PRIMASK
 80029a8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80029aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029ac:	2480      	movs	r4, #128	@ 0x80
 80029ae:	193a      	adds	r2, r7, r4
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	2301      	movs	r3, #1
 80029b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029b8:	f383 8810 	msr	PRIMASK, r3
}
 80029bc:	46c0      	nop			@ (mov r8, r8)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2110      	movs	r1, #16
 80029ca:	438a      	bics	r2, r1
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	193b      	adds	r3, r7, r4
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029d6:	f383 8810 	msr	PRIMASK, r3
}
 80029da:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2202      	movs	r2, #2
 80029e0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80029e2:	183b      	adds	r3, r7, r0
 80029e4:	881a      	ldrh	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	0011      	movs	r1, r2
 80029ea:	0018      	movs	r0, r3
 80029ec:	f000 f88e 	bl	8002b0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80029f0:	e06f      	b.n	8002ad2 <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80029f2:	23a4      	movs	r3, #164	@ 0xa4
 80029f4:	18fb      	adds	r3, r7, r3
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	2380      	movs	r3, #128	@ 0x80
 80029fa:	035b      	lsls	r3, r3, #13
 80029fc:	4013      	ands	r3, r2
 80029fe:	d010      	beq.n	8002a22 <HAL_UART_IRQHandler+0x5c2>
 8002a00:	239c      	movs	r3, #156	@ 0x9c
 8002a02:	18fb      	adds	r3, r7, r3
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	2380      	movs	r3, #128	@ 0x80
 8002a08:	03db      	lsls	r3, r3, #15
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	d009      	beq.n	8002a22 <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2280      	movs	r2, #128	@ 0x80
 8002a14:	0352      	lsls	r2, r2, #13
 8002a16:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	f000 fc73 	bl	8003306 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002a20:	e05a      	b.n	8002ad8 <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002a22:	23a4      	movs	r3, #164	@ 0xa4
 8002a24:	18fb      	adds	r3, r7, r3
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2280      	movs	r2, #128	@ 0x80
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	d016      	beq.n	8002a5c <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002a2e:	23a0      	movs	r3, #160	@ 0xa0
 8002a30:	18fb      	adds	r3, r7, r3
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2280      	movs	r2, #128	@ 0x80
 8002a36:	4013      	ands	r3, r2
 8002a38:	d106      	bne.n	8002a48 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002a3a:	239c      	movs	r3, #156	@ 0x9c
 8002a3c:	18fb      	adds	r3, r7, r3
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	2380      	movs	r3, #128	@ 0x80
 8002a42:	041b      	lsls	r3, r3, #16
 8002a44:	4013      	ands	r3, r2
 8002a46:	d009      	beq.n	8002a5c <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d042      	beq.n	8002ad6 <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	0010      	movs	r0, r2
 8002a58:	4798      	blx	r3
    }
    return;
 8002a5a:	e03c      	b.n	8002ad6 <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002a5c:	23a4      	movs	r3, #164	@ 0xa4
 8002a5e:	18fb      	adds	r3, r7, r3
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2240      	movs	r2, #64	@ 0x40
 8002a64:	4013      	ands	r3, r2
 8002a66:	d00a      	beq.n	8002a7e <HAL_UART_IRQHandler+0x61e>
 8002a68:	23a0      	movs	r3, #160	@ 0xa0
 8002a6a:	18fb      	adds	r3, r7, r3
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2240      	movs	r2, #64	@ 0x40
 8002a70:	4013      	ands	r3, r2
 8002a72:	d004      	beq.n	8002a7e <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	0018      	movs	r0, r3
 8002a78:	f000 fc19 	bl	80032ae <UART_EndTransmit_IT>
    return;
 8002a7c:	e02c      	b.n	8002ad8 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002a7e:	23a4      	movs	r3, #164	@ 0xa4
 8002a80:	18fb      	adds	r3, r7, r3
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	2380      	movs	r3, #128	@ 0x80
 8002a86:	041b      	lsls	r3, r3, #16
 8002a88:	4013      	ands	r3, r2
 8002a8a:	d00b      	beq.n	8002aa4 <HAL_UART_IRQHandler+0x644>
 8002a8c:	23a0      	movs	r3, #160	@ 0xa0
 8002a8e:	18fb      	adds	r3, r7, r3
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	2380      	movs	r3, #128	@ 0x80
 8002a94:	05db      	lsls	r3, r3, #23
 8002a96:	4013      	ands	r3, r2
 8002a98:	d004      	beq.n	8002aa4 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f000 fc42 	bl	8003326 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002aa2:	e019      	b.n	8002ad8 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002aa4:	23a4      	movs	r3, #164	@ 0xa4
 8002aa6:	18fb      	adds	r3, r7, r3
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	2380      	movs	r3, #128	@ 0x80
 8002aac:	045b      	lsls	r3, r3, #17
 8002aae:	4013      	ands	r3, r2
 8002ab0:	d012      	beq.n	8002ad8 <HAL_UART_IRQHandler+0x678>
 8002ab2:	23a0      	movs	r3, #160	@ 0xa0
 8002ab4:	18fb      	adds	r3, r7, r3
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	da0d      	bge.n	8002ad8 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	0018      	movs	r0, r3
 8002ac0:	f000 fc29 	bl	8003316 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002ac4:	e008      	b.n	8002ad8 <HAL_UART_IRQHandler+0x678>
      return;
 8002ac6:	46c0      	nop			@ (mov r8, r8)
 8002ac8:	e006      	b.n	8002ad8 <HAL_UART_IRQHandler+0x678>
    return;
 8002aca:	46c0      	nop			@ (mov r8, r8)
 8002acc:	e004      	b.n	8002ad8 <HAL_UART_IRQHandler+0x678>
      return;
 8002ace:	46c0      	nop			@ (mov r8, r8)
 8002ad0:	e002      	b.n	8002ad8 <HAL_UART_IRQHandler+0x678>
      return;
 8002ad2:	46c0      	nop			@ (mov r8, r8)
 8002ad4:	e000      	b.n	8002ad8 <HAL_UART_IRQHandler+0x678>
    return;
 8002ad6:	46c0      	nop			@ (mov r8, r8)
  }
}
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	b02a      	add	sp, #168	@ 0xa8
 8002adc:	bdb0      	pop	{r4, r5, r7, pc}
 8002ade:	46c0      	nop			@ (mov r8, r8)
 8002ae0:	fffffeff 	.word	0xfffffeff
 8002ae4:	fffffedf 	.word	0xfffffedf
 8002ae8:	effffffe 	.word	0xeffffffe

08002aec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002af4:	46c0      	nop			@ (mov r8, r8)
 8002af6:	46bd      	mov	sp, r7
 8002af8:	b002      	add	sp, #8
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002b04:	46c0      	nop			@ (mov r8, r8)
 8002b06:	46bd      	mov	sp, r7
 8002b08:	b002      	add	sp, #8
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	000a      	movs	r2, r1
 8002b16:	1cbb      	adds	r3, r7, #2
 8002b18:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b1a:	46c0      	nop			@ (mov r8, r8)
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	b002      	add	sp, #8
 8002b20:	bd80      	pop	{r7, pc}
	...

08002b24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b088      	sub	sp, #32
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b2c:	231e      	movs	r3, #30
 8002b2e:	18fb      	adds	r3, r7, r3
 8002b30:	2200      	movs	r2, #0
 8002b32:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	431a      	orrs	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	69db      	ldr	r3, [r3, #28]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4aab      	ldr	r2, [pc, #684]	@ (8002e00 <UART_SetConfig+0x2dc>)
 8002b54:	4013      	ands	r3, r2
 8002b56:	0019      	movs	r1, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	4aa6      	ldr	r2, [pc, #664]	@ (8002e04 <UART_SetConfig+0x2e0>)
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	0019      	movs	r1, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68da      	ldr	r2, [r3, #12]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	4a9d      	ldr	r2, [pc, #628]	@ (8002e08 <UART_SetConfig+0x2e4>)
 8002b92:	4013      	ands	r3, r2
 8002b94:	0019      	movs	r1, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba6:	220f      	movs	r2, #15
 8002ba8:	4393      	bics	r3, r2
 8002baa:	0019      	movs	r1, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a93      	ldr	r2, [pc, #588]	@ (8002e0c <UART_SetConfig+0x2e8>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d127      	bne.n	8002c12 <UART_SetConfig+0xee>
 8002bc2:	4b93      	ldr	r3, [pc, #588]	@ (8002e10 <UART_SetConfig+0x2ec>)
 8002bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bc6:	2203      	movs	r2, #3
 8002bc8:	4013      	ands	r3, r2
 8002bca:	2b03      	cmp	r3, #3
 8002bcc:	d017      	beq.n	8002bfe <UART_SetConfig+0xda>
 8002bce:	d81b      	bhi.n	8002c08 <UART_SetConfig+0xe4>
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d00a      	beq.n	8002bea <UART_SetConfig+0xc6>
 8002bd4:	d818      	bhi.n	8002c08 <UART_SetConfig+0xe4>
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d002      	beq.n	8002be0 <UART_SetConfig+0xbc>
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d00a      	beq.n	8002bf4 <UART_SetConfig+0xd0>
 8002bde:	e013      	b.n	8002c08 <UART_SetConfig+0xe4>
 8002be0:	231f      	movs	r3, #31
 8002be2:	18fb      	adds	r3, r7, r3
 8002be4:	2200      	movs	r2, #0
 8002be6:	701a      	strb	r2, [r3, #0]
 8002be8:	e021      	b.n	8002c2e <UART_SetConfig+0x10a>
 8002bea:	231f      	movs	r3, #31
 8002bec:	18fb      	adds	r3, r7, r3
 8002bee:	2202      	movs	r2, #2
 8002bf0:	701a      	strb	r2, [r3, #0]
 8002bf2:	e01c      	b.n	8002c2e <UART_SetConfig+0x10a>
 8002bf4:	231f      	movs	r3, #31
 8002bf6:	18fb      	adds	r3, r7, r3
 8002bf8:	2204      	movs	r2, #4
 8002bfa:	701a      	strb	r2, [r3, #0]
 8002bfc:	e017      	b.n	8002c2e <UART_SetConfig+0x10a>
 8002bfe:	231f      	movs	r3, #31
 8002c00:	18fb      	adds	r3, r7, r3
 8002c02:	2208      	movs	r2, #8
 8002c04:	701a      	strb	r2, [r3, #0]
 8002c06:	e012      	b.n	8002c2e <UART_SetConfig+0x10a>
 8002c08:	231f      	movs	r3, #31
 8002c0a:	18fb      	adds	r3, r7, r3
 8002c0c:	2210      	movs	r2, #16
 8002c0e:	701a      	strb	r2, [r3, #0]
 8002c10:	e00d      	b.n	8002c2e <UART_SetConfig+0x10a>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a7f      	ldr	r2, [pc, #508]	@ (8002e14 <UART_SetConfig+0x2f0>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d104      	bne.n	8002c26 <UART_SetConfig+0x102>
 8002c1c:	231f      	movs	r3, #31
 8002c1e:	18fb      	adds	r3, r7, r3
 8002c20:	2200      	movs	r2, #0
 8002c22:	701a      	strb	r2, [r3, #0]
 8002c24:	e003      	b.n	8002c2e <UART_SetConfig+0x10a>
 8002c26:	231f      	movs	r3, #31
 8002c28:	18fb      	adds	r3, r7, r3
 8002c2a:	2210      	movs	r2, #16
 8002c2c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	69da      	ldr	r2, [r3, #28]
 8002c32:	2380      	movs	r3, #128	@ 0x80
 8002c34:	021b      	lsls	r3, r3, #8
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d000      	beq.n	8002c3c <UART_SetConfig+0x118>
 8002c3a:	e06f      	b.n	8002d1c <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8002c3c:	231f      	movs	r3, #31
 8002c3e:	18fb      	adds	r3, r7, r3
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	2b08      	cmp	r3, #8
 8002c44:	d01f      	beq.n	8002c86 <UART_SetConfig+0x162>
 8002c46:	dc22      	bgt.n	8002c8e <UART_SetConfig+0x16a>
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	d017      	beq.n	8002c7c <UART_SetConfig+0x158>
 8002c4c:	dc1f      	bgt.n	8002c8e <UART_SetConfig+0x16a>
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d002      	beq.n	8002c58 <UART_SetConfig+0x134>
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d005      	beq.n	8002c62 <UART_SetConfig+0x13e>
 8002c56:	e01a      	b.n	8002c8e <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c58:	f7fe fff6 	bl	8001c48 <HAL_RCC_GetPCLK1Freq>
 8002c5c:	0003      	movs	r3, r0
 8002c5e:	61bb      	str	r3, [r7, #24]
        break;
 8002c60:	e01c      	b.n	8002c9c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002c62:	4b6b      	ldr	r3, [pc, #428]	@ (8002e10 <UART_SetConfig+0x2ec>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	095b      	lsrs	r3, r3, #5
 8002c68:	2207      	movs	r2, #7
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	0019      	movs	r1, r3
 8002c70:	4869      	ldr	r0, [pc, #420]	@ (8002e18 <UART_SetConfig+0x2f4>)
 8002c72:	f7fd fa53 	bl	800011c <__udivsi3>
 8002c76:	0003      	movs	r3, r0
 8002c78:	61bb      	str	r3, [r7, #24]
        break;
 8002c7a:	e00f      	b.n	8002c9c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c7c:	f7fe ff6e 	bl	8001b5c <HAL_RCC_GetSysClockFreq>
 8002c80:	0003      	movs	r3, r0
 8002c82:	61bb      	str	r3, [r7, #24]
        break;
 8002c84:	e00a      	b.n	8002c9c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c86:	2380      	movs	r3, #128	@ 0x80
 8002c88:	021b      	lsls	r3, r3, #8
 8002c8a:	61bb      	str	r3, [r7, #24]
        break;
 8002c8c:	e006      	b.n	8002c9c <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c92:	231e      	movs	r3, #30
 8002c94:	18fb      	adds	r3, r7, r3
 8002c96:	2201      	movs	r2, #1
 8002c98:	701a      	strb	r2, [r3, #0]
        break;
 8002c9a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d100      	bne.n	8002ca4 <UART_SetConfig+0x180>
 8002ca2:	e097      	b.n	8002dd4 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ca8:	4b5c      	ldr	r3, [pc, #368]	@ (8002e1c <UART_SetConfig+0x2f8>)
 8002caa:	0052      	lsls	r2, r2, #1
 8002cac:	5ad3      	ldrh	r3, [r2, r3]
 8002cae:	0019      	movs	r1, r3
 8002cb0:	69b8      	ldr	r0, [r7, #24]
 8002cb2:	f7fd fa33 	bl	800011c <__udivsi3>
 8002cb6:	0003      	movs	r3, r0
 8002cb8:	005a      	lsls	r2, r3, #1
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	085b      	lsrs	r3, r3, #1
 8002cc0:	18d2      	adds	r2, r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	0019      	movs	r1, r3
 8002cc8:	0010      	movs	r0, r2
 8002cca:	f7fd fa27 	bl	800011c <__udivsi3>
 8002cce:	0003      	movs	r3, r0
 8002cd0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	2b0f      	cmp	r3, #15
 8002cd6:	d91c      	bls.n	8002d12 <UART_SetConfig+0x1ee>
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	2380      	movs	r3, #128	@ 0x80
 8002cdc:	025b      	lsls	r3, r3, #9
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d217      	bcs.n	8002d12 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	200e      	movs	r0, #14
 8002ce8:	183b      	adds	r3, r7, r0
 8002cea:	210f      	movs	r1, #15
 8002cec:	438a      	bics	r2, r1
 8002cee:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	085b      	lsrs	r3, r3, #1
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	2207      	movs	r2, #7
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	b299      	uxth	r1, r3
 8002cfc:	183b      	adds	r3, r7, r0
 8002cfe:	183a      	adds	r2, r7, r0
 8002d00:	8812      	ldrh	r2, [r2, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	183a      	adds	r2, r7, r0
 8002d0c:	8812      	ldrh	r2, [r2, #0]
 8002d0e:	60da      	str	r2, [r3, #12]
 8002d10:	e060      	b.n	8002dd4 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002d12:	231e      	movs	r3, #30
 8002d14:	18fb      	adds	r3, r7, r3
 8002d16:	2201      	movs	r2, #1
 8002d18:	701a      	strb	r2, [r3, #0]
 8002d1a:	e05b      	b.n	8002dd4 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d1c:	231f      	movs	r3, #31
 8002d1e:	18fb      	adds	r3, r7, r3
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d01f      	beq.n	8002d66 <UART_SetConfig+0x242>
 8002d26:	dc22      	bgt.n	8002d6e <UART_SetConfig+0x24a>
 8002d28:	2b04      	cmp	r3, #4
 8002d2a:	d017      	beq.n	8002d5c <UART_SetConfig+0x238>
 8002d2c:	dc1f      	bgt.n	8002d6e <UART_SetConfig+0x24a>
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d002      	beq.n	8002d38 <UART_SetConfig+0x214>
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d005      	beq.n	8002d42 <UART_SetConfig+0x21e>
 8002d36:	e01a      	b.n	8002d6e <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d38:	f7fe ff86 	bl	8001c48 <HAL_RCC_GetPCLK1Freq>
 8002d3c:	0003      	movs	r3, r0
 8002d3e:	61bb      	str	r3, [r7, #24]
        break;
 8002d40:	e01c      	b.n	8002d7c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002d42:	4b33      	ldr	r3, [pc, #204]	@ (8002e10 <UART_SetConfig+0x2ec>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	095b      	lsrs	r3, r3, #5
 8002d48:	2207      	movs	r2, #7
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	0019      	movs	r1, r3
 8002d50:	4831      	ldr	r0, [pc, #196]	@ (8002e18 <UART_SetConfig+0x2f4>)
 8002d52:	f7fd f9e3 	bl	800011c <__udivsi3>
 8002d56:	0003      	movs	r3, r0
 8002d58:	61bb      	str	r3, [r7, #24]
        break;
 8002d5a:	e00f      	b.n	8002d7c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d5c:	f7fe fefe 	bl	8001b5c <HAL_RCC_GetSysClockFreq>
 8002d60:	0003      	movs	r3, r0
 8002d62:	61bb      	str	r3, [r7, #24]
        break;
 8002d64:	e00a      	b.n	8002d7c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d66:	2380      	movs	r3, #128	@ 0x80
 8002d68:	021b      	lsls	r3, r3, #8
 8002d6a:	61bb      	str	r3, [r7, #24]
        break;
 8002d6c:	e006      	b.n	8002d7c <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d72:	231e      	movs	r3, #30
 8002d74:	18fb      	adds	r3, r7, r3
 8002d76:	2201      	movs	r2, #1
 8002d78:	701a      	strb	r2, [r3, #0]
        break;
 8002d7a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d028      	beq.n	8002dd4 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d86:	4b25      	ldr	r3, [pc, #148]	@ (8002e1c <UART_SetConfig+0x2f8>)
 8002d88:	0052      	lsls	r2, r2, #1
 8002d8a:	5ad3      	ldrh	r3, [r2, r3]
 8002d8c:	0019      	movs	r1, r3
 8002d8e:	69b8      	ldr	r0, [r7, #24]
 8002d90:	f7fd f9c4 	bl	800011c <__udivsi3>
 8002d94:	0003      	movs	r3, r0
 8002d96:	001a      	movs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	085b      	lsrs	r3, r3, #1
 8002d9e:	18d2      	adds	r2, r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	0019      	movs	r1, r3
 8002da6:	0010      	movs	r0, r2
 8002da8:	f7fd f9b8 	bl	800011c <__udivsi3>
 8002dac:	0003      	movs	r3, r0
 8002dae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	2b0f      	cmp	r3, #15
 8002db4:	d90a      	bls.n	8002dcc <UART_SetConfig+0x2a8>
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	2380      	movs	r3, #128	@ 0x80
 8002dba:	025b      	lsls	r3, r3, #9
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d205      	bcs.n	8002dcc <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	60da      	str	r2, [r3, #12]
 8002dca:	e003      	b.n	8002dd4 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002dcc:	231e      	movs	r3, #30
 8002dce:	18fb      	adds	r3, r7, r3
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	226a      	movs	r2, #106	@ 0x6a
 8002dd8:	2101      	movs	r1, #1
 8002dda:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2268      	movs	r2, #104	@ 0x68
 8002de0:	2101      	movs	r1, #1
 8002de2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002df0:	231e      	movs	r3, #30
 8002df2:	18fb      	adds	r3, r7, r3
 8002df4:	781b      	ldrb	r3, [r3, #0]
}
 8002df6:	0018      	movs	r0, r3
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	b008      	add	sp, #32
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	46c0      	nop			@ (mov r8, r8)
 8002e00:	cfff69f3 	.word	0xcfff69f3
 8002e04:	ffffcfff 	.word	0xffffcfff
 8002e08:	11fff4ff 	.word	0x11fff4ff
 8002e0c:	40013800 	.word	0x40013800
 8002e10:	40021000 	.word	0x40021000
 8002e14:	40004400 	.word	0x40004400
 8002e18:	02dc6c00 	.word	0x02dc6c00
 8002e1c:	080048e0 	.word	0x080048e0

08002e20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e2c:	2208      	movs	r2, #8
 8002e2e:	4013      	ands	r3, r2
 8002e30:	d00b      	beq.n	8002e4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	4a4a      	ldr	r2, [pc, #296]	@ (8002f64 <UART_AdvFeatureConfig+0x144>)
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	0019      	movs	r1, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e4e:	2201      	movs	r2, #1
 8002e50:	4013      	ands	r3, r2
 8002e52:	d00b      	beq.n	8002e6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	4a43      	ldr	r2, [pc, #268]	@ (8002f68 <UART_AdvFeatureConfig+0x148>)
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	0019      	movs	r1, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e70:	2202      	movs	r2, #2
 8002e72:	4013      	ands	r3, r2
 8002e74:	d00b      	beq.n	8002e8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	4a3b      	ldr	r2, [pc, #236]	@ (8002f6c <UART_AdvFeatureConfig+0x14c>)
 8002e7e:	4013      	ands	r3, r2
 8002e80:	0019      	movs	r1, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e92:	2204      	movs	r2, #4
 8002e94:	4013      	ands	r3, r2
 8002e96:	d00b      	beq.n	8002eb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	4a34      	ldr	r2, [pc, #208]	@ (8002f70 <UART_AdvFeatureConfig+0x150>)
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	0019      	movs	r1, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb4:	2210      	movs	r2, #16
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	d00b      	beq.n	8002ed2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	4a2c      	ldr	r2, [pc, #176]	@ (8002f74 <UART_AdvFeatureConfig+0x154>)
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	0019      	movs	r1, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	4013      	ands	r3, r2
 8002eda:	d00b      	beq.n	8002ef4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	4a25      	ldr	r2, [pc, #148]	@ (8002f78 <UART_AdvFeatureConfig+0x158>)
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	0019      	movs	r1, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef8:	2240      	movs	r2, #64	@ 0x40
 8002efa:	4013      	ands	r3, r2
 8002efc:	d01d      	beq.n	8002f3a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	4a1d      	ldr	r2, [pc, #116]	@ (8002f7c <UART_AdvFeatureConfig+0x15c>)
 8002f06:	4013      	ands	r3, r2
 8002f08:	0019      	movs	r1, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f1a:	2380      	movs	r3, #128	@ 0x80
 8002f1c:	035b      	lsls	r3, r3, #13
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d10b      	bne.n	8002f3a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	4a15      	ldr	r2, [pc, #84]	@ (8002f80 <UART_AdvFeatureConfig+0x160>)
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	0019      	movs	r1, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f3e:	2280      	movs	r2, #128	@ 0x80
 8002f40:	4013      	ands	r3, r2
 8002f42:	d00b      	beq.n	8002f5c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	4a0e      	ldr	r2, [pc, #56]	@ (8002f84 <UART_AdvFeatureConfig+0x164>)
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	0019      	movs	r1, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	605a      	str	r2, [r3, #4]
  }
}
 8002f5c:	46c0      	nop			@ (mov r8, r8)
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	b002      	add	sp, #8
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	ffff7fff 	.word	0xffff7fff
 8002f68:	fffdffff 	.word	0xfffdffff
 8002f6c:	fffeffff 	.word	0xfffeffff
 8002f70:	fffbffff 	.word	0xfffbffff
 8002f74:	ffffefff 	.word	0xffffefff
 8002f78:	ffffdfff 	.word	0xffffdfff
 8002f7c:	ffefffff 	.word	0xffefffff
 8002f80:	ff9fffff 	.word	0xff9fffff
 8002f84:	fff7ffff 	.word	0xfff7ffff

08002f88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b092      	sub	sp, #72	@ 0x48
 8002f8c:	af02      	add	r7, sp, #8
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2290      	movs	r2, #144	@ 0x90
 8002f94:	2100      	movs	r1, #0
 8002f96:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f98:	f7fd ff48 	bl	8000e2c <HAL_GetTick>
 8002f9c:	0003      	movs	r3, r0
 8002f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2208      	movs	r2, #8
 8002fa8:	4013      	ands	r3, r2
 8002faa:	2b08      	cmp	r3, #8
 8002fac:	d12d      	bne.n	800300a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fb0:	2280      	movs	r2, #128	@ 0x80
 8002fb2:	0391      	lsls	r1, r2, #14
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	4a47      	ldr	r2, [pc, #284]	@ (80030d4 <UART_CheckIdleState+0x14c>)
 8002fb8:	9200      	str	r2, [sp, #0]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f000 f88e 	bl	80030dc <UART_WaitOnFlagUntilTimeout>
 8002fc0:	1e03      	subs	r3, r0, #0
 8002fc2:	d022      	beq.n	800300a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002fc4:	f3ef 8310 	mrs	r3, PRIMASK
 8002fc8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002fcc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002fce:	2301      	movs	r3, #1
 8002fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fd4:	f383 8810 	msr	PRIMASK, r3
}
 8002fd8:	46c0      	nop			@ (mov r8, r8)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2180      	movs	r1, #128	@ 0x80
 8002fe6:	438a      	bics	r2, r1
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ff0:	f383 8810 	msr	PRIMASK, r3
}
 8002ff4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2288      	movs	r2, #136	@ 0x88
 8002ffa:	2120      	movs	r1, #32
 8002ffc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2284      	movs	r2, #132	@ 0x84
 8003002:	2100      	movs	r1, #0
 8003004:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e060      	b.n	80030cc <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2204      	movs	r2, #4
 8003012:	4013      	ands	r3, r2
 8003014:	2b04      	cmp	r3, #4
 8003016:	d146      	bne.n	80030a6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003018:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800301a:	2280      	movs	r2, #128	@ 0x80
 800301c:	03d1      	lsls	r1, r2, #15
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	4a2c      	ldr	r2, [pc, #176]	@ (80030d4 <UART_CheckIdleState+0x14c>)
 8003022:	9200      	str	r2, [sp, #0]
 8003024:	2200      	movs	r2, #0
 8003026:	f000 f859 	bl	80030dc <UART_WaitOnFlagUntilTimeout>
 800302a:	1e03      	subs	r3, r0, #0
 800302c:	d03b      	beq.n	80030a6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800302e:	f3ef 8310 	mrs	r3, PRIMASK
 8003032:	60fb      	str	r3, [r7, #12]
  return(result);
 8003034:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003036:	637b      	str	r3, [r7, #52]	@ 0x34
 8003038:	2301      	movs	r3, #1
 800303a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	f383 8810 	msr	PRIMASK, r3
}
 8003042:	46c0      	nop			@ (mov r8, r8)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4922      	ldr	r1, [pc, #136]	@ (80030d8 <UART_CheckIdleState+0x150>)
 8003050:	400a      	ands	r2, r1
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003056:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f383 8810 	msr	PRIMASK, r3
}
 800305e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003060:	f3ef 8310 	mrs	r3, PRIMASK
 8003064:	61bb      	str	r3, [r7, #24]
  return(result);
 8003066:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003068:	633b      	str	r3, [r7, #48]	@ 0x30
 800306a:	2301      	movs	r3, #1
 800306c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	f383 8810 	msr	PRIMASK, r3
}
 8003074:	46c0      	nop			@ (mov r8, r8)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2101      	movs	r1, #1
 8003082:	438a      	bics	r2, r1
 8003084:	609a      	str	r2, [r3, #8]
 8003086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003088:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800308a:	6a3b      	ldr	r3, [r7, #32]
 800308c:	f383 8810 	msr	PRIMASK, r3
}
 8003090:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	228c      	movs	r2, #140	@ 0x8c
 8003096:	2120      	movs	r1, #32
 8003098:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2284      	movs	r2, #132	@ 0x84
 800309e:	2100      	movs	r1, #0
 80030a0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e012      	b.n	80030cc <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2288      	movs	r2, #136	@ 0x88
 80030aa:	2120      	movs	r1, #32
 80030ac:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	228c      	movs	r2, #140	@ 0x8c
 80030b2:	2120      	movs	r1, #32
 80030b4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2284      	movs	r2, #132	@ 0x84
 80030c6:	2100      	movs	r1, #0
 80030c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	0018      	movs	r0, r3
 80030ce:	46bd      	mov	sp, r7
 80030d0:	b010      	add	sp, #64	@ 0x40
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	01ffffff 	.word	0x01ffffff
 80030d8:	fffffedf 	.word	0xfffffedf

080030dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	603b      	str	r3, [r7, #0]
 80030e8:	1dfb      	adds	r3, r7, #7
 80030ea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030ec:	e051      	b.n	8003192 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	3301      	adds	r3, #1
 80030f2:	d04e      	beq.n	8003192 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030f4:	f7fd fe9a 	bl	8000e2c <HAL_GetTick>
 80030f8:	0002      	movs	r2, r0
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	429a      	cmp	r2, r3
 8003102:	d302      	bcc.n	800310a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e051      	b.n	80031b2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2204      	movs	r2, #4
 8003116:	4013      	ands	r3, r2
 8003118:	d03b      	beq.n	8003192 <UART_WaitOnFlagUntilTimeout+0xb6>
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	2b80      	cmp	r3, #128	@ 0x80
 800311e:	d038      	beq.n	8003192 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	2b40      	cmp	r3, #64	@ 0x40
 8003124:	d035      	beq.n	8003192 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	2208      	movs	r2, #8
 800312e:	4013      	ands	r3, r2
 8003130:	2b08      	cmp	r3, #8
 8003132:	d111      	bne.n	8003158 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2208      	movs	r2, #8
 800313a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	0018      	movs	r0, r3
 8003140:	f000 f83c 	bl	80031bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2290      	movs	r2, #144	@ 0x90
 8003148:	2108      	movs	r1, #8
 800314a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2284      	movs	r2, #132	@ 0x84
 8003150:	2100      	movs	r1, #0
 8003152:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e02c      	b.n	80031b2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	69da      	ldr	r2, [r3, #28]
 800315e:	2380      	movs	r3, #128	@ 0x80
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	401a      	ands	r2, r3
 8003164:	2380      	movs	r3, #128	@ 0x80
 8003166:	011b      	lsls	r3, r3, #4
 8003168:	429a      	cmp	r2, r3
 800316a:	d112      	bne.n	8003192 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2280      	movs	r2, #128	@ 0x80
 8003172:	0112      	lsls	r2, r2, #4
 8003174:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	0018      	movs	r0, r3
 800317a:	f000 f81f 	bl	80031bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2290      	movs	r2, #144	@ 0x90
 8003182:	2120      	movs	r1, #32
 8003184:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2284      	movs	r2, #132	@ 0x84
 800318a:	2100      	movs	r1, #0
 800318c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e00f      	b.n	80031b2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	69db      	ldr	r3, [r3, #28]
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	4013      	ands	r3, r2
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	425a      	negs	r2, r3
 80031a2:	4153      	adcs	r3, r2
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	001a      	movs	r2, r3
 80031a8:	1dfb      	adds	r3, r7, #7
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d09e      	beq.n	80030ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	0018      	movs	r0, r3
 80031b4:	46bd      	mov	sp, r7
 80031b6:	b004      	add	sp, #16
 80031b8:	bd80      	pop	{r7, pc}
	...

080031bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b08e      	sub	sp, #56	@ 0x38
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80031c4:	f3ef 8310 	mrs	r3, PRIMASK
 80031c8:	617b      	str	r3, [r7, #20]
  return(result);
 80031ca:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80031cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80031ce:	2301      	movs	r3, #1
 80031d0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	f383 8810 	msr	PRIMASK, r3
}
 80031d8:	46c0      	nop			@ (mov r8, r8)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4926      	ldr	r1, [pc, #152]	@ (8003280 <UART_EndRxTransfer+0xc4>)
 80031e6:	400a      	ands	r2, r1
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	f383 8810 	msr	PRIMASK, r3
}
 80031f4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80031f6:	f3ef 8310 	mrs	r3, PRIMASK
 80031fa:	623b      	str	r3, [r7, #32]
  return(result);
 80031fc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80031fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8003200:	2301      	movs	r3, #1
 8003202:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003206:	f383 8810 	msr	PRIMASK, r3
}
 800320a:	46c0      	nop			@ (mov r8, r8)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689a      	ldr	r2, [r3, #8]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	491b      	ldr	r1, [pc, #108]	@ (8003284 <UART_EndRxTransfer+0xc8>)
 8003218:	400a      	ands	r2, r1
 800321a:	609a      	str	r2, [r3, #8]
 800321c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800321e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003222:	f383 8810 	msr	PRIMASK, r3
}
 8003226:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800322c:	2b01      	cmp	r3, #1
 800322e:	d118      	bne.n	8003262 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003230:	f3ef 8310 	mrs	r3, PRIMASK
 8003234:	60bb      	str	r3, [r7, #8]
  return(result);
 8003236:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003238:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800323a:	2301      	movs	r3, #1
 800323c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f383 8810 	msr	PRIMASK, r3
}
 8003244:	46c0      	nop			@ (mov r8, r8)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2110      	movs	r1, #16
 8003252:	438a      	bics	r2, r1
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003258:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	f383 8810 	msr	PRIMASK, r3
}
 8003260:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	228c      	movs	r2, #140	@ 0x8c
 8003266:	2120      	movs	r1, #32
 8003268:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003276:	46c0      	nop			@ (mov r8, r8)
 8003278:	46bd      	mov	sp, r7
 800327a:	b00e      	add	sp, #56	@ 0x38
 800327c:	bd80      	pop	{r7, pc}
 800327e:	46c0      	nop			@ (mov r8, r8)
 8003280:	fffffedf 	.word	0xfffffedf
 8003284:	effffffe 	.word	0xeffffffe

08003288 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003294:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	225e      	movs	r2, #94	@ 0x5e
 800329a:	2100      	movs	r1, #0
 800329c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	0018      	movs	r0, r3
 80032a2:	f7ff fc2b 	bl	8002afc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032a6:	46c0      	nop			@ (mov r8, r8)
 80032a8:	46bd      	mov	sp, r7
 80032aa:	b004      	add	sp, #16
 80032ac:	bd80      	pop	{r7, pc}

080032ae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b086      	sub	sp, #24
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80032b6:	f3ef 8310 	mrs	r3, PRIMASK
 80032ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80032bc:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80032be:	617b      	str	r3, [r7, #20]
 80032c0:	2301      	movs	r3, #1
 80032c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f383 8810 	msr	PRIMASK, r3
}
 80032ca:	46c0      	nop			@ (mov r8, r8)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2140      	movs	r1, #64	@ 0x40
 80032d8:	438a      	bics	r2, r1
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	f383 8810 	msr	PRIMASK, r3
}
 80032e6:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2288      	movs	r2, #136	@ 0x88
 80032ec:	2120      	movs	r1, #32
 80032ee:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	0018      	movs	r0, r3
 80032fa:	f7ff fbf7 	bl	8002aec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032fe:	46c0      	nop			@ (mov r8, r8)
 8003300:	46bd      	mov	sp, r7
 8003302:	b006      	add	sp, #24
 8003304:	bd80      	pop	{r7, pc}

08003306 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b082      	sub	sp, #8
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800330e:	46c0      	nop			@ (mov r8, r8)
 8003310:	46bd      	mov	sp, r7
 8003312:	b002      	add	sp, #8
 8003314:	bd80      	pop	{r7, pc}

08003316 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b082      	sub	sp, #8
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800331e:	46c0      	nop			@ (mov r8, r8)
 8003320:	46bd      	mov	sp, r7
 8003322:	b002      	add	sp, #8
 8003324:	bd80      	pop	{r7, pc}

08003326 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b082      	sub	sp, #8
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800332e:	46c0      	nop			@ (mov r8, r8)
 8003330:	46bd      	mov	sp, r7
 8003332:	b002      	add	sp, #8
 8003334:	bd80      	pop	{r7, pc}
	...

08003338 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2284      	movs	r2, #132	@ 0x84
 8003344:	5c9b      	ldrb	r3, [r3, r2]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d101      	bne.n	800334e <HAL_UARTEx_DisableFifoMode+0x16>
 800334a:	2302      	movs	r3, #2
 800334c:	e027      	b.n	800339e <HAL_UARTEx_DisableFifoMode+0x66>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2284      	movs	r2, #132	@ 0x84
 8003352:	2101      	movs	r1, #1
 8003354:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2288      	movs	r2, #136	@ 0x88
 800335a:	2124      	movs	r1, #36	@ 0x24
 800335c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2101      	movs	r1, #1
 8003372:	438a      	bics	r2, r1
 8003374:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	4a0b      	ldr	r2, [pc, #44]	@ (80033a8 <HAL_UARTEx_DisableFifoMode+0x70>)
 800337a:	4013      	ands	r3, r2
 800337c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2288      	movs	r2, #136	@ 0x88
 8003390:	2120      	movs	r1, #32
 8003392:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2284      	movs	r2, #132	@ 0x84
 8003398:	2100      	movs	r1, #0
 800339a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	0018      	movs	r0, r3
 80033a0:	46bd      	mov	sp, r7
 80033a2:	b004      	add	sp, #16
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	dfffffff 	.word	0xdfffffff

080033ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2284      	movs	r2, #132	@ 0x84
 80033ba:	5c9b      	ldrb	r3, [r3, r2]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d101      	bne.n	80033c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80033c0:	2302      	movs	r3, #2
 80033c2:	e02e      	b.n	8003422 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2284      	movs	r2, #132	@ 0x84
 80033c8:	2101      	movs	r1, #1
 80033ca:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2288      	movs	r2, #136	@ 0x88
 80033d0:	2124      	movs	r1, #36	@ 0x24
 80033d2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2101      	movs	r1, #1
 80033e8:	438a      	bics	r2, r1
 80033ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	08d9      	lsrs	r1, r3, #3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	0018      	movs	r0, r3
 8003404:	f000 f854 	bl	80034b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2288      	movs	r2, #136	@ 0x88
 8003414:	2120      	movs	r1, #32
 8003416:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2284      	movs	r2, #132	@ 0x84
 800341c:	2100      	movs	r1, #0
 800341e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	0018      	movs	r0, r3
 8003424:	46bd      	mov	sp, r7
 8003426:	b004      	add	sp, #16
 8003428:	bd80      	pop	{r7, pc}
	...

0800342c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2284      	movs	r2, #132	@ 0x84
 800343a:	5c9b      	ldrb	r3, [r3, r2]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d101      	bne.n	8003444 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003440:	2302      	movs	r3, #2
 8003442:	e02f      	b.n	80034a4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2284      	movs	r2, #132	@ 0x84
 8003448:	2101      	movs	r1, #1
 800344a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2288      	movs	r2, #136	@ 0x88
 8003450:	2124      	movs	r1, #36	@ 0x24
 8003452:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2101      	movs	r1, #1
 8003468:	438a      	bics	r2, r1
 800346a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	4a0e      	ldr	r2, [pc, #56]	@ (80034ac <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003474:	4013      	ands	r3, r2
 8003476:	0019      	movs	r1, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	430a      	orrs	r2, r1
 8003480:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	0018      	movs	r0, r3
 8003486:	f000 f813 	bl	80034b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2288      	movs	r2, #136	@ 0x88
 8003496:	2120      	movs	r1, #32
 8003498:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2284      	movs	r2, #132	@ 0x84
 800349e:	2100      	movs	r1, #0
 80034a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	0018      	movs	r0, r3
 80034a6:	46bd      	mov	sp, r7
 80034a8:	b004      	add	sp, #16
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	f1ffffff 	.word	0xf1ffffff

080034b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80034b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d108      	bne.n	80034d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	226a      	movs	r2, #106	@ 0x6a
 80034c4:	2101      	movs	r1, #1
 80034c6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2268      	movs	r2, #104	@ 0x68
 80034cc:	2101      	movs	r1, #1
 80034ce:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80034d0:	e043      	b.n	800355a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80034d2:	260f      	movs	r6, #15
 80034d4:	19bb      	adds	r3, r7, r6
 80034d6:	2208      	movs	r2, #8
 80034d8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80034da:	200e      	movs	r0, #14
 80034dc:	183b      	adds	r3, r7, r0
 80034de:	2208      	movs	r2, #8
 80034e0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	0e5b      	lsrs	r3, r3, #25
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	240d      	movs	r4, #13
 80034ee:	193b      	adds	r3, r7, r4
 80034f0:	2107      	movs	r1, #7
 80034f2:	400a      	ands	r2, r1
 80034f4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	0f5b      	lsrs	r3, r3, #29
 80034fe:	b2da      	uxtb	r2, r3
 8003500:	250c      	movs	r5, #12
 8003502:	197b      	adds	r3, r7, r5
 8003504:	2107      	movs	r1, #7
 8003506:	400a      	ands	r2, r1
 8003508:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800350a:	183b      	adds	r3, r7, r0
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	197a      	adds	r2, r7, r5
 8003510:	7812      	ldrb	r2, [r2, #0]
 8003512:	4914      	ldr	r1, [pc, #80]	@ (8003564 <UARTEx_SetNbDataToProcess+0xb4>)
 8003514:	5c8a      	ldrb	r2, [r1, r2]
 8003516:	435a      	muls	r2, r3
 8003518:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800351a:	197b      	adds	r3, r7, r5
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	4a12      	ldr	r2, [pc, #72]	@ (8003568 <UARTEx_SetNbDataToProcess+0xb8>)
 8003520:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003522:	0019      	movs	r1, r3
 8003524:	f7fc fe84 	bl	8000230 <__divsi3>
 8003528:	0003      	movs	r3, r0
 800352a:	b299      	uxth	r1, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	226a      	movs	r2, #106	@ 0x6a
 8003530:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003532:	19bb      	adds	r3, r7, r6
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	193a      	adds	r2, r7, r4
 8003538:	7812      	ldrb	r2, [r2, #0]
 800353a:	490a      	ldr	r1, [pc, #40]	@ (8003564 <UARTEx_SetNbDataToProcess+0xb4>)
 800353c:	5c8a      	ldrb	r2, [r1, r2]
 800353e:	435a      	muls	r2, r3
 8003540:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003542:	193b      	adds	r3, r7, r4
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	4a08      	ldr	r2, [pc, #32]	@ (8003568 <UARTEx_SetNbDataToProcess+0xb8>)
 8003548:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800354a:	0019      	movs	r1, r3
 800354c:	f7fc fe70 	bl	8000230 <__divsi3>
 8003550:	0003      	movs	r3, r0
 8003552:	b299      	uxth	r1, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2268      	movs	r2, #104	@ 0x68
 8003558:	5299      	strh	r1, [r3, r2]
}
 800355a:	46c0      	nop			@ (mov r8, r8)
 800355c:	46bd      	mov	sp, r7
 800355e:	b005      	add	sp, #20
 8003560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003562:	46c0      	nop			@ (mov r8, r8)
 8003564:	080048f8 	.word	0x080048f8
 8003568:	08004900 	.word	0x08004900

0800356c <sniprintf>:
 800356c:	b40c      	push	{r2, r3}
 800356e:	b530      	push	{r4, r5, lr}
 8003570:	4b18      	ldr	r3, [pc, #96]	@ (80035d4 <sniprintf+0x68>)
 8003572:	000c      	movs	r4, r1
 8003574:	681d      	ldr	r5, [r3, #0]
 8003576:	b09d      	sub	sp, #116	@ 0x74
 8003578:	2900      	cmp	r1, #0
 800357a:	da08      	bge.n	800358e <sniprintf+0x22>
 800357c:	238b      	movs	r3, #139	@ 0x8b
 800357e:	2001      	movs	r0, #1
 8003580:	602b      	str	r3, [r5, #0]
 8003582:	4240      	negs	r0, r0
 8003584:	b01d      	add	sp, #116	@ 0x74
 8003586:	bc30      	pop	{r4, r5}
 8003588:	bc08      	pop	{r3}
 800358a:	b002      	add	sp, #8
 800358c:	4718      	bx	r3
 800358e:	2382      	movs	r3, #130	@ 0x82
 8003590:	466a      	mov	r2, sp
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	8293      	strh	r3, [r2, #20]
 8003596:	2300      	movs	r3, #0
 8003598:	9002      	str	r0, [sp, #8]
 800359a:	931b      	str	r3, [sp, #108]	@ 0x6c
 800359c:	9006      	str	r0, [sp, #24]
 800359e:	4299      	cmp	r1, r3
 80035a0:	d000      	beq.n	80035a4 <sniprintf+0x38>
 80035a2:	1e4b      	subs	r3, r1, #1
 80035a4:	9304      	str	r3, [sp, #16]
 80035a6:	9307      	str	r3, [sp, #28]
 80035a8:	2301      	movs	r3, #1
 80035aa:	466a      	mov	r2, sp
 80035ac:	425b      	negs	r3, r3
 80035ae:	82d3      	strh	r3, [r2, #22]
 80035b0:	0028      	movs	r0, r5
 80035b2:	ab21      	add	r3, sp, #132	@ 0x84
 80035b4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80035b6:	a902      	add	r1, sp, #8
 80035b8:	9301      	str	r3, [sp, #4]
 80035ba:	f000 f977 	bl	80038ac <_svfiprintf_r>
 80035be:	1c43      	adds	r3, r0, #1
 80035c0:	da01      	bge.n	80035c6 <sniprintf+0x5a>
 80035c2:	238b      	movs	r3, #139	@ 0x8b
 80035c4:	602b      	str	r3, [r5, #0]
 80035c6:	2c00      	cmp	r4, #0
 80035c8:	d0dc      	beq.n	8003584 <sniprintf+0x18>
 80035ca:	2200      	movs	r2, #0
 80035cc:	9b02      	ldr	r3, [sp, #8]
 80035ce:	701a      	strb	r2, [r3, #0]
 80035d0:	e7d8      	b.n	8003584 <sniprintf+0x18>
 80035d2:	46c0      	nop			@ (mov r8, r8)
 80035d4:	2000001c 	.word	0x2000001c

080035d8 <std>:
 80035d8:	2300      	movs	r3, #0
 80035da:	b510      	push	{r4, lr}
 80035dc:	0004      	movs	r4, r0
 80035de:	6003      	str	r3, [r0, #0]
 80035e0:	6043      	str	r3, [r0, #4]
 80035e2:	6083      	str	r3, [r0, #8]
 80035e4:	8181      	strh	r1, [r0, #12]
 80035e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80035e8:	81c2      	strh	r2, [r0, #14]
 80035ea:	6103      	str	r3, [r0, #16]
 80035ec:	6143      	str	r3, [r0, #20]
 80035ee:	6183      	str	r3, [r0, #24]
 80035f0:	0019      	movs	r1, r3
 80035f2:	2208      	movs	r2, #8
 80035f4:	305c      	adds	r0, #92	@ 0x5c
 80035f6:	f000 f8c3 	bl	8003780 <memset>
 80035fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003628 <std+0x50>)
 80035fc:	6224      	str	r4, [r4, #32]
 80035fe:	6263      	str	r3, [r4, #36]	@ 0x24
 8003600:	4b0a      	ldr	r3, [pc, #40]	@ (800362c <std+0x54>)
 8003602:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003604:	4b0a      	ldr	r3, [pc, #40]	@ (8003630 <std+0x58>)
 8003606:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003608:	4b0a      	ldr	r3, [pc, #40]	@ (8003634 <std+0x5c>)
 800360a:	6323      	str	r3, [r4, #48]	@ 0x30
 800360c:	4b0a      	ldr	r3, [pc, #40]	@ (8003638 <std+0x60>)
 800360e:	429c      	cmp	r4, r3
 8003610:	d005      	beq.n	800361e <std+0x46>
 8003612:	4b0a      	ldr	r3, [pc, #40]	@ (800363c <std+0x64>)
 8003614:	429c      	cmp	r4, r3
 8003616:	d002      	beq.n	800361e <std+0x46>
 8003618:	4b09      	ldr	r3, [pc, #36]	@ (8003640 <std+0x68>)
 800361a:	429c      	cmp	r4, r3
 800361c:	d103      	bne.n	8003626 <std+0x4e>
 800361e:	0020      	movs	r0, r4
 8003620:	3058      	adds	r0, #88	@ 0x58
 8003622:	f000 f8df 	bl	80037e4 <__retarget_lock_init_recursive>
 8003626:	bd10      	pop	{r4, pc}
 8003628:	080042f1 	.word	0x080042f1
 800362c:	08004319 	.word	0x08004319
 8003630:	08004351 	.word	0x08004351
 8003634:	0800437d 	.word	0x0800437d
 8003638:	200009f4 	.word	0x200009f4
 800363c:	20000a5c 	.word	0x20000a5c
 8003640:	20000ac4 	.word	0x20000ac4

08003644 <stdio_exit_handler>:
 8003644:	b510      	push	{r4, lr}
 8003646:	4a03      	ldr	r2, [pc, #12]	@ (8003654 <stdio_exit_handler+0x10>)
 8003648:	4903      	ldr	r1, [pc, #12]	@ (8003658 <stdio_exit_handler+0x14>)
 800364a:	4804      	ldr	r0, [pc, #16]	@ (800365c <stdio_exit_handler+0x18>)
 800364c:	f000 f86c 	bl	8003728 <_fwalk_sglue>
 8003650:	bd10      	pop	{r4, pc}
 8003652:	46c0      	nop			@ (mov r8, r8)
 8003654:	20000010 	.word	0x20000010
 8003658:	08004279 	.word	0x08004279
 800365c:	20000020 	.word	0x20000020

08003660 <cleanup_stdio>:
 8003660:	6841      	ldr	r1, [r0, #4]
 8003662:	4b0b      	ldr	r3, [pc, #44]	@ (8003690 <cleanup_stdio+0x30>)
 8003664:	b510      	push	{r4, lr}
 8003666:	0004      	movs	r4, r0
 8003668:	4299      	cmp	r1, r3
 800366a:	d001      	beq.n	8003670 <cleanup_stdio+0x10>
 800366c:	f000 fe04 	bl	8004278 <_fflush_r>
 8003670:	68a1      	ldr	r1, [r4, #8]
 8003672:	4b08      	ldr	r3, [pc, #32]	@ (8003694 <cleanup_stdio+0x34>)
 8003674:	4299      	cmp	r1, r3
 8003676:	d002      	beq.n	800367e <cleanup_stdio+0x1e>
 8003678:	0020      	movs	r0, r4
 800367a:	f000 fdfd 	bl	8004278 <_fflush_r>
 800367e:	68e1      	ldr	r1, [r4, #12]
 8003680:	4b05      	ldr	r3, [pc, #20]	@ (8003698 <cleanup_stdio+0x38>)
 8003682:	4299      	cmp	r1, r3
 8003684:	d002      	beq.n	800368c <cleanup_stdio+0x2c>
 8003686:	0020      	movs	r0, r4
 8003688:	f000 fdf6 	bl	8004278 <_fflush_r>
 800368c:	bd10      	pop	{r4, pc}
 800368e:	46c0      	nop			@ (mov r8, r8)
 8003690:	200009f4 	.word	0x200009f4
 8003694:	20000a5c 	.word	0x20000a5c
 8003698:	20000ac4 	.word	0x20000ac4

0800369c <global_stdio_init.part.0>:
 800369c:	b510      	push	{r4, lr}
 800369e:	4b09      	ldr	r3, [pc, #36]	@ (80036c4 <global_stdio_init.part.0+0x28>)
 80036a0:	4a09      	ldr	r2, [pc, #36]	@ (80036c8 <global_stdio_init.part.0+0x2c>)
 80036a2:	2104      	movs	r1, #4
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	4809      	ldr	r0, [pc, #36]	@ (80036cc <global_stdio_init.part.0+0x30>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	f7ff ff95 	bl	80035d8 <std>
 80036ae:	2201      	movs	r2, #1
 80036b0:	2109      	movs	r1, #9
 80036b2:	4807      	ldr	r0, [pc, #28]	@ (80036d0 <global_stdio_init.part.0+0x34>)
 80036b4:	f7ff ff90 	bl	80035d8 <std>
 80036b8:	2202      	movs	r2, #2
 80036ba:	2112      	movs	r1, #18
 80036bc:	4805      	ldr	r0, [pc, #20]	@ (80036d4 <global_stdio_init.part.0+0x38>)
 80036be:	f7ff ff8b 	bl	80035d8 <std>
 80036c2:	bd10      	pop	{r4, pc}
 80036c4:	20000b2c 	.word	0x20000b2c
 80036c8:	08003645 	.word	0x08003645
 80036cc:	200009f4 	.word	0x200009f4
 80036d0:	20000a5c 	.word	0x20000a5c
 80036d4:	20000ac4 	.word	0x20000ac4

080036d8 <__sfp_lock_acquire>:
 80036d8:	b510      	push	{r4, lr}
 80036da:	4802      	ldr	r0, [pc, #8]	@ (80036e4 <__sfp_lock_acquire+0xc>)
 80036dc:	f000 f883 	bl	80037e6 <__retarget_lock_acquire_recursive>
 80036e0:	bd10      	pop	{r4, pc}
 80036e2:	46c0      	nop			@ (mov r8, r8)
 80036e4:	20000b31 	.word	0x20000b31

080036e8 <__sfp_lock_release>:
 80036e8:	b510      	push	{r4, lr}
 80036ea:	4802      	ldr	r0, [pc, #8]	@ (80036f4 <__sfp_lock_release+0xc>)
 80036ec:	f000 f87c 	bl	80037e8 <__retarget_lock_release_recursive>
 80036f0:	bd10      	pop	{r4, pc}
 80036f2:	46c0      	nop			@ (mov r8, r8)
 80036f4:	20000b31 	.word	0x20000b31

080036f8 <__sinit>:
 80036f8:	b510      	push	{r4, lr}
 80036fa:	0004      	movs	r4, r0
 80036fc:	f7ff ffec 	bl	80036d8 <__sfp_lock_acquire>
 8003700:	6a23      	ldr	r3, [r4, #32]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d002      	beq.n	800370c <__sinit+0x14>
 8003706:	f7ff ffef 	bl	80036e8 <__sfp_lock_release>
 800370a:	bd10      	pop	{r4, pc}
 800370c:	4b04      	ldr	r3, [pc, #16]	@ (8003720 <__sinit+0x28>)
 800370e:	6223      	str	r3, [r4, #32]
 8003710:	4b04      	ldr	r3, [pc, #16]	@ (8003724 <__sinit+0x2c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1f6      	bne.n	8003706 <__sinit+0xe>
 8003718:	f7ff ffc0 	bl	800369c <global_stdio_init.part.0>
 800371c:	e7f3      	b.n	8003706 <__sinit+0xe>
 800371e:	46c0      	nop			@ (mov r8, r8)
 8003720:	08003661 	.word	0x08003661
 8003724:	20000b2c 	.word	0x20000b2c

08003728 <_fwalk_sglue>:
 8003728:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800372a:	0014      	movs	r4, r2
 800372c:	2600      	movs	r6, #0
 800372e:	9000      	str	r0, [sp, #0]
 8003730:	9101      	str	r1, [sp, #4]
 8003732:	68a5      	ldr	r5, [r4, #8]
 8003734:	6867      	ldr	r7, [r4, #4]
 8003736:	3f01      	subs	r7, #1
 8003738:	d504      	bpl.n	8003744 <_fwalk_sglue+0x1c>
 800373a:	6824      	ldr	r4, [r4, #0]
 800373c:	2c00      	cmp	r4, #0
 800373e:	d1f8      	bne.n	8003732 <_fwalk_sglue+0xa>
 8003740:	0030      	movs	r0, r6
 8003742:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003744:	89ab      	ldrh	r3, [r5, #12]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d908      	bls.n	800375c <_fwalk_sglue+0x34>
 800374a:	220e      	movs	r2, #14
 800374c:	5eab      	ldrsh	r3, [r5, r2]
 800374e:	3301      	adds	r3, #1
 8003750:	d004      	beq.n	800375c <_fwalk_sglue+0x34>
 8003752:	0029      	movs	r1, r5
 8003754:	9800      	ldr	r0, [sp, #0]
 8003756:	9b01      	ldr	r3, [sp, #4]
 8003758:	4798      	blx	r3
 800375a:	4306      	orrs	r6, r0
 800375c:	3568      	adds	r5, #104	@ 0x68
 800375e:	e7ea      	b.n	8003736 <_fwalk_sglue+0xe>

08003760 <iprintf>:
 8003760:	b40f      	push	{r0, r1, r2, r3}
 8003762:	b507      	push	{r0, r1, r2, lr}
 8003764:	4905      	ldr	r1, [pc, #20]	@ (800377c <iprintf+0x1c>)
 8003766:	ab04      	add	r3, sp, #16
 8003768:	6808      	ldr	r0, [r1, #0]
 800376a:	cb04      	ldmia	r3!, {r2}
 800376c:	6881      	ldr	r1, [r0, #8]
 800376e:	9301      	str	r3, [sp, #4]
 8003770:	f000 f9c2 	bl	8003af8 <_vfiprintf_r>
 8003774:	b003      	add	sp, #12
 8003776:	bc08      	pop	{r3}
 8003778:	b004      	add	sp, #16
 800377a:	4718      	bx	r3
 800377c:	2000001c 	.word	0x2000001c

08003780 <memset>:
 8003780:	0003      	movs	r3, r0
 8003782:	1882      	adds	r2, r0, r2
 8003784:	4293      	cmp	r3, r2
 8003786:	d100      	bne.n	800378a <memset+0xa>
 8003788:	4770      	bx	lr
 800378a:	7019      	strb	r1, [r3, #0]
 800378c:	3301      	adds	r3, #1
 800378e:	e7f9      	b.n	8003784 <memset+0x4>

08003790 <__errno>:
 8003790:	4b01      	ldr	r3, [pc, #4]	@ (8003798 <__errno+0x8>)
 8003792:	6818      	ldr	r0, [r3, #0]
 8003794:	4770      	bx	lr
 8003796:	46c0      	nop			@ (mov r8, r8)
 8003798:	2000001c 	.word	0x2000001c

0800379c <__libc_init_array>:
 800379c:	b570      	push	{r4, r5, r6, lr}
 800379e:	2600      	movs	r6, #0
 80037a0:	4c0c      	ldr	r4, [pc, #48]	@ (80037d4 <__libc_init_array+0x38>)
 80037a2:	4d0d      	ldr	r5, [pc, #52]	@ (80037d8 <__libc_init_array+0x3c>)
 80037a4:	1b64      	subs	r4, r4, r5
 80037a6:	10a4      	asrs	r4, r4, #2
 80037a8:	42a6      	cmp	r6, r4
 80037aa:	d109      	bne.n	80037c0 <__libc_init_array+0x24>
 80037ac:	2600      	movs	r6, #0
 80037ae:	f001 f823 	bl	80047f8 <_init>
 80037b2:	4c0a      	ldr	r4, [pc, #40]	@ (80037dc <__libc_init_array+0x40>)
 80037b4:	4d0a      	ldr	r5, [pc, #40]	@ (80037e0 <__libc_init_array+0x44>)
 80037b6:	1b64      	subs	r4, r4, r5
 80037b8:	10a4      	asrs	r4, r4, #2
 80037ba:	42a6      	cmp	r6, r4
 80037bc:	d105      	bne.n	80037ca <__libc_init_array+0x2e>
 80037be:	bd70      	pop	{r4, r5, r6, pc}
 80037c0:	00b3      	lsls	r3, r6, #2
 80037c2:	58eb      	ldr	r3, [r5, r3]
 80037c4:	4798      	blx	r3
 80037c6:	3601      	adds	r6, #1
 80037c8:	e7ee      	b.n	80037a8 <__libc_init_array+0xc>
 80037ca:	00b3      	lsls	r3, r6, #2
 80037cc:	58eb      	ldr	r3, [r5, r3]
 80037ce:	4798      	blx	r3
 80037d0:	3601      	adds	r6, #1
 80037d2:	e7f2      	b.n	80037ba <__libc_init_array+0x1e>
 80037d4:	0800493c 	.word	0x0800493c
 80037d8:	0800493c 	.word	0x0800493c
 80037dc:	08004940 	.word	0x08004940
 80037e0:	0800493c 	.word	0x0800493c

080037e4 <__retarget_lock_init_recursive>:
 80037e4:	4770      	bx	lr

080037e6 <__retarget_lock_acquire_recursive>:
 80037e6:	4770      	bx	lr

080037e8 <__retarget_lock_release_recursive>:
 80037e8:	4770      	bx	lr
	...

080037ec <__ssputs_r>:
 80037ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037ee:	688e      	ldr	r6, [r1, #8]
 80037f0:	b085      	sub	sp, #20
 80037f2:	001f      	movs	r7, r3
 80037f4:	000c      	movs	r4, r1
 80037f6:	680b      	ldr	r3, [r1, #0]
 80037f8:	9002      	str	r0, [sp, #8]
 80037fa:	9203      	str	r2, [sp, #12]
 80037fc:	42be      	cmp	r6, r7
 80037fe:	d830      	bhi.n	8003862 <__ssputs_r+0x76>
 8003800:	210c      	movs	r1, #12
 8003802:	5e62      	ldrsh	r2, [r4, r1]
 8003804:	2190      	movs	r1, #144	@ 0x90
 8003806:	00c9      	lsls	r1, r1, #3
 8003808:	420a      	tst	r2, r1
 800380a:	d028      	beq.n	800385e <__ssputs_r+0x72>
 800380c:	2003      	movs	r0, #3
 800380e:	6921      	ldr	r1, [r4, #16]
 8003810:	1a5b      	subs	r3, r3, r1
 8003812:	9301      	str	r3, [sp, #4]
 8003814:	6963      	ldr	r3, [r4, #20]
 8003816:	4343      	muls	r3, r0
 8003818:	9801      	ldr	r0, [sp, #4]
 800381a:	0fdd      	lsrs	r5, r3, #31
 800381c:	18ed      	adds	r5, r5, r3
 800381e:	1c7b      	adds	r3, r7, #1
 8003820:	181b      	adds	r3, r3, r0
 8003822:	106d      	asrs	r5, r5, #1
 8003824:	42ab      	cmp	r3, r5
 8003826:	d900      	bls.n	800382a <__ssputs_r+0x3e>
 8003828:	001d      	movs	r5, r3
 800382a:	0552      	lsls	r2, r2, #21
 800382c:	d528      	bpl.n	8003880 <__ssputs_r+0x94>
 800382e:	0029      	movs	r1, r5
 8003830:	9802      	ldr	r0, [sp, #8]
 8003832:	f000 fa9f 	bl	8003d74 <_malloc_r>
 8003836:	1e06      	subs	r6, r0, #0
 8003838:	d02c      	beq.n	8003894 <__ssputs_r+0xa8>
 800383a:	9a01      	ldr	r2, [sp, #4]
 800383c:	6921      	ldr	r1, [r4, #16]
 800383e:	f000 ff80 	bl	8004742 <memcpy>
 8003842:	89a2      	ldrh	r2, [r4, #12]
 8003844:	4b18      	ldr	r3, [pc, #96]	@ (80038a8 <__ssputs_r+0xbc>)
 8003846:	401a      	ands	r2, r3
 8003848:	2380      	movs	r3, #128	@ 0x80
 800384a:	4313      	orrs	r3, r2
 800384c:	81a3      	strh	r3, [r4, #12]
 800384e:	9b01      	ldr	r3, [sp, #4]
 8003850:	6126      	str	r6, [r4, #16]
 8003852:	18f6      	adds	r6, r6, r3
 8003854:	6026      	str	r6, [r4, #0]
 8003856:	003e      	movs	r6, r7
 8003858:	6165      	str	r5, [r4, #20]
 800385a:	1aed      	subs	r5, r5, r3
 800385c:	60a5      	str	r5, [r4, #8]
 800385e:	42be      	cmp	r6, r7
 8003860:	d900      	bls.n	8003864 <__ssputs_r+0x78>
 8003862:	003e      	movs	r6, r7
 8003864:	0032      	movs	r2, r6
 8003866:	9903      	ldr	r1, [sp, #12]
 8003868:	6820      	ldr	r0, [r4, #0]
 800386a:	f000 fec8 	bl	80045fe <memmove>
 800386e:	2000      	movs	r0, #0
 8003870:	68a3      	ldr	r3, [r4, #8]
 8003872:	1b9b      	subs	r3, r3, r6
 8003874:	60a3      	str	r3, [r4, #8]
 8003876:	6823      	ldr	r3, [r4, #0]
 8003878:	199b      	adds	r3, r3, r6
 800387a:	6023      	str	r3, [r4, #0]
 800387c:	b005      	add	sp, #20
 800387e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003880:	002a      	movs	r2, r5
 8003882:	9802      	ldr	r0, [sp, #8]
 8003884:	f000 fd80 	bl	8004388 <_realloc_r>
 8003888:	1e06      	subs	r6, r0, #0
 800388a:	d1e0      	bne.n	800384e <__ssputs_r+0x62>
 800388c:	6921      	ldr	r1, [r4, #16]
 800388e:	9802      	ldr	r0, [sp, #8]
 8003890:	f000 ff60 	bl	8004754 <_free_r>
 8003894:	230c      	movs	r3, #12
 8003896:	2001      	movs	r0, #1
 8003898:	9a02      	ldr	r2, [sp, #8]
 800389a:	4240      	negs	r0, r0
 800389c:	6013      	str	r3, [r2, #0]
 800389e:	89a2      	ldrh	r2, [r4, #12]
 80038a0:	3334      	adds	r3, #52	@ 0x34
 80038a2:	4313      	orrs	r3, r2
 80038a4:	81a3      	strh	r3, [r4, #12]
 80038a6:	e7e9      	b.n	800387c <__ssputs_r+0x90>
 80038a8:	fffffb7f 	.word	0xfffffb7f

080038ac <_svfiprintf_r>:
 80038ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038ae:	b0a1      	sub	sp, #132	@ 0x84
 80038b0:	9003      	str	r0, [sp, #12]
 80038b2:	001d      	movs	r5, r3
 80038b4:	898b      	ldrh	r3, [r1, #12]
 80038b6:	000f      	movs	r7, r1
 80038b8:	0016      	movs	r6, r2
 80038ba:	061b      	lsls	r3, r3, #24
 80038bc:	d511      	bpl.n	80038e2 <_svfiprintf_r+0x36>
 80038be:	690b      	ldr	r3, [r1, #16]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10e      	bne.n	80038e2 <_svfiprintf_r+0x36>
 80038c4:	2140      	movs	r1, #64	@ 0x40
 80038c6:	f000 fa55 	bl	8003d74 <_malloc_r>
 80038ca:	6038      	str	r0, [r7, #0]
 80038cc:	6138      	str	r0, [r7, #16]
 80038ce:	2800      	cmp	r0, #0
 80038d0:	d105      	bne.n	80038de <_svfiprintf_r+0x32>
 80038d2:	230c      	movs	r3, #12
 80038d4:	9a03      	ldr	r2, [sp, #12]
 80038d6:	6013      	str	r3, [r2, #0]
 80038d8:	2001      	movs	r0, #1
 80038da:	4240      	negs	r0, r0
 80038dc:	e0cf      	b.n	8003a7e <_svfiprintf_r+0x1d2>
 80038de:	2340      	movs	r3, #64	@ 0x40
 80038e0:	617b      	str	r3, [r7, #20]
 80038e2:	2300      	movs	r3, #0
 80038e4:	ac08      	add	r4, sp, #32
 80038e6:	6163      	str	r3, [r4, #20]
 80038e8:	3320      	adds	r3, #32
 80038ea:	7663      	strb	r3, [r4, #25]
 80038ec:	3310      	adds	r3, #16
 80038ee:	76a3      	strb	r3, [r4, #26]
 80038f0:	9507      	str	r5, [sp, #28]
 80038f2:	0035      	movs	r5, r6
 80038f4:	782b      	ldrb	r3, [r5, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <_svfiprintf_r+0x52>
 80038fa:	2b25      	cmp	r3, #37	@ 0x25
 80038fc:	d148      	bne.n	8003990 <_svfiprintf_r+0xe4>
 80038fe:	1bab      	subs	r3, r5, r6
 8003900:	9305      	str	r3, [sp, #20]
 8003902:	42b5      	cmp	r5, r6
 8003904:	d00b      	beq.n	800391e <_svfiprintf_r+0x72>
 8003906:	0032      	movs	r2, r6
 8003908:	0039      	movs	r1, r7
 800390a:	9803      	ldr	r0, [sp, #12]
 800390c:	f7ff ff6e 	bl	80037ec <__ssputs_r>
 8003910:	3001      	adds	r0, #1
 8003912:	d100      	bne.n	8003916 <_svfiprintf_r+0x6a>
 8003914:	e0ae      	b.n	8003a74 <_svfiprintf_r+0x1c8>
 8003916:	6963      	ldr	r3, [r4, #20]
 8003918:	9a05      	ldr	r2, [sp, #20]
 800391a:	189b      	adds	r3, r3, r2
 800391c:	6163      	str	r3, [r4, #20]
 800391e:	782b      	ldrb	r3, [r5, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d100      	bne.n	8003926 <_svfiprintf_r+0x7a>
 8003924:	e0a6      	b.n	8003a74 <_svfiprintf_r+0x1c8>
 8003926:	2201      	movs	r2, #1
 8003928:	2300      	movs	r3, #0
 800392a:	4252      	negs	r2, r2
 800392c:	6062      	str	r2, [r4, #4]
 800392e:	a904      	add	r1, sp, #16
 8003930:	3254      	adds	r2, #84	@ 0x54
 8003932:	1852      	adds	r2, r2, r1
 8003934:	1c6e      	adds	r6, r5, #1
 8003936:	6023      	str	r3, [r4, #0]
 8003938:	60e3      	str	r3, [r4, #12]
 800393a:	60a3      	str	r3, [r4, #8]
 800393c:	7013      	strb	r3, [r2, #0]
 800393e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003940:	4b54      	ldr	r3, [pc, #336]	@ (8003a94 <_svfiprintf_r+0x1e8>)
 8003942:	2205      	movs	r2, #5
 8003944:	0018      	movs	r0, r3
 8003946:	7831      	ldrb	r1, [r6, #0]
 8003948:	9305      	str	r3, [sp, #20]
 800394a:	f000 feef 	bl	800472c <memchr>
 800394e:	1c75      	adds	r5, r6, #1
 8003950:	2800      	cmp	r0, #0
 8003952:	d11f      	bne.n	8003994 <_svfiprintf_r+0xe8>
 8003954:	6822      	ldr	r2, [r4, #0]
 8003956:	06d3      	lsls	r3, r2, #27
 8003958:	d504      	bpl.n	8003964 <_svfiprintf_r+0xb8>
 800395a:	2353      	movs	r3, #83	@ 0x53
 800395c:	a904      	add	r1, sp, #16
 800395e:	185b      	adds	r3, r3, r1
 8003960:	2120      	movs	r1, #32
 8003962:	7019      	strb	r1, [r3, #0]
 8003964:	0713      	lsls	r3, r2, #28
 8003966:	d504      	bpl.n	8003972 <_svfiprintf_r+0xc6>
 8003968:	2353      	movs	r3, #83	@ 0x53
 800396a:	a904      	add	r1, sp, #16
 800396c:	185b      	adds	r3, r3, r1
 800396e:	212b      	movs	r1, #43	@ 0x2b
 8003970:	7019      	strb	r1, [r3, #0]
 8003972:	7833      	ldrb	r3, [r6, #0]
 8003974:	2b2a      	cmp	r3, #42	@ 0x2a
 8003976:	d016      	beq.n	80039a6 <_svfiprintf_r+0xfa>
 8003978:	0035      	movs	r5, r6
 800397a:	2100      	movs	r1, #0
 800397c:	200a      	movs	r0, #10
 800397e:	68e3      	ldr	r3, [r4, #12]
 8003980:	782a      	ldrb	r2, [r5, #0]
 8003982:	1c6e      	adds	r6, r5, #1
 8003984:	3a30      	subs	r2, #48	@ 0x30
 8003986:	2a09      	cmp	r2, #9
 8003988:	d950      	bls.n	8003a2c <_svfiprintf_r+0x180>
 800398a:	2900      	cmp	r1, #0
 800398c:	d111      	bne.n	80039b2 <_svfiprintf_r+0x106>
 800398e:	e017      	b.n	80039c0 <_svfiprintf_r+0x114>
 8003990:	3501      	adds	r5, #1
 8003992:	e7af      	b.n	80038f4 <_svfiprintf_r+0x48>
 8003994:	9b05      	ldr	r3, [sp, #20]
 8003996:	6822      	ldr	r2, [r4, #0]
 8003998:	1ac0      	subs	r0, r0, r3
 800399a:	2301      	movs	r3, #1
 800399c:	4083      	lsls	r3, r0
 800399e:	4313      	orrs	r3, r2
 80039a0:	002e      	movs	r6, r5
 80039a2:	6023      	str	r3, [r4, #0]
 80039a4:	e7cc      	b.n	8003940 <_svfiprintf_r+0x94>
 80039a6:	9b07      	ldr	r3, [sp, #28]
 80039a8:	1d19      	adds	r1, r3, #4
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	9107      	str	r1, [sp, #28]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	db01      	blt.n	80039b6 <_svfiprintf_r+0x10a>
 80039b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80039b4:	e004      	b.n	80039c0 <_svfiprintf_r+0x114>
 80039b6:	425b      	negs	r3, r3
 80039b8:	60e3      	str	r3, [r4, #12]
 80039ba:	2302      	movs	r3, #2
 80039bc:	4313      	orrs	r3, r2
 80039be:	6023      	str	r3, [r4, #0]
 80039c0:	782b      	ldrb	r3, [r5, #0]
 80039c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80039c4:	d10c      	bne.n	80039e0 <_svfiprintf_r+0x134>
 80039c6:	786b      	ldrb	r3, [r5, #1]
 80039c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80039ca:	d134      	bne.n	8003a36 <_svfiprintf_r+0x18a>
 80039cc:	9b07      	ldr	r3, [sp, #28]
 80039ce:	3502      	adds	r5, #2
 80039d0:	1d1a      	adds	r2, r3, #4
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	9207      	str	r2, [sp, #28]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	da01      	bge.n	80039de <_svfiprintf_r+0x132>
 80039da:	2301      	movs	r3, #1
 80039dc:	425b      	negs	r3, r3
 80039de:	9309      	str	r3, [sp, #36]	@ 0x24
 80039e0:	4e2d      	ldr	r6, [pc, #180]	@ (8003a98 <_svfiprintf_r+0x1ec>)
 80039e2:	2203      	movs	r2, #3
 80039e4:	0030      	movs	r0, r6
 80039e6:	7829      	ldrb	r1, [r5, #0]
 80039e8:	f000 fea0 	bl	800472c <memchr>
 80039ec:	2800      	cmp	r0, #0
 80039ee:	d006      	beq.n	80039fe <_svfiprintf_r+0x152>
 80039f0:	2340      	movs	r3, #64	@ 0x40
 80039f2:	1b80      	subs	r0, r0, r6
 80039f4:	4083      	lsls	r3, r0
 80039f6:	6822      	ldr	r2, [r4, #0]
 80039f8:	3501      	adds	r5, #1
 80039fa:	4313      	orrs	r3, r2
 80039fc:	6023      	str	r3, [r4, #0]
 80039fe:	7829      	ldrb	r1, [r5, #0]
 8003a00:	2206      	movs	r2, #6
 8003a02:	4826      	ldr	r0, [pc, #152]	@ (8003a9c <_svfiprintf_r+0x1f0>)
 8003a04:	1c6e      	adds	r6, r5, #1
 8003a06:	7621      	strb	r1, [r4, #24]
 8003a08:	f000 fe90 	bl	800472c <memchr>
 8003a0c:	2800      	cmp	r0, #0
 8003a0e:	d038      	beq.n	8003a82 <_svfiprintf_r+0x1d6>
 8003a10:	4b23      	ldr	r3, [pc, #140]	@ (8003aa0 <_svfiprintf_r+0x1f4>)
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d122      	bne.n	8003a5c <_svfiprintf_r+0x1b0>
 8003a16:	2207      	movs	r2, #7
 8003a18:	9b07      	ldr	r3, [sp, #28]
 8003a1a:	3307      	adds	r3, #7
 8003a1c:	4393      	bics	r3, r2
 8003a1e:	3308      	adds	r3, #8
 8003a20:	9307      	str	r3, [sp, #28]
 8003a22:	6963      	ldr	r3, [r4, #20]
 8003a24:	9a04      	ldr	r2, [sp, #16]
 8003a26:	189b      	adds	r3, r3, r2
 8003a28:	6163      	str	r3, [r4, #20]
 8003a2a:	e762      	b.n	80038f2 <_svfiprintf_r+0x46>
 8003a2c:	4343      	muls	r3, r0
 8003a2e:	0035      	movs	r5, r6
 8003a30:	2101      	movs	r1, #1
 8003a32:	189b      	adds	r3, r3, r2
 8003a34:	e7a4      	b.n	8003980 <_svfiprintf_r+0xd4>
 8003a36:	2300      	movs	r3, #0
 8003a38:	200a      	movs	r0, #10
 8003a3a:	0019      	movs	r1, r3
 8003a3c:	3501      	adds	r5, #1
 8003a3e:	6063      	str	r3, [r4, #4]
 8003a40:	782a      	ldrb	r2, [r5, #0]
 8003a42:	1c6e      	adds	r6, r5, #1
 8003a44:	3a30      	subs	r2, #48	@ 0x30
 8003a46:	2a09      	cmp	r2, #9
 8003a48:	d903      	bls.n	8003a52 <_svfiprintf_r+0x1a6>
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0c8      	beq.n	80039e0 <_svfiprintf_r+0x134>
 8003a4e:	9109      	str	r1, [sp, #36]	@ 0x24
 8003a50:	e7c6      	b.n	80039e0 <_svfiprintf_r+0x134>
 8003a52:	4341      	muls	r1, r0
 8003a54:	0035      	movs	r5, r6
 8003a56:	2301      	movs	r3, #1
 8003a58:	1889      	adds	r1, r1, r2
 8003a5a:	e7f1      	b.n	8003a40 <_svfiprintf_r+0x194>
 8003a5c:	aa07      	add	r2, sp, #28
 8003a5e:	9200      	str	r2, [sp, #0]
 8003a60:	0021      	movs	r1, r4
 8003a62:	003a      	movs	r2, r7
 8003a64:	4b0f      	ldr	r3, [pc, #60]	@ (8003aa4 <_svfiprintf_r+0x1f8>)
 8003a66:	9803      	ldr	r0, [sp, #12]
 8003a68:	e000      	b.n	8003a6c <_svfiprintf_r+0x1c0>
 8003a6a:	bf00      	nop
 8003a6c:	9004      	str	r0, [sp, #16]
 8003a6e:	9b04      	ldr	r3, [sp, #16]
 8003a70:	3301      	adds	r3, #1
 8003a72:	d1d6      	bne.n	8003a22 <_svfiprintf_r+0x176>
 8003a74:	89bb      	ldrh	r3, [r7, #12]
 8003a76:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003a78:	065b      	lsls	r3, r3, #25
 8003a7a:	d500      	bpl.n	8003a7e <_svfiprintf_r+0x1d2>
 8003a7c:	e72c      	b.n	80038d8 <_svfiprintf_r+0x2c>
 8003a7e:	b021      	add	sp, #132	@ 0x84
 8003a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a82:	aa07      	add	r2, sp, #28
 8003a84:	9200      	str	r2, [sp, #0]
 8003a86:	0021      	movs	r1, r4
 8003a88:	003a      	movs	r2, r7
 8003a8a:	4b06      	ldr	r3, [pc, #24]	@ (8003aa4 <_svfiprintf_r+0x1f8>)
 8003a8c:	9803      	ldr	r0, [sp, #12]
 8003a8e:	f000 fa61 	bl	8003f54 <_printf_i>
 8003a92:	e7eb      	b.n	8003a6c <_svfiprintf_r+0x1c0>
 8003a94:	08004908 	.word	0x08004908
 8003a98:	0800490e 	.word	0x0800490e
 8003a9c:	08004912 	.word	0x08004912
 8003aa0:	00000000 	.word	0x00000000
 8003aa4:	080037ed 	.word	0x080037ed

08003aa8 <__sfputc_r>:
 8003aa8:	6893      	ldr	r3, [r2, #8]
 8003aaa:	b510      	push	{r4, lr}
 8003aac:	3b01      	subs	r3, #1
 8003aae:	6093      	str	r3, [r2, #8]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	da04      	bge.n	8003abe <__sfputc_r+0x16>
 8003ab4:	6994      	ldr	r4, [r2, #24]
 8003ab6:	42a3      	cmp	r3, r4
 8003ab8:	db07      	blt.n	8003aca <__sfputc_r+0x22>
 8003aba:	290a      	cmp	r1, #10
 8003abc:	d005      	beq.n	8003aca <__sfputc_r+0x22>
 8003abe:	6813      	ldr	r3, [r2, #0]
 8003ac0:	1c58      	adds	r0, r3, #1
 8003ac2:	6010      	str	r0, [r2, #0]
 8003ac4:	7019      	strb	r1, [r3, #0]
 8003ac6:	0008      	movs	r0, r1
 8003ac8:	bd10      	pop	{r4, pc}
 8003aca:	f000 fc8d 	bl	80043e8 <__swbuf_r>
 8003ace:	0001      	movs	r1, r0
 8003ad0:	e7f9      	b.n	8003ac6 <__sfputc_r+0x1e>

08003ad2 <__sfputs_r>:
 8003ad2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ad4:	0006      	movs	r6, r0
 8003ad6:	000f      	movs	r7, r1
 8003ad8:	0014      	movs	r4, r2
 8003ada:	18d5      	adds	r5, r2, r3
 8003adc:	42ac      	cmp	r4, r5
 8003ade:	d101      	bne.n	8003ae4 <__sfputs_r+0x12>
 8003ae0:	2000      	movs	r0, #0
 8003ae2:	e007      	b.n	8003af4 <__sfputs_r+0x22>
 8003ae4:	7821      	ldrb	r1, [r4, #0]
 8003ae6:	003a      	movs	r2, r7
 8003ae8:	0030      	movs	r0, r6
 8003aea:	f7ff ffdd 	bl	8003aa8 <__sfputc_r>
 8003aee:	3401      	adds	r4, #1
 8003af0:	1c43      	adds	r3, r0, #1
 8003af2:	d1f3      	bne.n	8003adc <__sfputs_r+0xa>
 8003af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003af8 <_vfiprintf_r>:
 8003af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003afa:	b0a1      	sub	sp, #132	@ 0x84
 8003afc:	000f      	movs	r7, r1
 8003afe:	0015      	movs	r5, r2
 8003b00:	001e      	movs	r6, r3
 8003b02:	9003      	str	r0, [sp, #12]
 8003b04:	2800      	cmp	r0, #0
 8003b06:	d004      	beq.n	8003b12 <_vfiprintf_r+0x1a>
 8003b08:	6a03      	ldr	r3, [r0, #32]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <_vfiprintf_r+0x1a>
 8003b0e:	f7ff fdf3 	bl	80036f8 <__sinit>
 8003b12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b14:	07db      	lsls	r3, r3, #31
 8003b16:	d405      	bmi.n	8003b24 <_vfiprintf_r+0x2c>
 8003b18:	89bb      	ldrh	r3, [r7, #12]
 8003b1a:	059b      	lsls	r3, r3, #22
 8003b1c:	d402      	bmi.n	8003b24 <_vfiprintf_r+0x2c>
 8003b1e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003b20:	f7ff fe61 	bl	80037e6 <__retarget_lock_acquire_recursive>
 8003b24:	89bb      	ldrh	r3, [r7, #12]
 8003b26:	071b      	lsls	r3, r3, #28
 8003b28:	d502      	bpl.n	8003b30 <_vfiprintf_r+0x38>
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d113      	bne.n	8003b58 <_vfiprintf_r+0x60>
 8003b30:	0039      	movs	r1, r7
 8003b32:	9803      	ldr	r0, [sp, #12]
 8003b34:	f000 fc9a 	bl	800446c <__swsetup_r>
 8003b38:	2800      	cmp	r0, #0
 8003b3a:	d00d      	beq.n	8003b58 <_vfiprintf_r+0x60>
 8003b3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b3e:	07db      	lsls	r3, r3, #31
 8003b40:	d503      	bpl.n	8003b4a <_vfiprintf_r+0x52>
 8003b42:	2001      	movs	r0, #1
 8003b44:	4240      	negs	r0, r0
 8003b46:	b021      	add	sp, #132	@ 0x84
 8003b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b4a:	89bb      	ldrh	r3, [r7, #12]
 8003b4c:	059b      	lsls	r3, r3, #22
 8003b4e:	d4f8      	bmi.n	8003b42 <_vfiprintf_r+0x4a>
 8003b50:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003b52:	f7ff fe49 	bl	80037e8 <__retarget_lock_release_recursive>
 8003b56:	e7f4      	b.n	8003b42 <_vfiprintf_r+0x4a>
 8003b58:	2300      	movs	r3, #0
 8003b5a:	ac08      	add	r4, sp, #32
 8003b5c:	6163      	str	r3, [r4, #20]
 8003b5e:	3320      	adds	r3, #32
 8003b60:	7663      	strb	r3, [r4, #25]
 8003b62:	3310      	adds	r3, #16
 8003b64:	76a3      	strb	r3, [r4, #26]
 8003b66:	9607      	str	r6, [sp, #28]
 8003b68:	002e      	movs	r6, r5
 8003b6a:	7833      	ldrb	r3, [r6, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <_vfiprintf_r+0x7c>
 8003b70:	2b25      	cmp	r3, #37	@ 0x25
 8003b72:	d148      	bne.n	8003c06 <_vfiprintf_r+0x10e>
 8003b74:	1b73      	subs	r3, r6, r5
 8003b76:	9305      	str	r3, [sp, #20]
 8003b78:	42ae      	cmp	r6, r5
 8003b7a:	d00b      	beq.n	8003b94 <_vfiprintf_r+0x9c>
 8003b7c:	002a      	movs	r2, r5
 8003b7e:	0039      	movs	r1, r7
 8003b80:	9803      	ldr	r0, [sp, #12]
 8003b82:	f7ff ffa6 	bl	8003ad2 <__sfputs_r>
 8003b86:	3001      	adds	r0, #1
 8003b88:	d100      	bne.n	8003b8c <_vfiprintf_r+0x94>
 8003b8a:	e0ae      	b.n	8003cea <_vfiprintf_r+0x1f2>
 8003b8c:	6963      	ldr	r3, [r4, #20]
 8003b8e:	9a05      	ldr	r2, [sp, #20]
 8003b90:	189b      	adds	r3, r3, r2
 8003b92:	6163      	str	r3, [r4, #20]
 8003b94:	7833      	ldrb	r3, [r6, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d100      	bne.n	8003b9c <_vfiprintf_r+0xa4>
 8003b9a:	e0a6      	b.n	8003cea <_vfiprintf_r+0x1f2>
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	4252      	negs	r2, r2
 8003ba2:	6062      	str	r2, [r4, #4]
 8003ba4:	a904      	add	r1, sp, #16
 8003ba6:	3254      	adds	r2, #84	@ 0x54
 8003ba8:	1852      	adds	r2, r2, r1
 8003baa:	1c75      	adds	r5, r6, #1
 8003bac:	6023      	str	r3, [r4, #0]
 8003bae:	60e3      	str	r3, [r4, #12]
 8003bb0:	60a3      	str	r3, [r4, #8]
 8003bb2:	7013      	strb	r3, [r2, #0]
 8003bb4:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003bb6:	4b59      	ldr	r3, [pc, #356]	@ (8003d1c <_vfiprintf_r+0x224>)
 8003bb8:	2205      	movs	r2, #5
 8003bba:	0018      	movs	r0, r3
 8003bbc:	7829      	ldrb	r1, [r5, #0]
 8003bbe:	9305      	str	r3, [sp, #20]
 8003bc0:	f000 fdb4 	bl	800472c <memchr>
 8003bc4:	1c6e      	adds	r6, r5, #1
 8003bc6:	2800      	cmp	r0, #0
 8003bc8:	d11f      	bne.n	8003c0a <_vfiprintf_r+0x112>
 8003bca:	6822      	ldr	r2, [r4, #0]
 8003bcc:	06d3      	lsls	r3, r2, #27
 8003bce:	d504      	bpl.n	8003bda <_vfiprintf_r+0xe2>
 8003bd0:	2353      	movs	r3, #83	@ 0x53
 8003bd2:	a904      	add	r1, sp, #16
 8003bd4:	185b      	adds	r3, r3, r1
 8003bd6:	2120      	movs	r1, #32
 8003bd8:	7019      	strb	r1, [r3, #0]
 8003bda:	0713      	lsls	r3, r2, #28
 8003bdc:	d504      	bpl.n	8003be8 <_vfiprintf_r+0xf0>
 8003bde:	2353      	movs	r3, #83	@ 0x53
 8003be0:	a904      	add	r1, sp, #16
 8003be2:	185b      	adds	r3, r3, r1
 8003be4:	212b      	movs	r1, #43	@ 0x2b
 8003be6:	7019      	strb	r1, [r3, #0]
 8003be8:	782b      	ldrb	r3, [r5, #0]
 8003bea:	2b2a      	cmp	r3, #42	@ 0x2a
 8003bec:	d016      	beq.n	8003c1c <_vfiprintf_r+0x124>
 8003bee:	002e      	movs	r6, r5
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	200a      	movs	r0, #10
 8003bf4:	68e3      	ldr	r3, [r4, #12]
 8003bf6:	7832      	ldrb	r2, [r6, #0]
 8003bf8:	1c75      	adds	r5, r6, #1
 8003bfa:	3a30      	subs	r2, #48	@ 0x30
 8003bfc:	2a09      	cmp	r2, #9
 8003bfe:	d950      	bls.n	8003ca2 <_vfiprintf_r+0x1aa>
 8003c00:	2900      	cmp	r1, #0
 8003c02:	d111      	bne.n	8003c28 <_vfiprintf_r+0x130>
 8003c04:	e017      	b.n	8003c36 <_vfiprintf_r+0x13e>
 8003c06:	3601      	adds	r6, #1
 8003c08:	e7af      	b.n	8003b6a <_vfiprintf_r+0x72>
 8003c0a:	9b05      	ldr	r3, [sp, #20]
 8003c0c:	6822      	ldr	r2, [r4, #0]
 8003c0e:	1ac0      	subs	r0, r0, r3
 8003c10:	2301      	movs	r3, #1
 8003c12:	4083      	lsls	r3, r0
 8003c14:	4313      	orrs	r3, r2
 8003c16:	0035      	movs	r5, r6
 8003c18:	6023      	str	r3, [r4, #0]
 8003c1a:	e7cc      	b.n	8003bb6 <_vfiprintf_r+0xbe>
 8003c1c:	9b07      	ldr	r3, [sp, #28]
 8003c1e:	1d19      	adds	r1, r3, #4
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	9107      	str	r1, [sp, #28]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	db01      	blt.n	8003c2c <_vfiprintf_r+0x134>
 8003c28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003c2a:	e004      	b.n	8003c36 <_vfiprintf_r+0x13e>
 8003c2c:	425b      	negs	r3, r3
 8003c2e:	60e3      	str	r3, [r4, #12]
 8003c30:	2302      	movs	r3, #2
 8003c32:	4313      	orrs	r3, r2
 8003c34:	6023      	str	r3, [r4, #0]
 8003c36:	7833      	ldrb	r3, [r6, #0]
 8003c38:	2b2e      	cmp	r3, #46	@ 0x2e
 8003c3a:	d10c      	bne.n	8003c56 <_vfiprintf_r+0x15e>
 8003c3c:	7873      	ldrb	r3, [r6, #1]
 8003c3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c40:	d134      	bne.n	8003cac <_vfiprintf_r+0x1b4>
 8003c42:	9b07      	ldr	r3, [sp, #28]
 8003c44:	3602      	adds	r6, #2
 8003c46:	1d1a      	adds	r2, r3, #4
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	9207      	str	r2, [sp, #28]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	da01      	bge.n	8003c54 <_vfiprintf_r+0x15c>
 8003c50:	2301      	movs	r3, #1
 8003c52:	425b      	negs	r3, r3
 8003c54:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c56:	4d32      	ldr	r5, [pc, #200]	@ (8003d20 <_vfiprintf_r+0x228>)
 8003c58:	2203      	movs	r2, #3
 8003c5a:	0028      	movs	r0, r5
 8003c5c:	7831      	ldrb	r1, [r6, #0]
 8003c5e:	f000 fd65 	bl	800472c <memchr>
 8003c62:	2800      	cmp	r0, #0
 8003c64:	d006      	beq.n	8003c74 <_vfiprintf_r+0x17c>
 8003c66:	2340      	movs	r3, #64	@ 0x40
 8003c68:	1b40      	subs	r0, r0, r5
 8003c6a:	4083      	lsls	r3, r0
 8003c6c:	6822      	ldr	r2, [r4, #0]
 8003c6e:	3601      	adds	r6, #1
 8003c70:	4313      	orrs	r3, r2
 8003c72:	6023      	str	r3, [r4, #0]
 8003c74:	7831      	ldrb	r1, [r6, #0]
 8003c76:	2206      	movs	r2, #6
 8003c78:	482a      	ldr	r0, [pc, #168]	@ (8003d24 <_vfiprintf_r+0x22c>)
 8003c7a:	1c75      	adds	r5, r6, #1
 8003c7c:	7621      	strb	r1, [r4, #24]
 8003c7e:	f000 fd55 	bl	800472c <memchr>
 8003c82:	2800      	cmp	r0, #0
 8003c84:	d040      	beq.n	8003d08 <_vfiprintf_r+0x210>
 8003c86:	4b28      	ldr	r3, [pc, #160]	@ (8003d28 <_vfiprintf_r+0x230>)
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d122      	bne.n	8003cd2 <_vfiprintf_r+0x1da>
 8003c8c:	2207      	movs	r2, #7
 8003c8e:	9b07      	ldr	r3, [sp, #28]
 8003c90:	3307      	adds	r3, #7
 8003c92:	4393      	bics	r3, r2
 8003c94:	3308      	adds	r3, #8
 8003c96:	9307      	str	r3, [sp, #28]
 8003c98:	6963      	ldr	r3, [r4, #20]
 8003c9a:	9a04      	ldr	r2, [sp, #16]
 8003c9c:	189b      	adds	r3, r3, r2
 8003c9e:	6163      	str	r3, [r4, #20]
 8003ca0:	e762      	b.n	8003b68 <_vfiprintf_r+0x70>
 8003ca2:	4343      	muls	r3, r0
 8003ca4:	002e      	movs	r6, r5
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	189b      	adds	r3, r3, r2
 8003caa:	e7a4      	b.n	8003bf6 <_vfiprintf_r+0xfe>
 8003cac:	2300      	movs	r3, #0
 8003cae:	200a      	movs	r0, #10
 8003cb0:	0019      	movs	r1, r3
 8003cb2:	3601      	adds	r6, #1
 8003cb4:	6063      	str	r3, [r4, #4]
 8003cb6:	7832      	ldrb	r2, [r6, #0]
 8003cb8:	1c75      	adds	r5, r6, #1
 8003cba:	3a30      	subs	r2, #48	@ 0x30
 8003cbc:	2a09      	cmp	r2, #9
 8003cbe:	d903      	bls.n	8003cc8 <_vfiprintf_r+0x1d0>
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d0c8      	beq.n	8003c56 <_vfiprintf_r+0x15e>
 8003cc4:	9109      	str	r1, [sp, #36]	@ 0x24
 8003cc6:	e7c6      	b.n	8003c56 <_vfiprintf_r+0x15e>
 8003cc8:	4341      	muls	r1, r0
 8003cca:	002e      	movs	r6, r5
 8003ccc:	2301      	movs	r3, #1
 8003cce:	1889      	adds	r1, r1, r2
 8003cd0:	e7f1      	b.n	8003cb6 <_vfiprintf_r+0x1be>
 8003cd2:	aa07      	add	r2, sp, #28
 8003cd4:	9200      	str	r2, [sp, #0]
 8003cd6:	0021      	movs	r1, r4
 8003cd8:	003a      	movs	r2, r7
 8003cda:	4b14      	ldr	r3, [pc, #80]	@ (8003d2c <_vfiprintf_r+0x234>)
 8003cdc:	9803      	ldr	r0, [sp, #12]
 8003cde:	e000      	b.n	8003ce2 <_vfiprintf_r+0x1ea>
 8003ce0:	bf00      	nop
 8003ce2:	9004      	str	r0, [sp, #16]
 8003ce4:	9b04      	ldr	r3, [sp, #16]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	d1d6      	bne.n	8003c98 <_vfiprintf_r+0x1a0>
 8003cea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003cec:	07db      	lsls	r3, r3, #31
 8003cee:	d405      	bmi.n	8003cfc <_vfiprintf_r+0x204>
 8003cf0:	89bb      	ldrh	r3, [r7, #12]
 8003cf2:	059b      	lsls	r3, r3, #22
 8003cf4:	d402      	bmi.n	8003cfc <_vfiprintf_r+0x204>
 8003cf6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003cf8:	f7ff fd76 	bl	80037e8 <__retarget_lock_release_recursive>
 8003cfc:	89bb      	ldrh	r3, [r7, #12]
 8003cfe:	065b      	lsls	r3, r3, #25
 8003d00:	d500      	bpl.n	8003d04 <_vfiprintf_r+0x20c>
 8003d02:	e71e      	b.n	8003b42 <_vfiprintf_r+0x4a>
 8003d04:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003d06:	e71e      	b.n	8003b46 <_vfiprintf_r+0x4e>
 8003d08:	aa07      	add	r2, sp, #28
 8003d0a:	9200      	str	r2, [sp, #0]
 8003d0c:	0021      	movs	r1, r4
 8003d0e:	003a      	movs	r2, r7
 8003d10:	4b06      	ldr	r3, [pc, #24]	@ (8003d2c <_vfiprintf_r+0x234>)
 8003d12:	9803      	ldr	r0, [sp, #12]
 8003d14:	f000 f91e 	bl	8003f54 <_printf_i>
 8003d18:	e7e3      	b.n	8003ce2 <_vfiprintf_r+0x1ea>
 8003d1a:	46c0      	nop			@ (mov r8, r8)
 8003d1c:	08004908 	.word	0x08004908
 8003d20:	0800490e 	.word	0x0800490e
 8003d24:	08004912 	.word	0x08004912
 8003d28:	00000000 	.word	0x00000000
 8003d2c:	08003ad3 	.word	0x08003ad3

08003d30 <sbrk_aligned>:
 8003d30:	b570      	push	{r4, r5, r6, lr}
 8003d32:	4e0f      	ldr	r6, [pc, #60]	@ (8003d70 <sbrk_aligned+0x40>)
 8003d34:	000d      	movs	r5, r1
 8003d36:	6831      	ldr	r1, [r6, #0]
 8003d38:	0004      	movs	r4, r0
 8003d3a:	2900      	cmp	r1, #0
 8003d3c:	d102      	bne.n	8003d44 <sbrk_aligned+0x14>
 8003d3e:	f000 fcab 	bl	8004698 <_sbrk_r>
 8003d42:	6030      	str	r0, [r6, #0]
 8003d44:	0029      	movs	r1, r5
 8003d46:	0020      	movs	r0, r4
 8003d48:	f000 fca6 	bl	8004698 <_sbrk_r>
 8003d4c:	1c43      	adds	r3, r0, #1
 8003d4e:	d103      	bne.n	8003d58 <sbrk_aligned+0x28>
 8003d50:	2501      	movs	r5, #1
 8003d52:	426d      	negs	r5, r5
 8003d54:	0028      	movs	r0, r5
 8003d56:	bd70      	pop	{r4, r5, r6, pc}
 8003d58:	2303      	movs	r3, #3
 8003d5a:	1cc5      	adds	r5, r0, #3
 8003d5c:	439d      	bics	r5, r3
 8003d5e:	42a8      	cmp	r0, r5
 8003d60:	d0f8      	beq.n	8003d54 <sbrk_aligned+0x24>
 8003d62:	1a29      	subs	r1, r5, r0
 8003d64:	0020      	movs	r0, r4
 8003d66:	f000 fc97 	bl	8004698 <_sbrk_r>
 8003d6a:	3001      	adds	r0, #1
 8003d6c:	d1f2      	bne.n	8003d54 <sbrk_aligned+0x24>
 8003d6e:	e7ef      	b.n	8003d50 <sbrk_aligned+0x20>
 8003d70:	20000b34 	.word	0x20000b34

08003d74 <_malloc_r>:
 8003d74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d76:	2203      	movs	r2, #3
 8003d78:	1ccb      	adds	r3, r1, #3
 8003d7a:	4393      	bics	r3, r2
 8003d7c:	3308      	adds	r3, #8
 8003d7e:	0005      	movs	r5, r0
 8003d80:	001f      	movs	r7, r3
 8003d82:	2b0c      	cmp	r3, #12
 8003d84:	d234      	bcs.n	8003df0 <_malloc_r+0x7c>
 8003d86:	270c      	movs	r7, #12
 8003d88:	42b9      	cmp	r1, r7
 8003d8a:	d833      	bhi.n	8003df4 <_malloc_r+0x80>
 8003d8c:	0028      	movs	r0, r5
 8003d8e:	f000 fa9f 	bl	80042d0 <__malloc_lock>
 8003d92:	4e37      	ldr	r6, [pc, #220]	@ (8003e70 <_malloc_r+0xfc>)
 8003d94:	6833      	ldr	r3, [r6, #0]
 8003d96:	001c      	movs	r4, r3
 8003d98:	2c00      	cmp	r4, #0
 8003d9a:	d12f      	bne.n	8003dfc <_malloc_r+0x88>
 8003d9c:	0039      	movs	r1, r7
 8003d9e:	0028      	movs	r0, r5
 8003da0:	f7ff ffc6 	bl	8003d30 <sbrk_aligned>
 8003da4:	0004      	movs	r4, r0
 8003da6:	1c43      	adds	r3, r0, #1
 8003da8:	d15f      	bne.n	8003e6a <_malloc_r+0xf6>
 8003daa:	6834      	ldr	r4, [r6, #0]
 8003dac:	9400      	str	r4, [sp, #0]
 8003dae:	9b00      	ldr	r3, [sp, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d14a      	bne.n	8003e4a <_malloc_r+0xd6>
 8003db4:	2c00      	cmp	r4, #0
 8003db6:	d052      	beq.n	8003e5e <_malloc_r+0xea>
 8003db8:	6823      	ldr	r3, [r4, #0]
 8003dba:	0028      	movs	r0, r5
 8003dbc:	18e3      	adds	r3, r4, r3
 8003dbe:	9900      	ldr	r1, [sp, #0]
 8003dc0:	9301      	str	r3, [sp, #4]
 8003dc2:	f000 fc69 	bl	8004698 <_sbrk_r>
 8003dc6:	9b01      	ldr	r3, [sp, #4]
 8003dc8:	4283      	cmp	r3, r0
 8003dca:	d148      	bne.n	8003e5e <_malloc_r+0xea>
 8003dcc:	6823      	ldr	r3, [r4, #0]
 8003dce:	0028      	movs	r0, r5
 8003dd0:	1aff      	subs	r7, r7, r3
 8003dd2:	0039      	movs	r1, r7
 8003dd4:	f7ff ffac 	bl	8003d30 <sbrk_aligned>
 8003dd8:	3001      	adds	r0, #1
 8003dda:	d040      	beq.n	8003e5e <_malloc_r+0xea>
 8003ddc:	6823      	ldr	r3, [r4, #0]
 8003dde:	19db      	adds	r3, r3, r7
 8003de0:	6023      	str	r3, [r4, #0]
 8003de2:	6833      	ldr	r3, [r6, #0]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	2a00      	cmp	r2, #0
 8003de8:	d133      	bne.n	8003e52 <_malloc_r+0xde>
 8003dea:	9b00      	ldr	r3, [sp, #0]
 8003dec:	6033      	str	r3, [r6, #0]
 8003dee:	e019      	b.n	8003e24 <_malloc_r+0xb0>
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	dac9      	bge.n	8003d88 <_malloc_r+0x14>
 8003df4:	230c      	movs	r3, #12
 8003df6:	602b      	str	r3, [r5, #0]
 8003df8:	2000      	movs	r0, #0
 8003dfa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003dfc:	6821      	ldr	r1, [r4, #0]
 8003dfe:	1bc9      	subs	r1, r1, r7
 8003e00:	d420      	bmi.n	8003e44 <_malloc_r+0xd0>
 8003e02:	290b      	cmp	r1, #11
 8003e04:	d90a      	bls.n	8003e1c <_malloc_r+0xa8>
 8003e06:	19e2      	adds	r2, r4, r7
 8003e08:	6027      	str	r7, [r4, #0]
 8003e0a:	42a3      	cmp	r3, r4
 8003e0c:	d104      	bne.n	8003e18 <_malloc_r+0xa4>
 8003e0e:	6032      	str	r2, [r6, #0]
 8003e10:	6863      	ldr	r3, [r4, #4]
 8003e12:	6011      	str	r1, [r2, #0]
 8003e14:	6053      	str	r3, [r2, #4]
 8003e16:	e005      	b.n	8003e24 <_malloc_r+0xb0>
 8003e18:	605a      	str	r2, [r3, #4]
 8003e1a:	e7f9      	b.n	8003e10 <_malloc_r+0x9c>
 8003e1c:	6862      	ldr	r2, [r4, #4]
 8003e1e:	42a3      	cmp	r3, r4
 8003e20:	d10e      	bne.n	8003e40 <_malloc_r+0xcc>
 8003e22:	6032      	str	r2, [r6, #0]
 8003e24:	0028      	movs	r0, r5
 8003e26:	f000 fa5b 	bl	80042e0 <__malloc_unlock>
 8003e2a:	0020      	movs	r0, r4
 8003e2c:	2207      	movs	r2, #7
 8003e2e:	300b      	adds	r0, #11
 8003e30:	1d23      	adds	r3, r4, #4
 8003e32:	4390      	bics	r0, r2
 8003e34:	1ac2      	subs	r2, r0, r3
 8003e36:	4298      	cmp	r0, r3
 8003e38:	d0df      	beq.n	8003dfa <_malloc_r+0x86>
 8003e3a:	1a1b      	subs	r3, r3, r0
 8003e3c:	50a3      	str	r3, [r4, r2]
 8003e3e:	e7dc      	b.n	8003dfa <_malloc_r+0x86>
 8003e40:	605a      	str	r2, [r3, #4]
 8003e42:	e7ef      	b.n	8003e24 <_malloc_r+0xb0>
 8003e44:	0023      	movs	r3, r4
 8003e46:	6864      	ldr	r4, [r4, #4]
 8003e48:	e7a6      	b.n	8003d98 <_malloc_r+0x24>
 8003e4a:	9c00      	ldr	r4, [sp, #0]
 8003e4c:	6863      	ldr	r3, [r4, #4]
 8003e4e:	9300      	str	r3, [sp, #0]
 8003e50:	e7ad      	b.n	8003dae <_malloc_r+0x3a>
 8003e52:	001a      	movs	r2, r3
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	42a3      	cmp	r3, r4
 8003e58:	d1fb      	bne.n	8003e52 <_malloc_r+0xde>
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	e7da      	b.n	8003e14 <_malloc_r+0xa0>
 8003e5e:	230c      	movs	r3, #12
 8003e60:	0028      	movs	r0, r5
 8003e62:	602b      	str	r3, [r5, #0]
 8003e64:	f000 fa3c 	bl	80042e0 <__malloc_unlock>
 8003e68:	e7c6      	b.n	8003df8 <_malloc_r+0x84>
 8003e6a:	6007      	str	r7, [r0, #0]
 8003e6c:	e7da      	b.n	8003e24 <_malloc_r+0xb0>
 8003e6e:	46c0      	nop			@ (mov r8, r8)
 8003e70:	20000b38 	.word	0x20000b38

08003e74 <_printf_common>:
 8003e74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e76:	0016      	movs	r6, r2
 8003e78:	9301      	str	r3, [sp, #4]
 8003e7a:	688a      	ldr	r2, [r1, #8]
 8003e7c:	690b      	ldr	r3, [r1, #16]
 8003e7e:	000c      	movs	r4, r1
 8003e80:	9000      	str	r0, [sp, #0]
 8003e82:	4293      	cmp	r3, r2
 8003e84:	da00      	bge.n	8003e88 <_printf_common+0x14>
 8003e86:	0013      	movs	r3, r2
 8003e88:	0022      	movs	r2, r4
 8003e8a:	6033      	str	r3, [r6, #0]
 8003e8c:	3243      	adds	r2, #67	@ 0x43
 8003e8e:	7812      	ldrb	r2, [r2, #0]
 8003e90:	2a00      	cmp	r2, #0
 8003e92:	d001      	beq.n	8003e98 <_printf_common+0x24>
 8003e94:	3301      	adds	r3, #1
 8003e96:	6033      	str	r3, [r6, #0]
 8003e98:	6823      	ldr	r3, [r4, #0]
 8003e9a:	069b      	lsls	r3, r3, #26
 8003e9c:	d502      	bpl.n	8003ea4 <_printf_common+0x30>
 8003e9e:	6833      	ldr	r3, [r6, #0]
 8003ea0:	3302      	adds	r3, #2
 8003ea2:	6033      	str	r3, [r6, #0]
 8003ea4:	6822      	ldr	r2, [r4, #0]
 8003ea6:	2306      	movs	r3, #6
 8003ea8:	0015      	movs	r5, r2
 8003eaa:	401d      	ands	r5, r3
 8003eac:	421a      	tst	r2, r3
 8003eae:	d027      	beq.n	8003f00 <_printf_common+0x8c>
 8003eb0:	0023      	movs	r3, r4
 8003eb2:	3343      	adds	r3, #67	@ 0x43
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	1e5a      	subs	r2, r3, #1
 8003eb8:	4193      	sbcs	r3, r2
 8003eba:	6822      	ldr	r2, [r4, #0]
 8003ebc:	0692      	lsls	r2, r2, #26
 8003ebe:	d430      	bmi.n	8003f22 <_printf_common+0xae>
 8003ec0:	0022      	movs	r2, r4
 8003ec2:	9901      	ldr	r1, [sp, #4]
 8003ec4:	9800      	ldr	r0, [sp, #0]
 8003ec6:	9d08      	ldr	r5, [sp, #32]
 8003ec8:	3243      	adds	r2, #67	@ 0x43
 8003eca:	47a8      	blx	r5
 8003ecc:	3001      	adds	r0, #1
 8003ece:	d025      	beq.n	8003f1c <_printf_common+0xa8>
 8003ed0:	2206      	movs	r2, #6
 8003ed2:	6823      	ldr	r3, [r4, #0]
 8003ed4:	2500      	movs	r5, #0
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	2b04      	cmp	r3, #4
 8003eda:	d105      	bne.n	8003ee8 <_printf_common+0x74>
 8003edc:	6833      	ldr	r3, [r6, #0]
 8003ede:	68e5      	ldr	r5, [r4, #12]
 8003ee0:	1aed      	subs	r5, r5, r3
 8003ee2:	43eb      	mvns	r3, r5
 8003ee4:	17db      	asrs	r3, r3, #31
 8003ee6:	401d      	ands	r5, r3
 8003ee8:	68a3      	ldr	r3, [r4, #8]
 8003eea:	6922      	ldr	r2, [r4, #16]
 8003eec:	4293      	cmp	r3, r2
 8003eee:	dd01      	ble.n	8003ef4 <_printf_common+0x80>
 8003ef0:	1a9b      	subs	r3, r3, r2
 8003ef2:	18ed      	adds	r5, r5, r3
 8003ef4:	2600      	movs	r6, #0
 8003ef6:	42b5      	cmp	r5, r6
 8003ef8:	d120      	bne.n	8003f3c <_printf_common+0xc8>
 8003efa:	2000      	movs	r0, #0
 8003efc:	e010      	b.n	8003f20 <_printf_common+0xac>
 8003efe:	3501      	adds	r5, #1
 8003f00:	68e3      	ldr	r3, [r4, #12]
 8003f02:	6832      	ldr	r2, [r6, #0]
 8003f04:	1a9b      	subs	r3, r3, r2
 8003f06:	42ab      	cmp	r3, r5
 8003f08:	ddd2      	ble.n	8003eb0 <_printf_common+0x3c>
 8003f0a:	0022      	movs	r2, r4
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	9901      	ldr	r1, [sp, #4]
 8003f10:	9800      	ldr	r0, [sp, #0]
 8003f12:	9f08      	ldr	r7, [sp, #32]
 8003f14:	3219      	adds	r2, #25
 8003f16:	47b8      	blx	r7
 8003f18:	3001      	adds	r0, #1
 8003f1a:	d1f0      	bne.n	8003efe <_printf_common+0x8a>
 8003f1c:	2001      	movs	r0, #1
 8003f1e:	4240      	negs	r0, r0
 8003f20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f22:	2030      	movs	r0, #48	@ 0x30
 8003f24:	18e1      	adds	r1, r4, r3
 8003f26:	3143      	adds	r1, #67	@ 0x43
 8003f28:	7008      	strb	r0, [r1, #0]
 8003f2a:	0021      	movs	r1, r4
 8003f2c:	1c5a      	adds	r2, r3, #1
 8003f2e:	3145      	adds	r1, #69	@ 0x45
 8003f30:	7809      	ldrb	r1, [r1, #0]
 8003f32:	18a2      	adds	r2, r4, r2
 8003f34:	3243      	adds	r2, #67	@ 0x43
 8003f36:	3302      	adds	r3, #2
 8003f38:	7011      	strb	r1, [r2, #0]
 8003f3a:	e7c1      	b.n	8003ec0 <_printf_common+0x4c>
 8003f3c:	0022      	movs	r2, r4
 8003f3e:	2301      	movs	r3, #1
 8003f40:	9901      	ldr	r1, [sp, #4]
 8003f42:	9800      	ldr	r0, [sp, #0]
 8003f44:	9f08      	ldr	r7, [sp, #32]
 8003f46:	321a      	adds	r2, #26
 8003f48:	47b8      	blx	r7
 8003f4a:	3001      	adds	r0, #1
 8003f4c:	d0e6      	beq.n	8003f1c <_printf_common+0xa8>
 8003f4e:	3601      	adds	r6, #1
 8003f50:	e7d1      	b.n	8003ef6 <_printf_common+0x82>
	...

08003f54 <_printf_i>:
 8003f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f56:	b08b      	sub	sp, #44	@ 0x2c
 8003f58:	9206      	str	r2, [sp, #24]
 8003f5a:	000a      	movs	r2, r1
 8003f5c:	3243      	adds	r2, #67	@ 0x43
 8003f5e:	9307      	str	r3, [sp, #28]
 8003f60:	9005      	str	r0, [sp, #20]
 8003f62:	9203      	str	r2, [sp, #12]
 8003f64:	7e0a      	ldrb	r2, [r1, #24]
 8003f66:	000c      	movs	r4, r1
 8003f68:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003f6a:	2a78      	cmp	r2, #120	@ 0x78
 8003f6c:	d809      	bhi.n	8003f82 <_printf_i+0x2e>
 8003f6e:	2a62      	cmp	r2, #98	@ 0x62
 8003f70:	d80b      	bhi.n	8003f8a <_printf_i+0x36>
 8003f72:	2a00      	cmp	r2, #0
 8003f74:	d100      	bne.n	8003f78 <_printf_i+0x24>
 8003f76:	e0ba      	b.n	80040ee <_printf_i+0x19a>
 8003f78:	497a      	ldr	r1, [pc, #488]	@ (8004164 <_printf_i+0x210>)
 8003f7a:	9104      	str	r1, [sp, #16]
 8003f7c:	2a58      	cmp	r2, #88	@ 0x58
 8003f7e:	d100      	bne.n	8003f82 <_printf_i+0x2e>
 8003f80:	e08e      	b.n	80040a0 <_printf_i+0x14c>
 8003f82:	0025      	movs	r5, r4
 8003f84:	3542      	adds	r5, #66	@ 0x42
 8003f86:	702a      	strb	r2, [r5, #0]
 8003f88:	e022      	b.n	8003fd0 <_printf_i+0x7c>
 8003f8a:	0010      	movs	r0, r2
 8003f8c:	3863      	subs	r0, #99	@ 0x63
 8003f8e:	2815      	cmp	r0, #21
 8003f90:	d8f7      	bhi.n	8003f82 <_printf_i+0x2e>
 8003f92:	f7fc f8b9 	bl	8000108 <__gnu_thumb1_case_shi>
 8003f96:	0016      	.short	0x0016
 8003f98:	fff6001f 	.word	0xfff6001f
 8003f9c:	fff6fff6 	.word	0xfff6fff6
 8003fa0:	001ffff6 	.word	0x001ffff6
 8003fa4:	fff6fff6 	.word	0xfff6fff6
 8003fa8:	fff6fff6 	.word	0xfff6fff6
 8003fac:	0036009f 	.word	0x0036009f
 8003fb0:	fff6007e 	.word	0xfff6007e
 8003fb4:	00b0fff6 	.word	0x00b0fff6
 8003fb8:	0036fff6 	.word	0x0036fff6
 8003fbc:	fff6fff6 	.word	0xfff6fff6
 8003fc0:	0082      	.short	0x0082
 8003fc2:	0025      	movs	r5, r4
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	3542      	adds	r5, #66	@ 0x42
 8003fc8:	1d11      	adds	r1, r2, #4
 8003fca:	6019      	str	r1, [r3, #0]
 8003fcc:	6813      	ldr	r3, [r2, #0]
 8003fce:	702b      	strb	r3, [r5, #0]
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e09e      	b.n	8004112 <_printf_i+0x1be>
 8003fd4:	6818      	ldr	r0, [r3, #0]
 8003fd6:	6809      	ldr	r1, [r1, #0]
 8003fd8:	1d02      	adds	r2, r0, #4
 8003fda:	060d      	lsls	r5, r1, #24
 8003fdc:	d50b      	bpl.n	8003ff6 <_printf_i+0xa2>
 8003fde:	6806      	ldr	r6, [r0, #0]
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	2e00      	cmp	r6, #0
 8003fe4:	da03      	bge.n	8003fee <_printf_i+0x9a>
 8003fe6:	232d      	movs	r3, #45	@ 0x2d
 8003fe8:	9a03      	ldr	r2, [sp, #12]
 8003fea:	4276      	negs	r6, r6
 8003fec:	7013      	strb	r3, [r2, #0]
 8003fee:	4b5d      	ldr	r3, [pc, #372]	@ (8004164 <_printf_i+0x210>)
 8003ff0:	270a      	movs	r7, #10
 8003ff2:	9304      	str	r3, [sp, #16]
 8003ff4:	e018      	b.n	8004028 <_printf_i+0xd4>
 8003ff6:	6806      	ldr	r6, [r0, #0]
 8003ff8:	601a      	str	r2, [r3, #0]
 8003ffa:	0649      	lsls	r1, r1, #25
 8003ffc:	d5f1      	bpl.n	8003fe2 <_printf_i+0x8e>
 8003ffe:	b236      	sxth	r6, r6
 8004000:	e7ef      	b.n	8003fe2 <_printf_i+0x8e>
 8004002:	6808      	ldr	r0, [r1, #0]
 8004004:	6819      	ldr	r1, [r3, #0]
 8004006:	c940      	ldmia	r1!, {r6}
 8004008:	0605      	lsls	r5, r0, #24
 800400a:	d402      	bmi.n	8004012 <_printf_i+0xbe>
 800400c:	0640      	lsls	r0, r0, #25
 800400e:	d500      	bpl.n	8004012 <_printf_i+0xbe>
 8004010:	b2b6      	uxth	r6, r6
 8004012:	6019      	str	r1, [r3, #0]
 8004014:	4b53      	ldr	r3, [pc, #332]	@ (8004164 <_printf_i+0x210>)
 8004016:	270a      	movs	r7, #10
 8004018:	9304      	str	r3, [sp, #16]
 800401a:	2a6f      	cmp	r2, #111	@ 0x6f
 800401c:	d100      	bne.n	8004020 <_printf_i+0xcc>
 800401e:	3f02      	subs	r7, #2
 8004020:	0023      	movs	r3, r4
 8004022:	2200      	movs	r2, #0
 8004024:	3343      	adds	r3, #67	@ 0x43
 8004026:	701a      	strb	r2, [r3, #0]
 8004028:	6863      	ldr	r3, [r4, #4]
 800402a:	60a3      	str	r3, [r4, #8]
 800402c:	2b00      	cmp	r3, #0
 800402e:	db06      	blt.n	800403e <_printf_i+0xea>
 8004030:	2104      	movs	r1, #4
 8004032:	6822      	ldr	r2, [r4, #0]
 8004034:	9d03      	ldr	r5, [sp, #12]
 8004036:	438a      	bics	r2, r1
 8004038:	6022      	str	r2, [r4, #0]
 800403a:	4333      	orrs	r3, r6
 800403c:	d00c      	beq.n	8004058 <_printf_i+0x104>
 800403e:	9d03      	ldr	r5, [sp, #12]
 8004040:	0030      	movs	r0, r6
 8004042:	0039      	movs	r1, r7
 8004044:	f7fc f8f0 	bl	8000228 <__aeabi_uidivmod>
 8004048:	9b04      	ldr	r3, [sp, #16]
 800404a:	3d01      	subs	r5, #1
 800404c:	5c5b      	ldrb	r3, [r3, r1]
 800404e:	702b      	strb	r3, [r5, #0]
 8004050:	0033      	movs	r3, r6
 8004052:	0006      	movs	r6, r0
 8004054:	429f      	cmp	r7, r3
 8004056:	d9f3      	bls.n	8004040 <_printf_i+0xec>
 8004058:	2f08      	cmp	r7, #8
 800405a:	d109      	bne.n	8004070 <_printf_i+0x11c>
 800405c:	6823      	ldr	r3, [r4, #0]
 800405e:	07db      	lsls	r3, r3, #31
 8004060:	d506      	bpl.n	8004070 <_printf_i+0x11c>
 8004062:	6862      	ldr	r2, [r4, #4]
 8004064:	6923      	ldr	r3, [r4, #16]
 8004066:	429a      	cmp	r2, r3
 8004068:	dc02      	bgt.n	8004070 <_printf_i+0x11c>
 800406a:	2330      	movs	r3, #48	@ 0x30
 800406c:	3d01      	subs	r5, #1
 800406e:	702b      	strb	r3, [r5, #0]
 8004070:	9b03      	ldr	r3, [sp, #12]
 8004072:	1b5b      	subs	r3, r3, r5
 8004074:	6123      	str	r3, [r4, #16]
 8004076:	9b07      	ldr	r3, [sp, #28]
 8004078:	0021      	movs	r1, r4
 800407a:	9300      	str	r3, [sp, #0]
 800407c:	9805      	ldr	r0, [sp, #20]
 800407e:	9b06      	ldr	r3, [sp, #24]
 8004080:	aa09      	add	r2, sp, #36	@ 0x24
 8004082:	f7ff fef7 	bl	8003e74 <_printf_common>
 8004086:	3001      	adds	r0, #1
 8004088:	d148      	bne.n	800411c <_printf_i+0x1c8>
 800408a:	2001      	movs	r0, #1
 800408c:	4240      	negs	r0, r0
 800408e:	b00b      	add	sp, #44	@ 0x2c
 8004090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004092:	2220      	movs	r2, #32
 8004094:	6809      	ldr	r1, [r1, #0]
 8004096:	430a      	orrs	r2, r1
 8004098:	6022      	str	r2, [r4, #0]
 800409a:	2278      	movs	r2, #120	@ 0x78
 800409c:	4932      	ldr	r1, [pc, #200]	@ (8004168 <_printf_i+0x214>)
 800409e:	9104      	str	r1, [sp, #16]
 80040a0:	0021      	movs	r1, r4
 80040a2:	3145      	adds	r1, #69	@ 0x45
 80040a4:	700a      	strb	r2, [r1, #0]
 80040a6:	6819      	ldr	r1, [r3, #0]
 80040a8:	6822      	ldr	r2, [r4, #0]
 80040aa:	c940      	ldmia	r1!, {r6}
 80040ac:	0610      	lsls	r0, r2, #24
 80040ae:	d402      	bmi.n	80040b6 <_printf_i+0x162>
 80040b0:	0650      	lsls	r0, r2, #25
 80040b2:	d500      	bpl.n	80040b6 <_printf_i+0x162>
 80040b4:	b2b6      	uxth	r6, r6
 80040b6:	6019      	str	r1, [r3, #0]
 80040b8:	07d3      	lsls	r3, r2, #31
 80040ba:	d502      	bpl.n	80040c2 <_printf_i+0x16e>
 80040bc:	2320      	movs	r3, #32
 80040be:	4313      	orrs	r3, r2
 80040c0:	6023      	str	r3, [r4, #0]
 80040c2:	2e00      	cmp	r6, #0
 80040c4:	d001      	beq.n	80040ca <_printf_i+0x176>
 80040c6:	2710      	movs	r7, #16
 80040c8:	e7aa      	b.n	8004020 <_printf_i+0xcc>
 80040ca:	2220      	movs	r2, #32
 80040cc:	6823      	ldr	r3, [r4, #0]
 80040ce:	4393      	bics	r3, r2
 80040d0:	6023      	str	r3, [r4, #0]
 80040d2:	e7f8      	b.n	80040c6 <_printf_i+0x172>
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	680d      	ldr	r5, [r1, #0]
 80040d8:	1d10      	adds	r0, r2, #4
 80040da:	6949      	ldr	r1, [r1, #20]
 80040dc:	6018      	str	r0, [r3, #0]
 80040de:	6813      	ldr	r3, [r2, #0]
 80040e0:	062e      	lsls	r6, r5, #24
 80040e2:	d501      	bpl.n	80040e8 <_printf_i+0x194>
 80040e4:	6019      	str	r1, [r3, #0]
 80040e6:	e002      	b.n	80040ee <_printf_i+0x19a>
 80040e8:	066d      	lsls	r5, r5, #25
 80040ea:	d5fb      	bpl.n	80040e4 <_printf_i+0x190>
 80040ec:	8019      	strh	r1, [r3, #0]
 80040ee:	2300      	movs	r3, #0
 80040f0:	9d03      	ldr	r5, [sp, #12]
 80040f2:	6123      	str	r3, [r4, #16]
 80040f4:	e7bf      	b.n	8004076 <_printf_i+0x122>
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	1d11      	adds	r1, r2, #4
 80040fa:	6019      	str	r1, [r3, #0]
 80040fc:	6815      	ldr	r5, [r2, #0]
 80040fe:	2100      	movs	r1, #0
 8004100:	0028      	movs	r0, r5
 8004102:	6862      	ldr	r2, [r4, #4]
 8004104:	f000 fb12 	bl	800472c <memchr>
 8004108:	2800      	cmp	r0, #0
 800410a:	d001      	beq.n	8004110 <_printf_i+0x1bc>
 800410c:	1b40      	subs	r0, r0, r5
 800410e:	6060      	str	r0, [r4, #4]
 8004110:	6863      	ldr	r3, [r4, #4]
 8004112:	6123      	str	r3, [r4, #16]
 8004114:	2300      	movs	r3, #0
 8004116:	9a03      	ldr	r2, [sp, #12]
 8004118:	7013      	strb	r3, [r2, #0]
 800411a:	e7ac      	b.n	8004076 <_printf_i+0x122>
 800411c:	002a      	movs	r2, r5
 800411e:	6923      	ldr	r3, [r4, #16]
 8004120:	9906      	ldr	r1, [sp, #24]
 8004122:	9805      	ldr	r0, [sp, #20]
 8004124:	9d07      	ldr	r5, [sp, #28]
 8004126:	47a8      	blx	r5
 8004128:	3001      	adds	r0, #1
 800412a:	d0ae      	beq.n	800408a <_printf_i+0x136>
 800412c:	6823      	ldr	r3, [r4, #0]
 800412e:	079b      	lsls	r3, r3, #30
 8004130:	d415      	bmi.n	800415e <_printf_i+0x20a>
 8004132:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004134:	68e0      	ldr	r0, [r4, #12]
 8004136:	4298      	cmp	r0, r3
 8004138:	daa9      	bge.n	800408e <_printf_i+0x13a>
 800413a:	0018      	movs	r0, r3
 800413c:	e7a7      	b.n	800408e <_printf_i+0x13a>
 800413e:	0022      	movs	r2, r4
 8004140:	2301      	movs	r3, #1
 8004142:	9906      	ldr	r1, [sp, #24]
 8004144:	9805      	ldr	r0, [sp, #20]
 8004146:	9e07      	ldr	r6, [sp, #28]
 8004148:	3219      	adds	r2, #25
 800414a:	47b0      	blx	r6
 800414c:	3001      	adds	r0, #1
 800414e:	d09c      	beq.n	800408a <_printf_i+0x136>
 8004150:	3501      	adds	r5, #1
 8004152:	68e3      	ldr	r3, [r4, #12]
 8004154:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004156:	1a9b      	subs	r3, r3, r2
 8004158:	42ab      	cmp	r3, r5
 800415a:	dcf0      	bgt.n	800413e <_printf_i+0x1ea>
 800415c:	e7e9      	b.n	8004132 <_printf_i+0x1de>
 800415e:	2500      	movs	r5, #0
 8004160:	e7f7      	b.n	8004152 <_printf_i+0x1fe>
 8004162:	46c0      	nop			@ (mov r8, r8)
 8004164:	08004919 	.word	0x08004919
 8004168:	0800492a 	.word	0x0800492a

0800416c <__sflush_r>:
 800416c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800416e:	220c      	movs	r2, #12
 8004170:	5e8b      	ldrsh	r3, [r1, r2]
 8004172:	0005      	movs	r5, r0
 8004174:	000c      	movs	r4, r1
 8004176:	071a      	lsls	r2, r3, #28
 8004178:	d456      	bmi.n	8004228 <__sflush_r+0xbc>
 800417a:	684a      	ldr	r2, [r1, #4]
 800417c:	2a00      	cmp	r2, #0
 800417e:	dc02      	bgt.n	8004186 <__sflush_r+0x1a>
 8004180:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8004182:	2a00      	cmp	r2, #0
 8004184:	dd4e      	ble.n	8004224 <__sflush_r+0xb8>
 8004186:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004188:	2f00      	cmp	r7, #0
 800418a:	d04b      	beq.n	8004224 <__sflush_r+0xb8>
 800418c:	2200      	movs	r2, #0
 800418e:	2080      	movs	r0, #128	@ 0x80
 8004190:	682e      	ldr	r6, [r5, #0]
 8004192:	602a      	str	r2, [r5, #0]
 8004194:	001a      	movs	r2, r3
 8004196:	0140      	lsls	r0, r0, #5
 8004198:	6a21      	ldr	r1, [r4, #32]
 800419a:	4002      	ands	r2, r0
 800419c:	4203      	tst	r3, r0
 800419e:	d033      	beq.n	8004208 <__sflush_r+0x9c>
 80041a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80041a2:	89a3      	ldrh	r3, [r4, #12]
 80041a4:	075b      	lsls	r3, r3, #29
 80041a6:	d506      	bpl.n	80041b6 <__sflush_r+0x4a>
 80041a8:	6863      	ldr	r3, [r4, #4]
 80041aa:	1ad2      	subs	r2, r2, r3
 80041ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <__sflush_r+0x4a>
 80041b2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80041b4:	1ad2      	subs	r2, r2, r3
 80041b6:	2300      	movs	r3, #0
 80041b8:	0028      	movs	r0, r5
 80041ba:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80041bc:	6a21      	ldr	r1, [r4, #32]
 80041be:	47b8      	blx	r7
 80041c0:	89a2      	ldrh	r2, [r4, #12]
 80041c2:	1c43      	adds	r3, r0, #1
 80041c4:	d106      	bne.n	80041d4 <__sflush_r+0x68>
 80041c6:	6829      	ldr	r1, [r5, #0]
 80041c8:	291d      	cmp	r1, #29
 80041ca:	d846      	bhi.n	800425a <__sflush_r+0xee>
 80041cc:	4b29      	ldr	r3, [pc, #164]	@ (8004274 <__sflush_r+0x108>)
 80041ce:	40cb      	lsrs	r3, r1
 80041d0:	07db      	lsls	r3, r3, #31
 80041d2:	d542      	bpl.n	800425a <__sflush_r+0xee>
 80041d4:	2300      	movs	r3, #0
 80041d6:	6063      	str	r3, [r4, #4]
 80041d8:	6923      	ldr	r3, [r4, #16]
 80041da:	6023      	str	r3, [r4, #0]
 80041dc:	04d2      	lsls	r2, r2, #19
 80041de:	d505      	bpl.n	80041ec <__sflush_r+0x80>
 80041e0:	1c43      	adds	r3, r0, #1
 80041e2:	d102      	bne.n	80041ea <__sflush_r+0x7e>
 80041e4:	682b      	ldr	r3, [r5, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d100      	bne.n	80041ec <__sflush_r+0x80>
 80041ea:	6560      	str	r0, [r4, #84]	@ 0x54
 80041ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80041ee:	602e      	str	r6, [r5, #0]
 80041f0:	2900      	cmp	r1, #0
 80041f2:	d017      	beq.n	8004224 <__sflush_r+0xb8>
 80041f4:	0023      	movs	r3, r4
 80041f6:	3344      	adds	r3, #68	@ 0x44
 80041f8:	4299      	cmp	r1, r3
 80041fa:	d002      	beq.n	8004202 <__sflush_r+0x96>
 80041fc:	0028      	movs	r0, r5
 80041fe:	f000 faa9 	bl	8004754 <_free_r>
 8004202:	2300      	movs	r3, #0
 8004204:	6363      	str	r3, [r4, #52]	@ 0x34
 8004206:	e00d      	b.n	8004224 <__sflush_r+0xb8>
 8004208:	2301      	movs	r3, #1
 800420a:	0028      	movs	r0, r5
 800420c:	47b8      	blx	r7
 800420e:	0002      	movs	r2, r0
 8004210:	1c43      	adds	r3, r0, #1
 8004212:	d1c6      	bne.n	80041a2 <__sflush_r+0x36>
 8004214:	682b      	ldr	r3, [r5, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d0c3      	beq.n	80041a2 <__sflush_r+0x36>
 800421a:	2b1d      	cmp	r3, #29
 800421c:	d001      	beq.n	8004222 <__sflush_r+0xb6>
 800421e:	2b16      	cmp	r3, #22
 8004220:	d11a      	bne.n	8004258 <__sflush_r+0xec>
 8004222:	602e      	str	r6, [r5, #0]
 8004224:	2000      	movs	r0, #0
 8004226:	e01e      	b.n	8004266 <__sflush_r+0xfa>
 8004228:	690e      	ldr	r6, [r1, #16]
 800422a:	2e00      	cmp	r6, #0
 800422c:	d0fa      	beq.n	8004224 <__sflush_r+0xb8>
 800422e:	680f      	ldr	r7, [r1, #0]
 8004230:	600e      	str	r6, [r1, #0]
 8004232:	1bba      	subs	r2, r7, r6
 8004234:	9201      	str	r2, [sp, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	079b      	lsls	r3, r3, #30
 800423a:	d100      	bne.n	800423e <__sflush_r+0xd2>
 800423c:	694a      	ldr	r2, [r1, #20]
 800423e:	60a2      	str	r2, [r4, #8]
 8004240:	9b01      	ldr	r3, [sp, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	ddee      	ble.n	8004224 <__sflush_r+0xb8>
 8004246:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004248:	0032      	movs	r2, r6
 800424a:	001f      	movs	r7, r3
 800424c:	0028      	movs	r0, r5
 800424e:	9b01      	ldr	r3, [sp, #4]
 8004250:	6a21      	ldr	r1, [r4, #32]
 8004252:	47b8      	blx	r7
 8004254:	2800      	cmp	r0, #0
 8004256:	dc07      	bgt.n	8004268 <__sflush_r+0xfc>
 8004258:	89a2      	ldrh	r2, [r4, #12]
 800425a:	2340      	movs	r3, #64	@ 0x40
 800425c:	2001      	movs	r0, #1
 800425e:	4313      	orrs	r3, r2
 8004260:	b21b      	sxth	r3, r3
 8004262:	81a3      	strh	r3, [r4, #12]
 8004264:	4240      	negs	r0, r0
 8004266:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004268:	9b01      	ldr	r3, [sp, #4]
 800426a:	1836      	adds	r6, r6, r0
 800426c:	1a1b      	subs	r3, r3, r0
 800426e:	9301      	str	r3, [sp, #4]
 8004270:	e7e6      	b.n	8004240 <__sflush_r+0xd4>
 8004272:	46c0      	nop			@ (mov r8, r8)
 8004274:	20400001 	.word	0x20400001

08004278 <_fflush_r>:
 8004278:	690b      	ldr	r3, [r1, #16]
 800427a:	b570      	push	{r4, r5, r6, lr}
 800427c:	0005      	movs	r5, r0
 800427e:	000c      	movs	r4, r1
 8004280:	2b00      	cmp	r3, #0
 8004282:	d102      	bne.n	800428a <_fflush_r+0x12>
 8004284:	2500      	movs	r5, #0
 8004286:	0028      	movs	r0, r5
 8004288:	bd70      	pop	{r4, r5, r6, pc}
 800428a:	2800      	cmp	r0, #0
 800428c:	d004      	beq.n	8004298 <_fflush_r+0x20>
 800428e:	6a03      	ldr	r3, [r0, #32]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d101      	bne.n	8004298 <_fflush_r+0x20>
 8004294:	f7ff fa30 	bl	80036f8 <__sinit>
 8004298:	220c      	movs	r2, #12
 800429a:	5ea3      	ldrsh	r3, [r4, r2]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d0f1      	beq.n	8004284 <_fflush_r+0xc>
 80042a0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80042a2:	07d2      	lsls	r2, r2, #31
 80042a4:	d404      	bmi.n	80042b0 <_fflush_r+0x38>
 80042a6:	059b      	lsls	r3, r3, #22
 80042a8:	d402      	bmi.n	80042b0 <_fflush_r+0x38>
 80042aa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80042ac:	f7ff fa9b 	bl	80037e6 <__retarget_lock_acquire_recursive>
 80042b0:	0028      	movs	r0, r5
 80042b2:	0021      	movs	r1, r4
 80042b4:	f7ff ff5a 	bl	800416c <__sflush_r>
 80042b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80042ba:	0005      	movs	r5, r0
 80042bc:	07db      	lsls	r3, r3, #31
 80042be:	d4e2      	bmi.n	8004286 <_fflush_r+0xe>
 80042c0:	89a3      	ldrh	r3, [r4, #12]
 80042c2:	059b      	lsls	r3, r3, #22
 80042c4:	d4df      	bmi.n	8004286 <_fflush_r+0xe>
 80042c6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80042c8:	f7ff fa8e 	bl	80037e8 <__retarget_lock_release_recursive>
 80042cc:	e7db      	b.n	8004286 <_fflush_r+0xe>
	...

080042d0 <__malloc_lock>:
 80042d0:	b510      	push	{r4, lr}
 80042d2:	4802      	ldr	r0, [pc, #8]	@ (80042dc <__malloc_lock+0xc>)
 80042d4:	f7ff fa87 	bl	80037e6 <__retarget_lock_acquire_recursive>
 80042d8:	bd10      	pop	{r4, pc}
 80042da:	46c0      	nop			@ (mov r8, r8)
 80042dc:	20000b30 	.word	0x20000b30

080042e0 <__malloc_unlock>:
 80042e0:	b510      	push	{r4, lr}
 80042e2:	4802      	ldr	r0, [pc, #8]	@ (80042ec <__malloc_unlock+0xc>)
 80042e4:	f7ff fa80 	bl	80037e8 <__retarget_lock_release_recursive>
 80042e8:	bd10      	pop	{r4, pc}
 80042ea:	46c0      	nop			@ (mov r8, r8)
 80042ec:	20000b30 	.word	0x20000b30

080042f0 <__sread>:
 80042f0:	b570      	push	{r4, r5, r6, lr}
 80042f2:	000c      	movs	r4, r1
 80042f4:	250e      	movs	r5, #14
 80042f6:	5f49      	ldrsh	r1, [r1, r5]
 80042f8:	f000 f9ba 	bl	8004670 <_read_r>
 80042fc:	2800      	cmp	r0, #0
 80042fe:	db03      	blt.n	8004308 <__sread+0x18>
 8004300:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004302:	181b      	adds	r3, r3, r0
 8004304:	6563      	str	r3, [r4, #84]	@ 0x54
 8004306:	bd70      	pop	{r4, r5, r6, pc}
 8004308:	89a3      	ldrh	r3, [r4, #12]
 800430a:	4a02      	ldr	r2, [pc, #8]	@ (8004314 <__sread+0x24>)
 800430c:	4013      	ands	r3, r2
 800430e:	81a3      	strh	r3, [r4, #12]
 8004310:	e7f9      	b.n	8004306 <__sread+0x16>
 8004312:	46c0      	nop			@ (mov r8, r8)
 8004314:	ffffefff 	.word	0xffffefff

08004318 <__swrite>:
 8004318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800431a:	001f      	movs	r7, r3
 800431c:	898b      	ldrh	r3, [r1, #12]
 800431e:	0005      	movs	r5, r0
 8004320:	000c      	movs	r4, r1
 8004322:	0016      	movs	r6, r2
 8004324:	05db      	lsls	r3, r3, #23
 8004326:	d505      	bpl.n	8004334 <__swrite+0x1c>
 8004328:	230e      	movs	r3, #14
 800432a:	5ec9      	ldrsh	r1, [r1, r3]
 800432c:	2200      	movs	r2, #0
 800432e:	2302      	movs	r3, #2
 8004330:	f000 f98a 	bl	8004648 <_lseek_r>
 8004334:	89a3      	ldrh	r3, [r4, #12]
 8004336:	4a05      	ldr	r2, [pc, #20]	@ (800434c <__swrite+0x34>)
 8004338:	0028      	movs	r0, r5
 800433a:	4013      	ands	r3, r2
 800433c:	81a3      	strh	r3, [r4, #12]
 800433e:	0032      	movs	r2, r6
 8004340:	230e      	movs	r3, #14
 8004342:	5ee1      	ldrsh	r1, [r4, r3]
 8004344:	003b      	movs	r3, r7
 8004346:	f000 f9b9 	bl	80046bc <_write_r>
 800434a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800434c:	ffffefff 	.word	0xffffefff

08004350 <__sseek>:
 8004350:	b570      	push	{r4, r5, r6, lr}
 8004352:	000c      	movs	r4, r1
 8004354:	250e      	movs	r5, #14
 8004356:	5f49      	ldrsh	r1, [r1, r5]
 8004358:	f000 f976 	bl	8004648 <_lseek_r>
 800435c:	89a3      	ldrh	r3, [r4, #12]
 800435e:	1c42      	adds	r2, r0, #1
 8004360:	d103      	bne.n	800436a <__sseek+0x1a>
 8004362:	4a05      	ldr	r2, [pc, #20]	@ (8004378 <__sseek+0x28>)
 8004364:	4013      	ands	r3, r2
 8004366:	81a3      	strh	r3, [r4, #12]
 8004368:	bd70      	pop	{r4, r5, r6, pc}
 800436a:	2280      	movs	r2, #128	@ 0x80
 800436c:	0152      	lsls	r2, r2, #5
 800436e:	4313      	orrs	r3, r2
 8004370:	81a3      	strh	r3, [r4, #12]
 8004372:	6560      	str	r0, [r4, #84]	@ 0x54
 8004374:	e7f8      	b.n	8004368 <__sseek+0x18>
 8004376:	46c0      	nop			@ (mov r8, r8)
 8004378:	ffffefff 	.word	0xffffefff

0800437c <__sclose>:
 800437c:	b510      	push	{r4, lr}
 800437e:	230e      	movs	r3, #14
 8004380:	5ec9      	ldrsh	r1, [r1, r3]
 8004382:	f000 f9af 	bl	80046e4 <_close_r>
 8004386:	bd10      	pop	{r4, pc}

08004388 <_realloc_r>:
 8004388:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800438a:	0006      	movs	r6, r0
 800438c:	000c      	movs	r4, r1
 800438e:	0015      	movs	r5, r2
 8004390:	2900      	cmp	r1, #0
 8004392:	d105      	bne.n	80043a0 <_realloc_r+0x18>
 8004394:	0011      	movs	r1, r2
 8004396:	f7ff fced 	bl	8003d74 <_malloc_r>
 800439a:	0004      	movs	r4, r0
 800439c:	0020      	movs	r0, r4
 800439e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80043a0:	2a00      	cmp	r2, #0
 80043a2:	d103      	bne.n	80043ac <_realloc_r+0x24>
 80043a4:	f000 f9d6 	bl	8004754 <_free_r>
 80043a8:	002c      	movs	r4, r5
 80043aa:	e7f7      	b.n	800439c <_realloc_r+0x14>
 80043ac:	f000 fa1c 	bl	80047e8 <_malloc_usable_size_r>
 80043b0:	0007      	movs	r7, r0
 80043b2:	4285      	cmp	r5, r0
 80043b4:	d802      	bhi.n	80043bc <_realloc_r+0x34>
 80043b6:	0843      	lsrs	r3, r0, #1
 80043b8:	42ab      	cmp	r3, r5
 80043ba:	d3ef      	bcc.n	800439c <_realloc_r+0x14>
 80043bc:	0029      	movs	r1, r5
 80043be:	0030      	movs	r0, r6
 80043c0:	f7ff fcd8 	bl	8003d74 <_malloc_r>
 80043c4:	9001      	str	r0, [sp, #4]
 80043c6:	2800      	cmp	r0, #0
 80043c8:	d101      	bne.n	80043ce <_realloc_r+0x46>
 80043ca:	9c01      	ldr	r4, [sp, #4]
 80043cc:	e7e6      	b.n	800439c <_realloc_r+0x14>
 80043ce:	002a      	movs	r2, r5
 80043d0:	42bd      	cmp	r5, r7
 80043d2:	d900      	bls.n	80043d6 <_realloc_r+0x4e>
 80043d4:	003a      	movs	r2, r7
 80043d6:	0021      	movs	r1, r4
 80043d8:	9801      	ldr	r0, [sp, #4]
 80043da:	f000 f9b2 	bl	8004742 <memcpy>
 80043de:	0021      	movs	r1, r4
 80043e0:	0030      	movs	r0, r6
 80043e2:	f000 f9b7 	bl	8004754 <_free_r>
 80043e6:	e7f0      	b.n	80043ca <_realloc_r+0x42>

080043e8 <__swbuf_r>:
 80043e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ea:	0006      	movs	r6, r0
 80043ec:	000d      	movs	r5, r1
 80043ee:	0014      	movs	r4, r2
 80043f0:	2800      	cmp	r0, #0
 80043f2:	d004      	beq.n	80043fe <__swbuf_r+0x16>
 80043f4:	6a03      	ldr	r3, [r0, #32]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <__swbuf_r+0x16>
 80043fa:	f7ff f97d 	bl	80036f8 <__sinit>
 80043fe:	69a3      	ldr	r3, [r4, #24]
 8004400:	60a3      	str	r3, [r4, #8]
 8004402:	89a3      	ldrh	r3, [r4, #12]
 8004404:	071b      	lsls	r3, r3, #28
 8004406:	d502      	bpl.n	800440e <__swbuf_r+0x26>
 8004408:	6923      	ldr	r3, [r4, #16]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d109      	bne.n	8004422 <__swbuf_r+0x3a>
 800440e:	0021      	movs	r1, r4
 8004410:	0030      	movs	r0, r6
 8004412:	f000 f82b 	bl	800446c <__swsetup_r>
 8004416:	2800      	cmp	r0, #0
 8004418:	d003      	beq.n	8004422 <__swbuf_r+0x3a>
 800441a:	2501      	movs	r5, #1
 800441c:	426d      	negs	r5, r5
 800441e:	0028      	movs	r0, r5
 8004420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004422:	6923      	ldr	r3, [r4, #16]
 8004424:	6820      	ldr	r0, [r4, #0]
 8004426:	b2ef      	uxtb	r7, r5
 8004428:	1ac0      	subs	r0, r0, r3
 800442a:	6963      	ldr	r3, [r4, #20]
 800442c:	b2ed      	uxtb	r5, r5
 800442e:	4283      	cmp	r3, r0
 8004430:	dc05      	bgt.n	800443e <__swbuf_r+0x56>
 8004432:	0021      	movs	r1, r4
 8004434:	0030      	movs	r0, r6
 8004436:	f7ff ff1f 	bl	8004278 <_fflush_r>
 800443a:	2800      	cmp	r0, #0
 800443c:	d1ed      	bne.n	800441a <__swbuf_r+0x32>
 800443e:	68a3      	ldr	r3, [r4, #8]
 8004440:	3001      	adds	r0, #1
 8004442:	3b01      	subs	r3, #1
 8004444:	60a3      	str	r3, [r4, #8]
 8004446:	6823      	ldr	r3, [r4, #0]
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	6022      	str	r2, [r4, #0]
 800444c:	701f      	strb	r7, [r3, #0]
 800444e:	6963      	ldr	r3, [r4, #20]
 8004450:	4283      	cmp	r3, r0
 8004452:	d004      	beq.n	800445e <__swbuf_r+0x76>
 8004454:	89a3      	ldrh	r3, [r4, #12]
 8004456:	07db      	lsls	r3, r3, #31
 8004458:	d5e1      	bpl.n	800441e <__swbuf_r+0x36>
 800445a:	2d0a      	cmp	r5, #10
 800445c:	d1df      	bne.n	800441e <__swbuf_r+0x36>
 800445e:	0021      	movs	r1, r4
 8004460:	0030      	movs	r0, r6
 8004462:	f7ff ff09 	bl	8004278 <_fflush_r>
 8004466:	2800      	cmp	r0, #0
 8004468:	d0d9      	beq.n	800441e <__swbuf_r+0x36>
 800446a:	e7d6      	b.n	800441a <__swbuf_r+0x32>

0800446c <__swsetup_r>:
 800446c:	4b2d      	ldr	r3, [pc, #180]	@ (8004524 <__swsetup_r+0xb8>)
 800446e:	b570      	push	{r4, r5, r6, lr}
 8004470:	0005      	movs	r5, r0
 8004472:	6818      	ldr	r0, [r3, #0]
 8004474:	000c      	movs	r4, r1
 8004476:	2800      	cmp	r0, #0
 8004478:	d004      	beq.n	8004484 <__swsetup_r+0x18>
 800447a:	6a03      	ldr	r3, [r0, #32]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d101      	bne.n	8004484 <__swsetup_r+0x18>
 8004480:	f7ff f93a 	bl	80036f8 <__sinit>
 8004484:	220c      	movs	r2, #12
 8004486:	5ea3      	ldrsh	r3, [r4, r2]
 8004488:	071a      	lsls	r2, r3, #28
 800448a:	d423      	bmi.n	80044d4 <__swsetup_r+0x68>
 800448c:	06da      	lsls	r2, r3, #27
 800448e:	d407      	bmi.n	80044a0 <__swsetup_r+0x34>
 8004490:	2209      	movs	r2, #9
 8004492:	602a      	str	r2, [r5, #0]
 8004494:	2240      	movs	r2, #64	@ 0x40
 8004496:	2001      	movs	r0, #1
 8004498:	4313      	orrs	r3, r2
 800449a:	81a3      	strh	r3, [r4, #12]
 800449c:	4240      	negs	r0, r0
 800449e:	e03a      	b.n	8004516 <__swsetup_r+0xaa>
 80044a0:	075b      	lsls	r3, r3, #29
 80044a2:	d513      	bpl.n	80044cc <__swsetup_r+0x60>
 80044a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80044a6:	2900      	cmp	r1, #0
 80044a8:	d008      	beq.n	80044bc <__swsetup_r+0x50>
 80044aa:	0023      	movs	r3, r4
 80044ac:	3344      	adds	r3, #68	@ 0x44
 80044ae:	4299      	cmp	r1, r3
 80044b0:	d002      	beq.n	80044b8 <__swsetup_r+0x4c>
 80044b2:	0028      	movs	r0, r5
 80044b4:	f000 f94e 	bl	8004754 <_free_r>
 80044b8:	2300      	movs	r3, #0
 80044ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80044bc:	2224      	movs	r2, #36	@ 0x24
 80044be:	89a3      	ldrh	r3, [r4, #12]
 80044c0:	4393      	bics	r3, r2
 80044c2:	81a3      	strh	r3, [r4, #12]
 80044c4:	2300      	movs	r3, #0
 80044c6:	6063      	str	r3, [r4, #4]
 80044c8:	6923      	ldr	r3, [r4, #16]
 80044ca:	6023      	str	r3, [r4, #0]
 80044cc:	2308      	movs	r3, #8
 80044ce:	89a2      	ldrh	r2, [r4, #12]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	81a3      	strh	r3, [r4, #12]
 80044d4:	6923      	ldr	r3, [r4, #16]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10b      	bne.n	80044f2 <__swsetup_r+0x86>
 80044da:	21a0      	movs	r1, #160	@ 0xa0
 80044dc:	2280      	movs	r2, #128	@ 0x80
 80044de:	89a3      	ldrh	r3, [r4, #12]
 80044e0:	0089      	lsls	r1, r1, #2
 80044e2:	0092      	lsls	r2, r2, #2
 80044e4:	400b      	ands	r3, r1
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d003      	beq.n	80044f2 <__swsetup_r+0x86>
 80044ea:	0021      	movs	r1, r4
 80044ec:	0028      	movs	r0, r5
 80044ee:	f000 f845 	bl	800457c <__smakebuf_r>
 80044f2:	220c      	movs	r2, #12
 80044f4:	5ea3      	ldrsh	r3, [r4, r2]
 80044f6:	2101      	movs	r1, #1
 80044f8:	001a      	movs	r2, r3
 80044fa:	400a      	ands	r2, r1
 80044fc:	420b      	tst	r3, r1
 80044fe:	d00b      	beq.n	8004518 <__swsetup_r+0xac>
 8004500:	2200      	movs	r2, #0
 8004502:	60a2      	str	r2, [r4, #8]
 8004504:	6962      	ldr	r2, [r4, #20]
 8004506:	4252      	negs	r2, r2
 8004508:	61a2      	str	r2, [r4, #24]
 800450a:	2000      	movs	r0, #0
 800450c:	6922      	ldr	r2, [r4, #16]
 800450e:	4282      	cmp	r2, r0
 8004510:	d101      	bne.n	8004516 <__swsetup_r+0xaa>
 8004512:	061a      	lsls	r2, r3, #24
 8004514:	d4be      	bmi.n	8004494 <__swsetup_r+0x28>
 8004516:	bd70      	pop	{r4, r5, r6, pc}
 8004518:	0799      	lsls	r1, r3, #30
 800451a:	d400      	bmi.n	800451e <__swsetup_r+0xb2>
 800451c:	6962      	ldr	r2, [r4, #20]
 800451e:	60a2      	str	r2, [r4, #8]
 8004520:	e7f3      	b.n	800450a <__swsetup_r+0x9e>
 8004522:	46c0      	nop			@ (mov r8, r8)
 8004524:	2000001c 	.word	0x2000001c

08004528 <__swhatbuf_r>:
 8004528:	b570      	push	{r4, r5, r6, lr}
 800452a:	000e      	movs	r6, r1
 800452c:	001d      	movs	r5, r3
 800452e:	230e      	movs	r3, #14
 8004530:	5ec9      	ldrsh	r1, [r1, r3]
 8004532:	0014      	movs	r4, r2
 8004534:	b096      	sub	sp, #88	@ 0x58
 8004536:	2900      	cmp	r1, #0
 8004538:	da0c      	bge.n	8004554 <__swhatbuf_r+0x2c>
 800453a:	89b2      	ldrh	r2, [r6, #12]
 800453c:	2380      	movs	r3, #128	@ 0x80
 800453e:	0011      	movs	r1, r2
 8004540:	4019      	ands	r1, r3
 8004542:	421a      	tst	r2, r3
 8004544:	d114      	bne.n	8004570 <__swhatbuf_r+0x48>
 8004546:	2380      	movs	r3, #128	@ 0x80
 8004548:	00db      	lsls	r3, r3, #3
 800454a:	2000      	movs	r0, #0
 800454c:	6029      	str	r1, [r5, #0]
 800454e:	6023      	str	r3, [r4, #0]
 8004550:	b016      	add	sp, #88	@ 0x58
 8004552:	bd70      	pop	{r4, r5, r6, pc}
 8004554:	466a      	mov	r2, sp
 8004556:	f000 f8d7 	bl	8004708 <_fstat_r>
 800455a:	2800      	cmp	r0, #0
 800455c:	dbed      	blt.n	800453a <__swhatbuf_r+0x12>
 800455e:	23f0      	movs	r3, #240	@ 0xf0
 8004560:	9901      	ldr	r1, [sp, #4]
 8004562:	021b      	lsls	r3, r3, #8
 8004564:	4019      	ands	r1, r3
 8004566:	4b04      	ldr	r3, [pc, #16]	@ (8004578 <__swhatbuf_r+0x50>)
 8004568:	18c9      	adds	r1, r1, r3
 800456a:	424b      	negs	r3, r1
 800456c:	4159      	adcs	r1, r3
 800456e:	e7ea      	b.n	8004546 <__swhatbuf_r+0x1e>
 8004570:	2100      	movs	r1, #0
 8004572:	2340      	movs	r3, #64	@ 0x40
 8004574:	e7e9      	b.n	800454a <__swhatbuf_r+0x22>
 8004576:	46c0      	nop			@ (mov r8, r8)
 8004578:	ffffe000 	.word	0xffffe000

0800457c <__smakebuf_r>:
 800457c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800457e:	2602      	movs	r6, #2
 8004580:	898b      	ldrh	r3, [r1, #12]
 8004582:	0005      	movs	r5, r0
 8004584:	000c      	movs	r4, r1
 8004586:	b085      	sub	sp, #20
 8004588:	4233      	tst	r3, r6
 800458a:	d007      	beq.n	800459c <__smakebuf_r+0x20>
 800458c:	0023      	movs	r3, r4
 800458e:	3347      	adds	r3, #71	@ 0x47
 8004590:	6023      	str	r3, [r4, #0]
 8004592:	6123      	str	r3, [r4, #16]
 8004594:	2301      	movs	r3, #1
 8004596:	6163      	str	r3, [r4, #20]
 8004598:	b005      	add	sp, #20
 800459a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800459c:	ab03      	add	r3, sp, #12
 800459e:	aa02      	add	r2, sp, #8
 80045a0:	f7ff ffc2 	bl	8004528 <__swhatbuf_r>
 80045a4:	9f02      	ldr	r7, [sp, #8]
 80045a6:	9001      	str	r0, [sp, #4]
 80045a8:	0039      	movs	r1, r7
 80045aa:	0028      	movs	r0, r5
 80045ac:	f7ff fbe2 	bl	8003d74 <_malloc_r>
 80045b0:	2800      	cmp	r0, #0
 80045b2:	d108      	bne.n	80045c6 <__smakebuf_r+0x4a>
 80045b4:	220c      	movs	r2, #12
 80045b6:	5ea3      	ldrsh	r3, [r4, r2]
 80045b8:	059a      	lsls	r2, r3, #22
 80045ba:	d4ed      	bmi.n	8004598 <__smakebuf_r+0x1c>
 80045bc:	2203      	movs	r2, #3
 80045be:	4393      	bics	r3, r2
 80045c0:	431e      	orrs	r6, r3
 80045c2:	81a6      	strh	r6, [r4, #12]
 80045c4:	e7e2      	b.n	800458c <__smakebuf_r+0x10>
 80045c6:	2380      	movs	r3, #128	@ 0x80
 80045c8:	89a2      	ldrh	r2, [r4, #12]
 80045ca:	6020      	str	r0, [r4, #0]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	81a3      	strh	r3, [r4, #12]
 80045d0:	9b03      	ldr	r3, [sp, #12]
 80045d2:	6120      	str	r0, [r4, #16]
 80045d4:	6167      	str	r7, [r4, #20]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00c      	beq.n	80045f4 <__smakebuf_r+0x78>
 80045da:	0028      	movs	r0, r5
 80045dc:	230e      	movs	r3, #14
 80045de:	5ee1      	ldrsh	r1, [r4, r3]
 80045e0:	f000 f820 	bl	8004624 <_isatty_r>
 80045e4:	2800      	cmp	r0, #0
 80045e6:	d005      	beq.n	80045f4 <__smakebuf_r+0x78>
 80045e8:	2303      	movs	r3, #3
 80045ea:	89a2      	ldrh	r2, [r4, #12]
 80045ec:	439a      	bics	r2, r3
 80045ee:	3b02      	subs	r3, #2
 80045f0:	4313      	orrs	r3, r2
 80045f2:	81a3      	strh	r3, [r4, #12]
 80045f4:	89a3      	ldrh	r3, [r4, #12]
 80045f6:	9a01      	ldr	r2, [sp, #4]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	81a3      	strh	r3, [r4, #12]
 80045fc:	e7cc      	b.n	8004598 <__smakebuf_r+0x1c>

080045fe <memmove>:
 80045fe:	b510      	push	{r4, lr}
 8004600:	4288      	cmp	r0, r1
 8004602:	d902      	bls.n	800460a <memmove+0xc>
 8004604:	188b      	adds	r3, r1, r2
 8004606:	4298      	cmp	r0, r3
 8004608:	d308      	bcc.n	800461c <memmove+0x1e>
 800460a:	2300      	movs	r3, #0
 800460c:	429a      	cmp	r2, r3
 800460e:	d007      	beq.n	8004620 <memmove+0x22>
 8004610:	5ccc      	ldrb	r4, [r1, r3]
 8004612:	54c4      	strb	r4, [r0, r3]
 8004614:	3301      	adds	r3, #1
 8004616:	e7f9      	b.n	800460c <memmove+0xe>
 8004618:	5c8b      	ldrb	r3, [r1, r2]
 800461a:	5483      	strb	r3, [r0, r2]
 800461c:	3a01      	subs	r2, #1
 800461e:	d2fb      	bcs.n	8004618 <memmove+0x1a>
 8004620:	bd10      	pop	{r4, pc}
	...

08004624 <_isatty_r>:
 8004624:	2300      	movs	r3, #0
 8004626:	b570      	push	{r4, r5, r6, lr}
 8004628:	4d06      	ldr	r5, [pc, #24]	@ (8004644 <_isatty_r+0x20>)
 800462a:	0004      	movs	r4, r0
 800462c:	0008      	movs	r0, r1
 800462e:	602b      	str	r3, [r5, #0]
 8004630:	f7fc f9a5 	bl	800097e <_isatty>
 8004634:	1c43      	adds	r3, r0, #1
 8004636:	d103      	bne.n	8004640 <_isatty_r+0x1c>
 8004638:	682b      	ldr	r3, [r5, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d000      	beq.n	8004640 <_isatty_r+0x1c>
 800463e:	6023      	str	r3, [r4, #0]
 8004640:	bd70      	pop	{r4, r5, r6, pc}
 8004642:	46c0      	nop			@ (mov r8, r8)
 8004644:	20000b3c 	.word	0x20000b3c

08004648 <_lseek_r>:
 8004648:	b570      	push	{r4, r5, r6, lr}
 800464a:	0004      	movs	r4, r0
 800464c:	0008      	movs	r0, r1
 800464e:	0011      	movs	r1, r2
 8004650:	001a      	movs	r2, r3
 8004652:	2300      	movs	r3, #0
 8004654:	4d05      	ldr	r5, [pc, #20]	@ (800466c <_lseek_r+0x24>)
 8004656:	602b      	str	r3, [r5, #0]
 8004658:	f7fc f99a 	bl	8000990 <_lseek>
 800465c:	1c43      	adds	r3, r0, #1
 800465e:	d103      	bne.n	8004668 <_lseek_r+0x20>
 8004660:	682b      	ldr	r3, [r5, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d000      	beq.n	8004668 <_lseek_r+0x20>
 8004666:	6023      	str	r3, [r4, #0]
 8004668:	bd70      	pop	{r4, r5, r6, pc}
 800466a:	46c0      	nop			@ (mov r8, r8)
 800466c:	20000b3c 	.word	0x20000b3c

08004670 <_read_r>:
 8004670:	b570      	push	{r4, r5, r6, lr}
 8004672:	0004      	movs	r4, r0
 8004674:	0008      	movs	r0, r1
 8004676:	0011      	movs	r1, r2
 8004678:	001a      	movs	r2, r3
 800467a:	2300      	movs	r3, #0
 800467c:	4d05      	ldr	r5, [pc, #20]	@ (8004694 <_read_r+0x24>)
 800467e:	602b      	str	r3, [r5, #0]
 8004680:	f7fc f92c 	bl	80008dc <_read>
 8004684:	1c43      	adds	r3, r0, #1
 8004686:	d103      	bne.n	8004690 <_read_r+0x20>
 8004688:	682b      	ldr	r3, [r5, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d000      	beq.n	8004690 <_read_r+0x20>
 800468e:	6023      	str	r3, [r4, #0]
 8004690:	bd70      	pop	{r4, r5, r6, pc}
 8004692:	46c0      	nop			@ (mov r8, r8)
 8004694:	20000b3c 	.word	0x20000b3c

08004698 <_sbrk_r>:
 8004698:	2300      	movs	r3, #0
 800469a:	b570      	push	{r4, r5, r6, lr}
 800469c:	4d06      	ldr	r5, [pc, #24]	@ (80046b8 <_sbrk_r+0x20>)
 800469e:	0004      	movs	r4, r0
 80046a0:	0008      	movs	r0, r1
 80046a2:	602b      	str	r3, [r5, #0]
 80046a4:	f7fc f980 	bl	80009a8 <_sbrk>
 80046a8:	1c43      	adds	r3, r0, #1
 80046aa:	d103      	bne.n	80046b4 <_sbrk_r+0x1c>
 80046ac:	682b      	ldr	r3, [r5, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d000      	beq.n	80046b4 <_sbrk_r+0x1c>
 80046b2:	6023      	str	r3, [r4, #0]
 80046b4:	bd70      	pop	{r4, r5, r6, pc}
 80046b6:	46c0      	nop			@ (mov r8, r8)
 80046b8:	20000b3c 	.word	0x20000b3c

080046bc <_write_r>:
 80046bc:	b570      	push	{r4, r5, r6, lr}
 80046be:	0004      	movs	r4, r0
 80046c0:	0008      	movs	r0, r1
 80046c2:	0011      	movs	r1, r2
 80046c4:	001a      	movs	r2, r3
 80046c6:	2300      	movs	r3, #0
 80046c8:	4d05      	ldr	r5, [pc, #20]	@ (80046e0 <_write_r+0x24>)
 80046ca:	602b      	str	r3, [r5, #0]
 80046cc:	f7fc f923 	bl	8000916 <_write>
 80046d0:	1c43      	adds	r3, r0, #1
 80046d2:	d103      	bne.n	80046dc <_write_r+0x20>
 80046d4:	682b      	ldr	r3, [r5, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d000      	beq.n	80046dc <_write_r+0x20>
 80046da:	6023      	str	r3, [r4, #0]
 80046dc:	bd70      	pop	{r4, r5, r6, pc}
 80046de:	46c0      	nop			@ (mov r8, r8)
 80046e0:	20000b3c 	.word	0x20000b3c

080046e4 <_close_r>:
 80046e4:	2300      	movs	r3, #0
 80046e6:	b570      	push	{r4, r5, r6, lr}
 80046e8:	4d06      	ldr	r5, [pc, #24]	@ (8004704 <_close_r+0x20>)
 80046ea:	0004      	movs	r4, r0
 80046ec:	0008      	movs	r0, r1
 80046ee:	602b      	str	r3, [r5, #0]
 80046f0:	f7fc f92d 	bl	800094e <_close>
 80046f4:	1c43      	adds	r3, r0, #1
 80046f6:	d103      	bne.n	8004700 <_close_r+0x1c>
 80046f8:	682b      	ldr	r3, [r5, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d000      	beq.n	8004700 <_close_r+0x1c>
 80046fe:	6023      	str	r3, [r4, #0]
 8004700:	bd70      	pop	{r4, r5, r6, pc}
 8004702:	46c0      	nop			@ (mov r8, r8)
 8004704:	20000b3c 	.word	0x20000b3c

08004708 <_fstat_r>:
 8004708:	2300      	movs	r3, #0
 800470a:	b570      	push	{r4, r5, r6, lr}
 800470c:	4d06      	ldr	r5, [pc, #24]	@ (8004728 <_fstat_r+0x20>)
 800470e:	0004      	movs	r4, r0
 8004710:	0008      	movs	r0, r1
 8004712:	0011      	movs	r1, r2
 8004714:	602b      	str	r3, [r5, #0]
 8004716:	f7fc f924 	bl	8000962 <_fstat>
 800471a:	1c43      	adds	r3, r0, #1
 800471c:	d103      	bne.n	8004726 <_fstat_r+0x1e>
 800471e:	682b      	ldr	r3, [r5, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d000      	beq.n	8004726 <_fstat_r+0x1e>
 8004724:	6023      	str	r3, [r4, #0]
 8004726:	bd70      	pop	{r4, r5, r6, pc}
 8004728:	20000b3c 	.word	0x20000b3c

0800472c <memchr>:
 800472c:	b2c9      	uxtb	r1, r1
 800472e:	1882      	adds	r2, r0, r2
 8004730:	4290      	cmp	r0, r2
 8004732:	d101      	bne.n	8004738 <memchr+0xc>
 8004734:	2000      	movs	r0, #0
 8004736:	4770      	bx	lr
 8004738:	7803      	ldrb	r3, [r0, #0]
 800473a:	428b      	cmp	r3, r1
 800473c:	d0fb      	beq.n	8004736 <memchr+0xa>
 800473e:	3001      	adds	r0, #1
 8004740:	e7f6      	b.n	8004730 <memchr+0x4>

08004742 <memcpy>:
 8004742:	2300      	movs	r3, #0
 8004744:	b510      	push	{r4, lr}
 8004746:	429a      	cmp	r2, r3
 8004748:	d100      	bne.n	800474c <memcpy+0xa>
 800474a:	bd10      	pop	{r4, pc}
 800474c:	5ccc      	ldrb	r4, [r1, r3]
 800474e:	54c4      	strb	r4, [r0, r3]
 8004750:	3301      	adds	r3, #1
 8004752:	e7f8      	b.n	8004746 <memcpy+0x4>

08004754 <_free_r>:
 8004754:	b570      	push	{r4, r5, r6, lr}
 8004756:	0005      	movs	r5, r0
 8004758:	1e0c      	subs	r4, r1, #0
 800475a:	d010      	beq.n	800477e <_free_r+0x2a>
 800475c:	3c04      	subs	r4, #4
 800475e:	6823      	ldr	r3, [r4, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	da00      	bge.n	8004766 <_free_r+0x12>
 8004764:	18e4      	adds	r4, r4, r3
 8004766:	0028      	movs	r0, r5
 8004768:	f7ff fdb2 	bl	80042d0 <__malloc_lock>
 800476c:	4a1d      	ldr	r2, [pc, #116]	@ (80047e4 <_free_r+0x90>)
 800476e:	6813      	ldr	r3, [r2, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d105      	bne.n	8004780 <_free_r+0x2c>
 8004774:	6063      	str	r3, [r4, #4]
 8004776:	6014      	str	r4, [r2, #0]
 8004778:	0028      	movs	r0, r5
 800477a:	f7ff fdb1 	bl	80042e0 <__malloc_unlock>
 800477e:	bd70      	pop	{r4, r5, r6, pc}
 8004780:	42a3      	cmp	r3, r4
 8004782:	d908      	bls.n	8004796 <_free_r+0x42>
 8004784:	6820      	ldr	r0, [r4, #0]
 8004786:	1821      	adds	r1, r4, r0
 8004788:	428b      	cmp	r3, r1
 800478a:	d1f3      	bne.n	8004774 <_free_r+0x20>
 800478c:	6819      	ldr	r1, [r3, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	1809      	adds	r1, r1, r0
 8004792:	6021      	str	r1, [r4, #0]
 8004794:	e7ee      	b.n	8004774 <_free_r+0x20>
 8004796:	001a      	movs	r2, r3
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <_free_r+0x4e>
 800479e:	42a3      	cmp	r3, r4
 80047a0:	d9f9      	bls.n	8004796 <_free_r+0x42>
 80047a2:	6811      	ldr	r1, [r2, #0]
 80047a4:	1850      	adds	r0, r2, r1
 80047a6:	42a0      	cmp	r0, r4
 80047a8:	d10b      	bne.n	80047c2 <_free_r+0x6e>
 80047aa:	6820      	ldr	r0, [r4, #0]
 80047ac:	1809      	adds	r1, r1, r0
 80047ae:	1850      	adds	r0, r2, r1
 80047b0:	6011      	str	r1, [r2, #0]
 80047b2:	4283      	cmp	r3, r0
 80047b4:	d1e0      	bne.n	8004778 <_free_r+0x24>
 80047b6:	6818      	ldr	r0, [r3, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	1841      	adds	r1, r0, r1
 80047bc:	6011      	str	r1, [r2, #0]
 80047be:	6053      	str	r3, [r2, #4]
 80047c0:	e7da      	b.n	8004778 <_free_r+0x24>
 80047c2:	42a0      	cmp	r0, r4
 80047c4:	d902      	bls.n	80047cc <_free_r+0x78>
 80047c6:	230c      	movs	r3, #12
 80047c8:	602b      	str	r3, [r5, #0]
 80047ca:	e7d5      	b.n	8004778 <_free_r+0x24>
 80047cc:	6820      	ldr	r0, [r4, #0]
 80047ce:	1821      	adds	r1, r4, r0
 80047d0:	428b      	cmp	r3, r1
 80047d2:	d103      	bne.n	80047dc <_free_r+0x88>
 80047d4:	6819      	ldr	r1, [r3, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	1809      	adds	r1, r1, r0
 80047da:	6021      	str	r1, [r4, #0]
 80047dc:	6063      	str	r3, [r4, #4]
 80047de:	6054      	str	r4, [r2, #4]
 80047e0:	e7ca      	b.n	8004778 <_free_r+0x24>
 80047e2:	46c0      	nop			@ (mov r8, r8)
 80047e4:	20000b38 	.word	0x20000b38

080047e8 <_malloc_usable_size_r>:
 80047e8:	1f0b      	subs	r3, r1, #4
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	1f18      	subs	r0, r3, #4
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	da01      	bge.n	80047f6 <_malloc_usable_size_r+0xe>
 80047f2:	580b      	ldr	r3, [r1, r0]
 80047f4:	18c0      	adds	r0, r0, r3
 80047f6:	4770      	bx	lr

080047f8 <_init>:
 80047f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047fa:	46c0      	nop			@ (mov r8, r8)
 80047fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047fe:	bc08      	pop	{r3}
 8004800:	469e      	mov	lr, r3
 8004802:	4770      	bx	lr

08004804 <_fini>:
 8004804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004806:	46c0      	nop			@ (mov r8, r8)
 8004808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800480a:	bc08      	pop	{r3}
 800480c:	469e      	mov	lr, r3
 800480e:	4770      	bx	lr
